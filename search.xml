<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring</title>
      <link href="2021/08/03/Spring%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/08/03/Spring%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><p>框架概述 </p><ul><li><p>Spring 是轻量级的开源的 JavaEE 框架 </p></li><li><p>Spring 可以解决企业应用开发的复杂性 </p></li><li><p>Spring 有两个核心部分：IOC 和 Aop </p><ul><li>IOC：控制反转，把创建对象过程交给 Spring 进行管理 </li><li>AOP：面向切面，不修改源代码进行功能增强 </li></ul></li><li><p>Spring 特点 </p><ul><li>方便解耦，简化开发 </li><li>Aop 编程支持 </li><li>方便程序测试 </li><li>方便和其他框架进行整合 </li><li>方便进行事务操作 </li><li>降低 API 开发难度</li></ul></li></ul><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>控制反转，把对象创建和对象之间的调用过程，交个spring进行管理</li><li>使用IOC的目的：为了降低耦合度</li></ul><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><ul><li>xml解析，工厂模式，反射，进一步降低耦合度</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210803181003.png"></p><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><ul><li>IOC的思想基于IOC容器来完成，IOC容器底层就是对象工厂</li><li>Spring提供IOC容器实现两种方式<ul><li>BeanFactory：IOC容器最基本的实现，是Spring内部的使用接口，不提供开发人员使用<ul><li>特点：加载配置文件的时候不会去创建对象，在获取和使用的时候才去创建</li></ul></li><li>ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用<ul><li>特点：加载配置文件时候就会把在配置文件中的对象进行创建</li><li>主要实现类1：ClassPathXmlApplicationContext，参数中配置文件的路径是类路径下的相对路径</li><li>主要实现类2：FileSystemXmlApplicationContext，参数中配置文件的路径是磁盘中的绝对路径</li></ul></li></ul></li></ul><h2 id="IOC操作–Bean管理"><a href="#IOC操作–Bean管理" class="headerlink" title="IOC操作–Bean管理"></a>IOC操作–Bean管理</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><ul><li>Bean管理指的是两个操作<ul><li>Spring创建对象<ul><li>创建对象就是在配置文件中的 bean 标签</li></ul></li><li>Spring注入属性<ul><li>就是把 IOC 容器中的对象注入到其他类中，成为其他类的属性</li></ul></li></ul></li></ul><h3 id="基于xml配置文件的方式"><a href="#基于xml配置文件的方式" class="headerlink" title="基于xml配置文件的方式"></a>基于xml配置文件的方式</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><ul><li>在Spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建</li><li>bean标签里的常用属性<ul><li>id  :  唯一标识，在代码中就是根据 id 来确定你是要创建哪一个类的对象</li><li>class ： 要创建的类的<strong>全路径</strong></li><li>name : 作用跟id一样，里面还可以写特殊符号</li></ul></li><li>==<strong>创建对象是去执行类里的无参构造器</strong>==</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置User对象并且通过无参构造器创建<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.whw.spring5.User"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h4 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h4><ul><li><p>DI：依赖注入，就是注入属性</p></li><li><p>==<strong>DI 是 IOC 的一种实现，它就表示依赖注入，但依赖注入需要在创建对象之后</strong>==</p></li><li><p><strong>IOC 指将对象的创建权，反转到Spring容器</strong><br><strong>DI 指Spring创建对象的过程中，将对象  依赖  属性  通过配置进行注入</strong></p></li><li><ul><li><p>注入方式1：使用set方法进行注入</p><ul><li>步骤1：在类中编写属性以及对应的set方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String bName<span class="token punctuation">;</span>   <span class="token keyword">private</span> String bAuthor<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//省略所有属性的 set 方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bName <span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>bAuthor<span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>步骤2：在配置文件中创建对象并完成属性注入</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--使用property完成属性注入         name:类里面属性名称   value：向属性注入的值   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>易筋经<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>达摩老祖<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1.加载spring配置文件</span>   ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2.获取配置创建的对象</span>Book book <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>   book<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//易筋经 --- 达摩老祖</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>注入方式2：使用有参构造器注入</p><ul><li>创建类，定义属性，创建属性对应有参数构造方法 </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>   <span class="token keyword">private</span> String address<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//有参数构造</span>   <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>String oname<span class="token punctuation">,</span>String address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>  在配置文件中进行配置 </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--通过有参构造器创建对象，并且注入属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.Orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>电脑<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>注入方式3：p 名称空间注入，实际上还是set方法注入，只不过更简化了</li></ul><pre class=" language-xml"><code class="language-xml">  在xml文件的最上面的 beans 标签内加入以下内容  xmlns:p="http://www.springframework.org/schema/p"注入属性的写法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.Book<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>bname</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>九阳神功<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">p:</span>bauthor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>无名氏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h4 id="xml-注入其他类型属性"><a href="#xml-注入其他类型属性" class="headerlink" title="xml 注入其他类型属性"></a>xml 注入其他类型属性</h4><ul><li>字面量<ul><li>null值</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--null 值--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><ul><li>属性值包含特殊符号</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>   属性值包含特殊符号     <span class="token number">1</span> 把<span class="token operator">&lt;</span><span class="token operator">></span>进行转义 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>     <span class="token number">2</span> 把带特殊符号内容写到  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span>特殊内容<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>value<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;&lt;</span>南京<span class="token operator">>></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> </code></pre></li></ul><h4 id="外部bean"><a href="#外部bean" class="headerlink" title="外部bean"></a>外部bean</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建UserDao类型属性，生成set方法</span>   <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//重点是set方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"daoUpdate add......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--外部bean--></span><span class="token comment" spellcheck="true">&lt;!--创建service和dao对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--注入userDao对象        name:类里面属性的名称        ref属性:创建userDao对象的bean标签id值     --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoId<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="内部bean"><a href="#内部bean" class="headerlink" title="内部bean"></a>内部bean</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//部门类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String dName<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setdName</span><span class="token punctuation">(</span>String dName<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dName <span class="token operator">=</span> dName<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dName<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//员工类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String eName<span class="token punctuation">;</span>   <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//员工属于某一个部门，使用对象形式表示</span>   <span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span>   <span class="token keyword">public</span> Dept <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dept<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//省略所有属性的 set 方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eName <span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span> gender <span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--内部 bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--设置两个普通属性--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>王瀚文<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--设置对象类型属性--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>董事部<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h4><p>就是给外部Bean属性设置值。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 级联赋值  方式一：--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--设置两个普通属性--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>王瀚文<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--级联赋值--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>董事部<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 级联赋值  方式二：(重要)需要在EMP类中有getDept()，否则报错--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--设置两个普通属性--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>王瀚文<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.dName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>财务部<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="xml注入集合属性"><a href="#xml注入集合属性" class="headerlink" title="xml注入集合属性"></a>xml注入集合属性</h4><ul><li>注入数组，list集合，map集合类型的属性</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.数组类型的属性</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.List集合类型属性</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.map集合类型属性</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.set集合类型属性</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//学生所学习的多门课程</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Course<span class="token operator">></span> courseList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Course<span class="token operator">></span> courseMaps<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//省略所有属性的 set 方法</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Course类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String cName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setcName</span><span class="token punctuation">(</span>String cName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cName <span class="token operator">=</span> cName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--集合类型属性的注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.collectiontype.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--数组类型属性的注入--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>数据结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--List类型属性的注入--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>王瀚文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>瀚文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--maps类型属性的注入--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--sets--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>MySQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--注入List集合类型，值是对象--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courseList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--注入Map集合类型，值是对象--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courseMaps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--创建多个course对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring5框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="提取集合的公共部分"><a href="#提取集合的公共部分" class="headerlink" title="提取集合的公共部分"></a>提取集合的公共部分</h4><pre class=" language-xml"><code class="language-xml">名称空间上加以下内容：xmlns:util="http://www.springframework.org/schema/util"xsi:schemaLocation 里追加  http://www.springframework.org/schema/util 和http://www.springframework.org/schema/util/spring-util.xsd<span class="token comment" spellcheck="true">&lt;!--提取list集合类型属性的注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>易筋经<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>九阴真经<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>九阳神功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--提取map集合类型属性的注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>map</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>whw<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zxl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>map</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--提取list集合类型属性注入使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.collectiontype.Book<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p>​    Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean） </p><ul><li><p>普通 bean：在配置文件中定义 bean 类型就是返回类型</p></li><li><p>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样 </p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Course<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * 定义返回bean     * @return     * @throws Exception     */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> Course <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Course course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      course<span class="token punctuation">.</span><span class="token function">setcName</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> course<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.factorybean.MyBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h4><p>   就是设置创建 bean 实例是单实例还是多实例 。<strong>默认情况下，bean 是单实例对象</strong></p><p>   bean 标签里面有  scope  属性 用于设置单实例还是多实例 </p><ul><li>singleton，表示是单实例对象，它在加载 spring 配置文件时候就会创建单实例对象</li><li> prototype，表示是多实例对象 ，它不是在加载 spring 配置文件时候创建对象，在调用 getBean 方法时候创建多实例对象</li></ul><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><p>就是对象创建到对象销毁的过程</p><ul><li>通过构造器创建 bean 实例（无参数构造） </li><li>为 bean 的属性设置值或者对其他 bean 的引用（调用 set 方法）</li><li>把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization </li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li>把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization </li><li>获取创建好的bean实例对象</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String oName<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步：无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setoName</span><span class="token punctuation">(</span>String oName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>oName <span class="token operator">=</span> oName<span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步：调用set方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建一个执行的初始化方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步：执行初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建一个执行销毁的方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第七步：执行销毁方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPost</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步：初始化之前执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第五步：初始化之后执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   ClassPathXmlApplicationContext context <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Orders orders <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span> Orders<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第六步：获取创建bean实例对象:"</span> <span class="token operator">+</span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//销毁bean实例对象</span>   context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    init-method属性:执行初始化方法   destroy-method属性：执行销毁方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.Orders<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initMethod<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroyMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>手机<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置后置处理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeanPost<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5.bean.MyBeanPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="xml-自动装配"><a href="#xml-自动装配" class="headerlink" title="xml 自动装配"></a>xml 自动装配</h4><p>​    根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--实现自动装配     bean标签 autowire 属性,配置自动装配     autowire属性常用两个值         byName：根据属性名称注入，被注入bean的id值和类属性名称必须一样         byType：根据属性类型注入,只能注入有一个，要是有类型一样的会报错--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.autowire.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.autowire.Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a>引入外部文件</h4><ul><li>直接配置连接池</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/userDb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> </code></pre><ul><li>外部 properties 属性文件引入到 spring 配置文件中 </li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">prop.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">prop.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8</span><span class="token attr-name">prop.userName</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">prop.password</span><span class="token punctuation">=</span><span class="token attr-value">172161</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入名称空间，添加一下内容 --></span>xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation 中追加http://www.springframework.org/schema/context 和http://www.springframework.org/schema/context/spring-context.xsd<span class="token comment" spellcheck="true">&lt;!--引入外部属性文件--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.driverClass&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.userName&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="基于注解的方式"><a href="#基于注解的方式" class="headerlink" title="基于注解的方式"></a>基于注解的方式</h3><h4 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h4><ul><li><p>注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值..)</p></li><li><p>使用注解，注解作用在类上面，方法上面，属性上面</p></li><li><p>使用注解目的：简化 xml 配置</p></li></ul><p>Bean 管理中创建对象的注解</p><ul><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ul><p>需要导入依赖</p><p>spring-aop-5.2.6.RELEASE.jar</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入名称空间，添加一下内容 --></span>xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation 中追加http://www.springframework.org/schema/context 和http://www.springframework.org/schema/context/spring-context.xsd<span class="token comment" spellcheck="true">&lt;!--开启组件扫描     如果扫描多个包   1.多个包使用逗号隔开                    2.扫描上层目录 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注解里面的value属性值可以省略不写，默认值为类名称并且首字母小写</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//相当于&lt;bean id="userService" class=".."/> </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>include</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--"include"      use-default-filters="false" 表示现在不使用默认 filter，自己配置 filter      context:include-filter ，设置扫描哪些内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>                           <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><ul><li>exclude</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--"exclude"   下面配置扫描包所有内容     context:exclude-filter： 设置哪些内容不进行扫描 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.spring5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>                           <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><h4 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h4><ul><li>@Autowired : 根据属性类型进行自动装配<ul><li>把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</li><li>在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解 </li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>  <span class="token comment" spellcheck="true">//根据类型进行注入,要是有多个实现类对象，就没法用了，因为不知道该找哪个</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span></code></pre><ul><li>@Qualifier：根据名称进行注入</li></ul><p>​     这个@Qualifier 注解的使用，和上面@Autowired 一起使用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>  <span class="token comment" spellcheck="true">//根据类型进行注入,要是有多个实现类对象，就没法用了，因为不知道该找哪个</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userDaoImpl"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据名称进行注入</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span></code></pre><ul><li>@Resource：可以根据类型注入，可以根据名称注入 </li></ul><p>这个注解是  javax 包下的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>                       <span class="token comment" spellcheck="true">//根据类型进行注入 </span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userDaoImpl"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//根据名称进行注入 </span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span></code></pre><ul><li>@Value：注入普通类型属性</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><h4 id="全注解开发"><a href="#全注解开发" class="headerlink" title="全注解开发"></a>全注解开发</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//作为配置类，替代xml配置文件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.whw.spring5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   ApplicationContext context <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>   userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="2021/08/02/MyBatis%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/08/02/MyBatis%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="初识MyBatis"><a href="#初识MyBatis" class="headerlink" title="初识MyBatis"></a>初识MyBatis</h2><ul><li>先创建全局配置文件 mybatis-config.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;&amp;amp;serverTimezone<span class="token punctuation">=</span>GMT%2B8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>172161<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>老版本：直接根据名称空间+id定位要执行的sql映射</p><ul><li>根据xml配置文件(全局配置文件)创建一个SqlSessionFactory对象，有数据源等一些运行环境信息</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//1.根据全局配置文件得到SqlSessionFactory对象</span>   String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>   InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.获取sqlSession对象</span>   SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//3.sqlSession直接执行已经映射的sql语句</span>      <span class="token comment" spellcheck="true">//参数1：sql的唯一标识，用来告诉MyBatis执行哪个sql，一般写法是名称空间+id</span>      <span class="token comment" spellcheck="true">//参数2：执行sql要用的参数</span>      Employee employee <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>         <span class="token string">"com.whw.mybatis.EmployeeMapper.selectEmp"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.关闭sqlSession</span>      sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>编写sql映射文件：配置了每一个sql以及sql的封装规则等</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--       namespace:名称空间      id：唯一标识      resultType：返回值类型      #&amp;#123;id&amp;#125;：从传递过来的参数中取出id值      public Employee getEmpById(Integer id); --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,last_name lastName,email,gender from tbl_employee where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><ul><li>将sql映射文件注册在全局配置文件中</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>新版本：接口和映射文件动态绑定</p><ul><li><p>创建全局配置文件，上面有就不写了</p></li><li><p>创建 EmployeeMapper 接口</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>创建sql映射文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--       namespace:名称空间;指定为接口的全类名      id：唯一标识      resultType：返回值类型      #&amp;#123;id&amp;#125;：从传递过来的参数中取出id值      public Employee getEmpById(Integer id); --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,last_name lastName,email,gender from tbl_employee where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 1.接口式编程 *    原生：      Dao ==> DaoImpl *    MyBatis    Mapper接口类 ===> xxMapper.xml * * 2. SqlSession代表和数据库的一次会话，用完必须关闭 * 3. SqlSession和connection一样都是线程不安全的，每次使用都得获取新的对象 * 4. mapper接口没有实现类，但是将接口和xml进行绑定后mybatis会为这个接口生成一个代理对象。 *      EmployeeMapper empMapper = sqlSession.getMapper(EmployeeMapper.class) * * 5.两个重要的配置文件： *    mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等... 系统运行环境信息 *    sql映射文件：保存了每一个sql语句的映射信息，将sql抽取出来 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//1.根据全局配置文件得到SqlSessionFactory对象</span>   String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>   InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.获取sqlSession对象</span>   SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3.获取接口实现类的对象</span>      <span class="token comment" spellcheck="true">//会为接口自动创建一个代理对象，代理对象去执行增删改查方法</span>      EmployeeMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Employee empployee <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpById</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//class com.sun.proxy.$Proxy4</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.关闭sqlSession</span>      sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>将sql映射文件注册在全局配置文件中 </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h2 id="全局配置文件解析"><a href="#全局配置文件解析" class="headerlink" title="全局配置文件解析"></a>全局配置文件解析</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">MyBatis中文文档</a></p><ul><li>引入dtd约束，就在xml中就会有提示</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span></code></pre><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>引入外部配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    1.mybatis可以使用properties类引入外部properties配置文件内容；       resource:引入类路径下的资源,格式为  com/whw/...  注意是/ 不是.       url:引入网络路径或者磁盘路径下的资源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dbconfig.properties<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">172161</span></code></pre><h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a><strong>settings</strong></h3><p> 设置项，后续遇到其他的也会说明</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    2.settings包含很多重要的设置    setting:用来设置每一个设置项      name:  设置项名      value：设置项取值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--开启驼峰命名--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>起别名</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--  别名不区分大小写！！！        1>typeAliases:别名处理器，可以为我们的java类型其别名           typeAlias:指定要起别名的类型的全类名           alias:指定新的别名        2>package:为某个包下的所有类批量其别名           name:指定包名(为当前包及其下面所有后代的每一个类都起一个类名首字母小写的默认别名)              比如：Employee 类的别名为 employee        3>批量其别名的情况下，可以使用@Alias()注解为某个类型指定新的别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--批量起别名--></span>   <span class="token comment" spellcheck="true">&lt;!--&lt;package name="com.whw.mybatis.bean"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>常见的 Java 类型内建的类型别名，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th align="left">别名</th><th align="left">映射的类型</th><th>别名</th><th>映射类型</th></tr></thead><tbody><tr><td align="left">_byte</td><td align="left">byte</td><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td align="left">_long</td><td align="left">long</td><td>object</td><td>Object</td></tr><tr><td align="left">_short</td><td align="left">short</td><td>map</td><td>Map</td></tr><tr><td align="left">_int</td><td align="left">int</td><td>hashmap</td><td>HashMap</td></tr><tr><td align="left">_integer</td><td align="left">int</td><td>list</td><td>List</td></tr><tr><td align="left">_double</td><td align="left">double</td><td>arraylist</td><td>ArrayList</td></tr><tr><td align="left">_float</td><td align="left">float</td><td>collection</td><td>Collection</td></tr><tr><td align="left">_boolean</td><td align="left">boolean</td><td>iterator</td><td>Iterator</td></tr><tr><td align="left">string</td><td align="left">String</td><td>decimal</td><td>BigDecimal</td></tr><tr><td align="left">byte</td><td align="left">Byte</td><td>date</td><td>Date</td></tr><tr><td align="left">long</td><td align="left">Long</td><td>boolean</td><td>Boolean</td></tr><tr><td align="left">short</td><td align="left">Short</td><td>float</td><td>Float</td></tr><tr><td align="left">int</td><td align="left">Integer</td><td>double</td><td>Double</td></tr><tr><td align="left">integer</td><td align="left">Integer</td><td></td><td></td></tr></tbody></table><h3 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h3><p>类型处理器，后面说源码的时候会讲</p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>后面会有一章专门讲插件</p><h3 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--     environment:环境们，mybatis可以配置多种环境,default指定使用某种环境，可以达到快速切换环境。        environment：配置一个具体的环境信息,必须有两个标签：id代表当前环境的唯一标识           transactionManager:事务管理器                type:事务管理器的类型：                            JDBC(JdbcTransactionFactory)                            MANAGED(ManagedTransactionFactory)                     自定义事务管理器：实现TransactionFactory接口，type指定为全类名           dataSource：数据源；                type：数据源类型 UNPOOLED(UnpooledDataSourceFactory)                               POOLED(PooledDataSourceFactory)                               JNDI(JndiDataSourceFactory)                      自定义数据源,实现DataSourceFactory接口，type是全类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--修改default就可以改变环境--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--这个连接池是MyBatis自带的--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre><h3 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--     databaseIdProvider支持多数据库厂商         type = "DB_VENDOR";VendorDatabaseIdProvider           作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能跟据数据库厂商表示来执行不同的sql语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MySql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Oracle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SQL Server<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlserver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--在环境中添加oracle环境,并且切换为oracle--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev_oracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev_oracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;orcl.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;orcl.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;orcl.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;orcl.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev_mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre><p>在映射文件中就会执行   databaseId=”oracle  的 sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//com.whw.mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--&lt;mapper namespace="com.whw.mybatis.EmployeeMapper">--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--【注意】：如果没有databaseId="mysql也会被扫描，只不过会优先执行标有databaseId="mysql的sql语句--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from tbl_employee where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">databaseId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tbl_employee where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">databaseId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select EMPLOYEE_ID id ,LAST_NAME lastName,EMAIL email from employees where EMPLOYEE_ID = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --></span><span class="token comment" spellcheck="true">&lt;!--     6.mappers：将sql映射注册到全局配置中          mapper：注册一个sql映射            注册配置文件             resource：引用类路径下的sql映射文件             url：引用网络或磁盘路径下sql映射文件            注册接口               class:引用（注册）接口                  1.有sql映射文件，映射文件名必须和接口同名，并且与接口放在同一目录下                  2.没有sql映射文件，所有的sql都可以利用注解写在接口上                            @Select @Insert @Update @Delete                    推荐：比较重要的Dao接口写sql在映射文件里，不重要的就可以写在注解里 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--     &lt;mapper resource="EmployeeMapper.xml" />     &lt;mapper class="com.whw.mybatis.dao.EmplyoeeMapperAnnotion"/>   --></span>   <span class="token comment" spellcheck="true">&lt;!--批量注册：映射文件和接口放在同一目录下--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h2 id="sql映射文件解析"><a href="#sql映射文件解析" class="headerlink" title="sql映射文件解析"></a>sql映射文件解析</h2><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><p>EmployeeMapper接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">addEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>     Boolean <span class="token function">deleteEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>EmployeeMapper的映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//com.whw.mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 获取自增主键的值        mybatis支持获取自增主键，通过statement.getGenreatedKeys()           useGeneratedKeys="true":使用自增主键获取主键值策略        keyProperty:指定对应的主键属性，mybatis获取主键值后将这个值封装给JavaBean的这个属性     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addEmp<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert  into tbl_employee(last_name, email, gender)        values (#<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>gender<span class="token entity" title="&#125;">&amp;#125;</span>)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         update tbl_employee set last_name = #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span>, email = #<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>,         gender = #<span class="token entity" title="&#123;">&amp;#123;</span>gender<span class="token entity" title="&#125;">&amp;#125;</span> where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteEmpById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from tbl_employee where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">/**     * 测试增删改     * 1.mybatis允许增删改直接定义 Integer、Long、Boolean 三种返回值类型，在接口中定义方法的时候，直接标明它的返回值是什么，在用代理类调用的时候，就可以返回对应的数据类型，比如下面的删除方法     *       *     * 2.需要手动提交数据     *  SqlSession sqlSession = sqlSessionFactory.openSession() ==>手动提交     *  SqlSession sqlSession = sqlSessionFactory.openSession(true) ==>自动提交     * @throws IOException     */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取到的SqlSession不会自动提交数据</span>   SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      EmployeeMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//添加</span>      Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"jerry"</span><span class="token punctuation">,</span><span class="token string">"jerry@qq.com"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mapper<span class="token punctuation">.</span><span class="token function">addEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//由于开启了自增主键获取主键值策略</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//修改</span>      <span class="token comment" spellcheck="true">//Employee employee = new Employee(6,"marry","marry@qq.com","0");</span>      <span class="token comment" spellcheck="true">//mapper.updateEmp(employee);</span>      <span class="token comment" spellcheck="true">//删除</span>      <span class="token keyword">boolean</span> b <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteEmpById</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.手动提交数据,没有提交就操作不了</span>      sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="MyBatis的参数处理"><a href="#MyBatis的参数处理" class="headerlink" title="MyBatis的参数处理"></a>MyBatis的参数处理</h3><pre class=" language-tex"><code class="language-tex">单个参数：mybatis不会做特殊处理  #&#123;参数名&#125;：取出参数值。多个参数：mybatis会被做特殊处理       多个参数会被封装成一个map，          key：param1...paramN,或者参数的索引也可以          value：插入的参数值   操作：      方法：public Employee getEmpByIdAndLastName(Integer id, String lastName)      取值：#&#123;id&#125;, #&#123;lastName&#125;   异常：Cause: org.apache.ibatis.binding.BindingException:             Parameter 'id' not found.             Available parameters are [0, 1, param1, param2]用命名参数来解决以上问题命名参数：明确指定封装参数时map的key。@Param("id"),@Param("lastName")      多个参数会被封装成一个map，        key：使用@Param()注解指定的值        value:参数值      #&#123;指定的key&#125;取出对应的参数POJO：如果多个参数正好是业务逻辑的数据模型，可以直接传入pojo：  #&#123;属性名&#125;：取出传入的pojo的属性值Map:如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，可以直接传入map  #&#123;key&#125;,取出map中对应的值TO如果多个参数不是业务模型中的数据，但是经常要使用，推荐编写一个TO（Transfer Object）数据传输对象page&#123;   int index;   int size;&#125;===================思考=======================public Employee getEmp(@param("id")Integer id, String lastName);   取值：id===>#&#123;id/param1&#125;   lastName ===>#&#123;param2&#125;public Employee getEmp(Integer id, @Param("e")Employee employee);   取值：id===>#&#123;param1&#125;   lastName===>#&#123;param2.lastName&#125;                                   ===>#&#123;e.lastName&#125;特别注意：如果是Collection(List、Set)类型或者是数组，也会特殊处理，还是把传入的list或者数组封装在map中，               key:Collection key(collection),如果是List还是可以使用key(list)                   数组(array)  key(array)public Employee getEmpById(List<Integer> ids);   取值：取出第一个id的值，#&#123;list[0]&#125;</code></pre><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//getEmpByIdAndLastName(@Param("id")Integer id, @Param("lastName")String lastName);</span><span class="token comment" spellcheck="true">//底层是通过paramNameResolver来解析参数封装map的</span><span class="token keyword">public</span> Object <span class="token function">getNamedParams</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> paramCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//names是 &amp;#123;0=id, 1=lastaname&amp;#125;</span>   <span class="token comment" spellcheck="true">//参数为mull直接返回</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paramCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//只有一个参数而且没有param直注解 返回args[0]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasParamAnnotation <span class="token operator">&amp;&amp;</span> paramCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//多个参数或者标有param注解</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParamMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//遍历name集合 &amp;#123;0=id, 1=lastName&amp;#125;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Iterator i$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//names集合的value作为key;  names集合的key又作为取值的参考args[key]:</span>            param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//无论有没有标注注解，都额外的将每一个参数也保存到map中，使用新的key：param1...paramN</span>            <span class="token comment" spellcheck="true">//效果：有Param注解可以#&amp;#123;指定的key&amp;#125;，或者#&amp;#123;param1&amp;#125;</span>            <span class="token comment" spellcheck="true">//没有注解的就只有  #&amp;#123;paramn&amp;#125;  一种方式取值</span>            String genericParamName <span class="token operator">=</span> <span class="token string">"param"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>genericParamName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>genericParamName<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> param<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h4><pre class=" language-text"><code class="language-text">#&#123;&#125;:可以获取map的值或者pojo对象属性的值,只能取参数的值$&#123;&#125;:可以获取map的值或者pojo对象属性的值；select * from tbl_employee where id=$&#123;id&#125; and last_name=#&#123;lastName&#125;Preparing: select * from tbl_employee where id=2 and last_name=?    区别：       #&#123;&#125;：是以预编译的形式，将参数设置到sql语句中：PreparedStatement       $&#123;&#125;: 取出的值直接拼装在sql语句中，会有安全问题       大多情况下，取参数的值都应该用#&#123;&#125;；       原生jdbc不支持占位符的地方我们就可以使用$&#123;&#125;进行取值       比如分表、排序..... ：按照年份分表拆分           select * from $&#123;year&#125;_salary where xxx;           select * from tbl_employee order by $&#123;f_name&#125; $&#123;order&#125;      <select id="getEmpByMap" resultType="emp">              select * from $&#123;tableName&#125; where id = $&#123;id&#125; and last_name = #&#123;lastName&#125;      </select> #&#123;&#125;:更丰富的用法    规定参数的一些规则;    javaType、jdbcType、mode(存储过程)、numericScale    resultMap、typeHandler、jdbcTypeName、expression(未来准备支持的功能)     jdbcType通常需要在某种特定的条件下被设置：          在数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理，比如Oracle(报错)     JdbcType:无效的类型;  因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，Oracle不能正常处理;     由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法             1、#&#123;空字段,jdbcType=OTHER&#125;;             2、jdbcTypeForNull=NULL                 <setting name="jdbcTypeForNull" value="NULL"/></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询返回list集合</p><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmpByLastNameLike</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resultType：如果返回的是一个集合，要写集合中泛型的类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByLastNameLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee where last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>查询一条记录返回 Map 集合</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回一条记录的map； key就是列名，值就是对应的值</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getEmpByIdReturenMap</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByIdReturenMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee where id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>查询多条记录返回 Map 集合，并且指定key是哪个字段</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 多条记录封装一个map； Map&lt;Integer, Employee>:键是这条记录的主键，值是封装后的javaBean</span><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//告诉mybatis封装这个map的时候使用哪个属性作为map的key</span><span class="token comment" spellcheck="true">//map中key的类型要和@MapKey()中属性的类型对应</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Employee<span class="token operator">></span> <span class="token function">getEmpByLastNameLikeReturnMap</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注意返回值类型还是employee类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByLastNameLikeReturnMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee where last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--自定义某个javaBean的封装规则    type：自定义规则的java类型    id：唯一id方便引用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--指定主键的封装规则     id定义主键底层有优化     column：指定哪一列     property:指定对应的JavaBean属性   --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--定义普通列封装规则--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--其他不指定的列会自动封装，但是只要写resultMap最好把全部的映射规则都写上--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--resultMap:自定义结果集映射规则--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from  tbl_employee where id= #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    场景一：查询Employee的同时查询员工对应的部门 Employee===Department 一个员工有与之对应的部门信息； id last_name gender d_id did dept_name (private Department dept;) --></span><span class="token comment" spellcheck="true">&lt;!-- 方式一：联合查询，级联属性封装结果集 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--需要Employee类的dept属性的get方法--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.departmentName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--方式二：使用association定义关联的单个对象的封装规则：--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--     association可以指定联合的javaBean对象     property="dept";指定哪个属性是联合的对象     javaType:指定这个属性对象的类型[不能省略]    --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id, d.id did,d.dept_name dept_name   FROM tbl_employee e, tbl_dept d   WHERE e.d_id = d.id AND e.id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用association进行分步查询：     1、先按照员工id查询员工信息     2、根据查询员工信息中的d_id值去部门表查出部门信息     3、部门设置到员工中； --></span><span class="token comment" spellcheck="true">&lt;!--  id  last_name  email   gender    d_id   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmpByStep<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- association定义关联对象的封装规则            select:表明当前属性是调用select指定的方法查出的结果            column:指定将哪一列的值传给这个方法            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性         --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>                <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.DepartmentMapper.getDeptById<span class="token punctuation">"</span></span>                <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  public Employee getEmpByIdStep(Integer id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByIdStep<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmpByStep<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--可以使用延迟查询(按需加载|懒加载)    Employee ==> Dept       每次查询Employee对象的是时候，都得一起查询出来       部门信息在使用的时候再去查询       分段查询的基础上加两个配置    全局配置    懒加载必须搭配aggressiveLazyLoading使用，光开启懒加载没用    &lt;setting name="lazyLoadingEnabled" value="true"/>    &lt;setting name="aggressiveLazyLoading" value="false"/>--></span><span class="token comment" spellcheck="true">&lt;!--场景二：   查询部门的时候将部门对应的所有员工信息也查询出来  嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则--></span><span class="token comment" spellcheck="true">&lt;!--   private Integer id;   private String departmentName;   private List&lt;Employee> emps;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDept<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--            collection定义关联集合类型的属性的封装规则            ofType:指定集合里面元素的类型        --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--定义这个集合元素的封装规则--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptByIdPlus<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   SELECT d.id did, d.dept_name dept_name ,   e.id eid, e.last_name last_name, e.email email, e.gender gender   FROM tbl_dept d   LEFT JOIN tbl_employee e   ON d.id = e.d_id   WHERE d.id  = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 分步查询 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDeptStep<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span>               <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId<span class="token punctuation">"</span></span>               <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--或者 column="&amp;#123;deptId = id&amp;#125;"--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptByIdStep<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDeptStep<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>   select id, dept_name departmentName  from tbl_dept where d_id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- =======================鉴别器============================ --></span><span class="token comment" spellcheck="true">&lt;!--     &lt;discriminator javaType="">&lt;/discriminator>        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为        封装Employee：            如果查出的是女生：就把部门信息查询出来，否则不查询；            如果是男生，把last_name这一列的值赋值给email;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmpDis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--            column：指定判定的列名            javaType：列值对应的java类型  --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>                      <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.DepartmentMapper.getDeptById<span class="token punctuation">"</span></span>                      <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>​     &lt;if test=””&gt; ： 判断 如果test内的条件成立则进入<br>​      choose （when,otherwise）：分值选择，相当于带了break的switch - case<br>​                    如果带了id就用id查，如果带了lastName就用lastName查；只会进入一个<br>​      trim： 字符串截取（where(封装查询条件),set(封装修改)）<br>​      foreach 遍历</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--查询员工，要求：携带了哪个字段查询条件就带上这个字段的值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByConditionIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--    test：判断表达式（OGNL）                c:if  test         从参数中取值进行判断         遇见特殊符号应该去写转义字符：      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null &amp;amp;&amp;amp; lastName!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         and last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- trim():删除头尾空白符的字符串--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span>null and email.trim()!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         and email=#<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0 or gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         and gender=#<span class="token entity" title="&#123;">&amp;#123;</span>gender<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--查询的时候如果某些条件没带，可能sql拼装会有问题    解决：        1.给where后面加上 1 = 1， 以后的条件都写成 and xxx        2.mybatis使用&lt;where>标签来将所有的查询条件包括在内              where只会去掉第一个多出来的and或者or。--></span></code></pre><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByConditionTrim<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee   <span class="token comment" spellcheck="true">&lt;!--       用trim：trim标签体中是整个字符串拼串后的结果          prefix:前缀：prefix给拼串后的整个字符加一个前缀          prefixOverrides:前缀覆盖：去掉整个字符串前面多余的字符          suffix：给拼串后的整个字符加一个后缀          suffixOverrides:后缀覆盖：去掉整个字符串后面多余的字符   --></span>   <span class="token comment" spellcheck="true">&lt;!--自定义字符串的截取规则--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span> and      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null and lastName!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span> and      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span>null and email.trim()!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         email=#<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span> and      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0 or gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         gender=#<span class="token entity" title="&#123;">&amp;#123;</span>gender<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose ,when,otherwise"></a>choose ,when,otherwise</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByConditionChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 如果带了id就用id查，如果带了lastName就用lastName查；只会进入一个--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            email=#<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            gender = 0         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>去除最后一个多余的符号</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>   update  tbl_employee   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         last_name = #<span class="token entity" title="&#123;">&amp;#123;</span>lastName<span class="token entity" title="&#125;">&amp;#125;</span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         email = #<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>,      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         gender = #<span class="token entity" title="&#123;">&amp;#123;</span>gender<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--   或者          &lt;trim prefix="set" suffixOverrides=",">            &lt;if test="lastName != null">                last_name = #&amp;#123;lastName&amp;#125;,            &lt;/if>            &lt;if test="email != null">                email = #&amp;#123;email&amp;#125;,            &lt;/if>            &lt;if test="gender != null">                gender = #&amp;#123;gender&amp;#125;            &lt;/if>        &lt;/trim>--></span>   where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><pre class=" language-xml"><code class="language-xml">List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Employee</span><span class="token punctuation">></span></span> getEmpsByConditionForeach(@Param("ids") List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Integer</span><span class="token punctuation">></span></span> ids);   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionForeach<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from tbl_employee   <span class="token comment" spellcheck="true">&lt;!--      collection：指定要遍历的集合：          list类型的参数会特殊处理封装在map中，map的key就叫list      item：将当前遍历出的元素赋值给指定的变量      separator:每个元素之间的分隔符      open：遍历出所有结果拼接一个开始的字符      close:遍历出所有结果拼接一个结束的字符      index:索引。遍历list的时候是index就是索引，item就是当前值                    遍历map的时候index表示的就是map的key，item就是map的值      #&amp;#123;变量名&amp;#125;就能取出变量的值也就是当前遍历出的元素    --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span>            <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where id in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      #<span class="token entity" title="&#123;">&amp;#123;</span>item_id<span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>             void addEmps(@Param("emps") List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Employee</span><span class="token punctuation">></span></span> emps);      <span class="token comment" spellcheck="true">&lt;!--批量保存--></span>   <span class="token comment" spellcheck="true">&lt;!--void addEmps(@Param("emps") List&lt;Employee> emps);--></span>   <span class="token comment" spellcheck="true">&lt;!--MySQL下批量保存，可以foreach循环，支出value(),(),()--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addEmps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into tbl_employee(last_name, email, gender,d_id)      values      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         (#<span class="token entity" title="&#123;">&amp;#123;</span>emp.lastName<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>emp.email<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>emp.gender<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>emp.dept.id<span class="token entity" title="&#125;">&amp;#125;</span>)      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--这种方式需要数据库连接属性allowMultiQueries=true            这种分号分隔多个sql可以用于删除、修改等的批量操作          --></span>      <span class="token comment" spellcheck="true">&lt;!-- &lt;foreach collection="emps" item="emp">            insert into tbl_employee(last_name, email, gender,d_id)            values (#&amp;#123;emp.lastName&amp;#125;,#&amp;#123;emp.email&amp;#125;,#&amp;#123;emp.gender&amp;#125;,#&amp;#123;emp.dept.id&amp;#125;);        &lt;/foreach>--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><h3 id="两个内置参数"><a href="#两个内置参数" class="headerlink" title="两个内置参数"></a>两个内置参数</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--两个内置参数：      不只是方法传递过来参数可以被用来判断，取值      mybatis默认还有两个内置参数      _parameter:代表整个参数           单个参数：_parameter就是这个参数           多个参数：参数会被封装为一个map：_parameter就是代表这个map      _databaseId:如果配置了DatabaseIdProvider标签          _databaseId就是代表当前数据库的别名     --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpTestInnerParameter<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> from tbl_employee      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_parameter!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         where last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>_parameter.lastName<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>oracle<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from employees      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_parameter!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         where last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>_parameter.lastName<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="bind标签"><a href="#bind标签" class="headerlink" title="bind标签"></a>bind标签</h3><p>适用于一些拼串场景</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpTestInnerParameter<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_lastName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span>+lastName+<span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> from tbl_employee      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_parameter!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         where last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>_parameter.lastName<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>oracle<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from employees      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_parameter!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         where last_name like #<span class="token entity" title="&#123;">&amp;#123;</span>_parameter.lastName<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--     抽取可重用的sql片段。方便后面引用     1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用     2、用include来引用已经抽取的sql：     3、include还可以自定义一些property，sql标签内部就能使用自定义的属性             include-property：取值的正确方式$&amp;#123;prop&amp;#125;, #&amp;#123;不能使用这种方式&amp;#125; --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   id, last_name,email,gender,d_id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>使用includ标签来引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p>使用的是PerpetualCache（永久缓存）类，存储原理就是==<strong>map集合</strong>==</p><h3 id="一级缓存（本地缓存）"><a href="#一级缓存（本地缓存）" class="headerlink" title="一级缓存（本地缓存）"></a>一级缓存（本地缓存）</h3><ul><li>qlSession级别的缓存，<strong>一级缓存是一直开启的</strong>，查出的数据都会放在map中<ul><li>​       与数据库同一次会话期间查询到的数据会放在本地缓存中，以后如果需要获取获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li><li>一级缓存失效的情况 (没有使用到当前一级缓存的情况下，就还需要在向数据库发出查询)<ul><li>sqlSession不相同</li><li>sqlSession相同，查询条件不同</li><li>SQLSession相同，两次查询之间执行了增删改(这次增删改可能对当前数据有影响)</li><li>SQLSession相同，手动清除了一级缓存（缓存清空）   <strong>sqlSession1.clearCache();</strong></li></ul></li></ul></li></ul><p>​      </p><h3 id="二级缓存（全局缓存）"><a href="#二级缓存（全局缓存）" class="headerlink" title="二级缓存（全局缓存）"></a>二级缓存（全局缓存）</h3><ul><li><p>基于namespace级别的缓存；一个namespace对应一个二级缓存</p></li><li><p>工作机制：</p><ul><li>一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>查出的数据会默认放在一级缓存中</li><li>如果关闭会话，一级缓存的数据会被保存到二级缓存中。新的会话查询信息，就可以参照二级缓存中的数据</li><li>如果会话没关闭，其他会话查询相同数据时还是会再次发sql语句</li><li>同一个会话查出的不同namespace中的数据会放在自己对应的二级缓存中</li></ul></li><li><p>使用</p><ul><li><p>在全局配置文件中 开启二级缓存配置：&lt;setting name=”cacheEnabled” value=”true”/&gt;</p></li><li><p>mapper.xml中配置使用二级缓存：</p><ul><li><p>&lt;cache&gt;&lt;/cache&gt;</p></li><li><pre><code>cache的一些属性介绍：   eviction:缓存的回收策略：      • LRU – 最近最少使用的：移除最长时间不被使用的对象。      • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。      • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。      • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。      • 默认的是 LRU。   flushInterval：缓存刷新间隔      缓存多长时间清空一次，默认不清空，设置一个毫秒值   readOnly:是否只读：      true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。            mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快      false：非只读：mybatis觉得获取的数据可能会被修改。            mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢   size：缓存存放多少元素；   type=&quot;&quot;：指定自定义缓存的全类名；实现Cache接口即可；</code></pre></li></ul></li><li><p><strong>POJO需要实现序列化接口</strong></p><ul><li>序列化：把一个Java对象写入到硬盘或者传输到网路上面的其它计算机，需要把相应的对象写成转换成字节流。</li></ul></li></ul></li></ul><h3 id="和缓存有关的设置-属性"><a href="#和缓存有关的设置-属性" class="headerlink" title="和缓存有关的设置/属性"></a>和缓存有关的设置/属性</h3><ul><li><p>全局配置文件中的 &lt;setting&gt; 标签 中cacheEnabled属性，为true一级、二级都可用；为false二级关闭，一级一直可用</p></li><li><p>每个select标签都有useCache=”true”的属性：一级、二级都可用</p><pre><code>   false：一级缓存依然使用，二级缓存不使用</code></pre></li><li><p>每个增删改标签的：flushCache=”true”属性：增删改执行完成后就会清除缓存（一级二级都会清除）</p></li></ul><p>​        每个查询标签也有：flushCache=”false”属性</p><ul><li>sqlSession.clearCache();只是清除当前session的一级缓存；</li><li>&lt;setting&gt;标签中有localCacheScope本地缓存作用域：<pre><code>SESSION ；当前会话的所有数据保存在会话缓存中；                                                  STATEMENT：可以禁用一级缓存；</code></pre></li></ul><p><img src="QQ%E6%88%AA%E5%9B%BE20210729104529.png"></p><h3 id="第三方缓存"><a href="#第三方缓存" class="headerlink" title="第三方缓存"></a>第三方缓存</h3><p>导入第三方缓存包  ehcache-core-2.6.8.jar<br>导入与第三方缓存整合的适配包,官方有： mybatis-ehcache-1.0.3.jar</p><p>编写eache.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 磁盘保存路径 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>F:\44\ehcache<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>   <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>   <span class="token attr-name">maxElementsOnDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000000<span class="token punctuation">"</span></span>   <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>   <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>    <span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>   <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultCache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 属性说明：diskStore：指定数据在磁盘中的存储位置。defaultCache：当借助CacheManager.add("demoCache")创建Cache时，EhCache便会采用&lt;defalutCache/>指定的的管理策略以下属性是必须的：maxElementsInMemory - 在内存中缓存的element的最大数目 maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上以下属性是可选的：timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出） --></span></code></pre><p>在sql映射文件中加上：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>如果其他的映射文件也要缓存，可以直接</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引用缓存：namespace：指定和哪个名称空间下的缓存一样--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache-ref</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="整合Spring"><a href="#整合Spring" class="headerlink" title="整合Spring"></a>整合Spring</h2><ul><li>web.xml中配置，让Spring和SpringMVC跟随web一起启动</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Spring配置： needed for ContextLoaderListener --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Bootstraps the root web application context before servlet initialization --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- SpringMVC配置 --></span><span class="token comment" spellcheck="true">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Map all requests to the DispatcherServlet for handling --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><ul><li>在WEB-INF下创建 springmvC的配置文件  spring-servlet.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--SpringMVC只是控制网站跳转逻辑  --></span>   <span class="token comment" spellcheck="true">&lt;!-- 只扫描控制器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li>src下创建Spring配置文件   applicationContext.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mybatis-spring</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://mybatis.org/schema/mybatis-spring<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Spring希望管理所有的业务逻辑组件，等。。。 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>                              <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 引入数据库的配置文件 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:dbconfig.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- Spring用来控制业务逻辑。数据源、事务控制、aop --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- spring事务管理 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 开启基于注解的事务 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--    整合mybatis        目的：1、spring管理所有组件。mapper的实现类。                service调用Dao时，使用@Autowired既可以自动注入mapper；            2、spring用来管理事务，spring声明式事务    --></span>   <span class="token comment" spellcheck="true">&lt;!--创建出SqlSessionFactory对象  --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- configLocation指定全局配置文件的位置 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--mapperLocations: 指定mapper文件的位置--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/whw/mybatis/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--配置一个批量执行的sqlSession--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>executorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BATCH<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--          扫描所有的mapper接口的实现，让这些mapper能够自动注入；        base-package：指定mapper接口的包名     --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mybatis-spring:</span>scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="MBG逆向工程"><a href="#MBG逆向工程" class="headerlink" title="MBG逆向工程"></a>MBG逆向工程</h2><p>导入  mybatis-generator-core-1.3.2.jar  </p><p>配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         targetRuntime="MyBatis3Simple":生成简单版的CRUD        MyBatis3:豪华版     --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- jdbcConnection：指定如何连接到目标数据库 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span>        <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;serverTimezone<span class="token punctuation">=</span>GMT%2B8&amp;amp;allowMultiQueries<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>172161<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- javaModelGenerator：指定javaBean的生成策略     targetPackage="test.model"：目标包名    targetProject="\MBGTestProject\src"：目标工程    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.bean<span class="token punctuation">"</span></span>            <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- sqlMapGenerator：sql映射生成策略：XML文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao<span class="token punctuation">"</span></span>        <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- javaClientGenerator:指定mapper接口所在的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whw.mybatis.dao<span class="token punctuation">"</span></span>        <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定要逆向分析哪些表：根据表要创建javaBean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbl_dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbl_employee<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><p>生成方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        File configFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"mbg.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurationParser cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        Configuration config <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultShellCallback callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyBatisGenerator myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>                callback<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="底层原理-（不是很懂，得再看）"><a href="#底层原理-（不是很懂，得再看）" class="headerlink" title="底层原理  （不是很懂，得再看）"></a>底层原理  （不是很懂，得再看）</h2><p><img src="image-20210729141426006.png"></p><h3 id="获取sqlSessionFactory对象"><a href="#获取sqlSessionFactory对象" class="headerlink" title="获取sqlSessionFactory对象"></a>获取sqlSessionFactory对象</h3><ul><li>创建SqlSessionFactoryBuilder 对象</li><li>调用build方法，用new XMLConfigBuilder   创建 Xpath 解析器parser 用来解析全局配置文件</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> SqlSessionFactory <span class="token function">build</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">,</span> String environment<span class="token punctuation">,</span> Properties properties<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   SqlSessionFactory var5<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      XMLConfigBuilder parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>      var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var14<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error building SqlSession."</span><span class="token punctuation">,</span> var14<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var13<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20210729142610.png"></p><ul><li>获取根节点后调用以下方法，挨个解析每一个个标签的子标签</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>XNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Properties settings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">settingsAsPropertiess</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> var3<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre><code>  this.settingsElement(settings);  内部还是挨个判断 setting 标签的属性的取值，最后把详细信息**保存到 configuration对象中**</code></pre><p>​        this.mapperElement(root.evalNode(“mappers”));  解析 &lt;mappers&gt;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mapperElement</span><span class="token punctuation">(</span>XNode parent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Iterator i$ <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            XNode child <span class="token operator">=</span> <span class="token punctuation">(</span>XNode<span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String resource<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               resource <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               resource <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               String url <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               String mapperClass <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               XMLMapperBuilder mapperParser<span class="token punctuation">;</span>               InputStream inputStream<span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                  inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                  mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                  inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getUrlAsStream</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                  mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null <span class="token operator">||</span> url <span class="token operator">!=</span> null <span class="token operator">||</span> mapperClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"A mapper element may only specify a url, resource or class, but not more than one."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> mapperInterface <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li><p>解析sql映射文件  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configurationElement</span><span class="token punctuation">(</span>XNode context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      String namespace <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>namespace<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>builderAssistant<span class="token punctuation">.</span><span class="token function">setCurrentNamespace</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cacheRefElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache-ref"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cacheElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parameterMapElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/parameterMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resultMapElements</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/resultMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sqlElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/sql"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"select|insert|update|delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Mapper's namespace cannot be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing Mapper XML. Cause: "</span> <span class="token operator">+</span> var3<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><p>​        this.buildStatementFromContext(context.evalNodes(“select|insert|update|delete”));  解析增删改查</p><p>parseStatementNode方法把  增删改查 标签的所有属性都拿到，调用 addMappedStatement 方法 将其封装成一个</p><p>MappedStatement  ， 一个 MappedStatement  就代表一个 增删改查的详细信息，又添加  configuration对象中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String databaseId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"databaseId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">databaseIdMatchesCurrent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> databaseId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requiredDatabaseId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Integer fetchSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">"fetchSize"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Integer timeout <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String parameterMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"parameterMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String parameterType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"parameterType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterTypeClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>      String resultMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String resultType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String lang <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"lang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LanguageDriver langDriver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLanguageDriver</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resultTypeClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>resultType<span class="token punctuation">)</span><span class="token punctuation">;</span>      String resultSetType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultSetType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      StatementType statementType <span class="token operator">=</span> StatementType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"statementType"</span><span class="token punctuation">,</span> StatementType<span class="token punctuation">.</span>PREPARED<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ResultSetType resultSetTypeEnum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveResultSetType</span><span class="token punctuation">(</span>resultSetType<span class="token punctuation">)</span><span class="token punctuation">;</span>      String nodeName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SqlCommandType sqlCommandType <span class="token operator">=</span> SqlCommandType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isSelect <span class="token operator">=</span> sqlCommandType <span class="token operator">==</span> SqlCommandType<span class="token punctuation">.</span>SELECT<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> flushCache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"flushCache"</span><span class="token punctuation">,</span> <span class="token operator">!</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> useCache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"useCache"</span><span class="token punctuation">,</span> isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> resultOrdered <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"resultOrdered"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XMLIncludeTransformer includeParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLIncludeTransformer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>builderAssistant<span class="token punctuation">)</span><span class="token punctuation">;</span>      includeParser<span class="token punctuation">.</span><span class="token function">applyIncludes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processSelectKeyNodes</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">,</span> langDriver<span class="token punctuation">)</span><span class="token punctuation">;</span>      SqlSource sqlSource <span class="token operator">=</span> langDriver<span class="token punctuation">.</span><span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      String resultSets <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultSets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String keyProperty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"keyProperty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String keyColumn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"keyColumn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String keyStatementId <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token string">"!selectKey"</span><span class="token punctuation">;</span>      keyStatementId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>builderAssistant<span class="token punctuation">.</span><span class="token function">applyCurrentNamespace</span><span class="token punctuation">(</span>keyStatementId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Object keyGenerator<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">hasKeyGenerator</span><span class="token punctuation">(</span>keyStatementId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         keyGenerator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span>keyStatementId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         keyGenerator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"useGeneratedKeys"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">isUseGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> SqlCommandType<span class="token punctuation">.</span>INSERT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sqlCommandType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Jdbc3KeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NoKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>builderAssistant<span class="token punctuation">.</span><span class="token function">addMappedStatement</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> sqlSource<span class="token punctuation">,</span> statementType<span class="token punctuation">,</span> sqlCommandType<span class="token punctuation">,</span> fetchSize<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> parameterMap<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultTypeClass<span class="token punctuation">,</span> resultSetTypeEnum<span class="token punctuation">,</span> flushCache<span class="token punctuation">,</span> useCache<span class="token punctuation">,</span> resultOrdered<span class="token punctuation">,</span> <span class="token punctuation">(</span>KeyGenerator<span class="token punctuation">)</span>keyGenerator<span class="token punctuation">,</span> keyProperty<span class="token punctuation">,</span> keyColumn<span class="token punctuation">,</span> databaseId<span class="token punctuation">,</span> langDriver<span class="token punctuation">,</span> resultSets<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> MappedStatement <span class="token function">addMappedStatement</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> SqlSource sqlSource<span class="token punctuation">,</span> StatementType statementType<span class="token punctuation">,</span> SqlCommandType sqlCommandType<span class="token punctuation">,</span> Integer fetchSize<span class="token punctuation">,</span> Integer timeout<span class="token punctuation">,</span> String parameterMap<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterType<span class="token punctuation">,</span> String resultMap<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resultType<span class="token punctuation">,</span> ResultSetType resultSetType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flushCache<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useCache<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resultOrdered<span class="token punctuation">,</span> KeyGenerator keyGenerator<span class="token punctuation">,</span> String keyProperty<span class="token punctuation">,</span> String keyColumn<span class="token punctuation">,</span> String databaseId<span class="token punctuation">,</span> LanguageDriver lang<span class="token punctuation">,</span> String resultSets<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unresolvedCacheRef<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncompleteElementException</span><span class="token punctuation">(</span><span class="token string">"Cache-ref not yet resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyCurrentNamespace</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isSelect <span class="token operator">=</span> sqlCommandType <span class="token operator">==</span> SqlCommandType<span class="token punctuation">.</span>SELECT<span class="token punctuation">;</span>      org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>MappedStatement<span class="token punctuation">.</span>Builder statementBuilder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>MappedStatement<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> id<span class="token punctuation">,</span> sqlSource<span class="token punctuation">,</span> sqlCommandType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchSize</span><span class="token punctuation">(</span>fetchSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">statementType</span><span class="token punctuation">(</span>statementType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyGenerator</span><span class="token punctuation">(</span>keyGenerator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyProperty</span><span class="token punctuation">(</span>keyProperty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyColumn</span><span class="token punctuation">(</span>keyColumn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">databaseId</span><span class="token punctuation">(</span>databaseId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lang</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resultOrdered</span><span class="token punctuation">(</span>resultOrdered<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resultSets</span><span class="token punctuation">(</span>resultSets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resultMaps</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStatementResultMaps</span><span class="token punctuation">(</span>resultMap<span class="token punctuation">,</span> resultType<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resultSetType</span><span class="token punctuation">(</span>resultSetType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOrDefault</span><span class="token punctuation">(</span>flushCache<span class="token punctuation">,</span> <span class="token operator">!</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useCache</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOrDefault</span><span class="token punctuation">(</span>useCache<span class="token punctuation">,</span> isSelect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentCache<span class="token punctuation">)</span><span class="token punctuation">;</span>      ParameterMap statementParameterMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStatementParameterMap</span><span class="token punctuation">(</span>parameterMap<span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>statementParameterMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         statementBuilder<span class="token punctuation">.</span><span class="token function">parameterMap</span><span class="token punctuation">(</span>statementParameterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      MappedStatement statement <span class="token operator">=</span> statementBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">addMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> statement<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20210729151017.png"></p><p>==<strong>最后所有的配置信息都封装到了  configuration  对象中</strong>==</p><p>这里只截取了一部分</p><p><img src="QQ%E6%88%AA%E5%9B%BE20210729151826.png"></p><p>最后返回了包含  所有信息的  DefaultSqlSessionFactory对象。</p><pre><code>public SqlSessionFactory build(Configuration config) &#123;    return new DefaultSqlSessionFactory(config);&#125;</code></pre><h3 id="获取sqlSession对象"><a href="#获取sqlSession对象" class="headerlink" title="获取sqlSession对象"></a>获取sqlSession对象</h3><p>sqlSessionFactory 调用 openSession();   实际上是 openSessionFromDataSource（）  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> SqlSession <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getDefaultExecutorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>TransactionIsolationLevel<span class="token punctuation">)</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> SqlSession <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span>ExecutorType execType<span class="token punctuation">,</span> TransactionIsolationLevel level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Transaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>   DefaultSqlSession var8<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Environment environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TransactionFactory transactionFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建 一个executor ,</span>      Executor executor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最后返回一个DefaultSqlSession，包含 configuration，executor</span>      var8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var12<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> var12<span class="token punctuation">,</span> var12<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> var8<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p> Executor executor = this.configuration.newExecutor(tx, execType); </p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Executor <span class="token function">newExecutor</span><span class="token punctuation">(</span>Transaction transaction<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>        executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> ExecutorType<span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>        Object executor<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果有二级缓存，创建 CachingExecutor </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheEnabled<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Executor<span class="token punctuation">)</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Executor executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>每一个executor 都被一个拦截器重新包装并返回</p><p>  Executor executor = (Executor)this.interceptorChain.pluginAll(executor);</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">pluginAll</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Interceptor interceptor<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>Iterator i$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> target <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      interceptor <span class="token operator">=</span> <span class="token punctuation">(</span>Interceptor<span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="获取接口的代理对象"><a href="#获取接口的代理对象" class="headerlink" title="获取接口的代理对象"></a>获取接口的代理对象</h3><p>EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//又调用：</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapperRegistry<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//又调用：</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   MapperProxyFactory<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span>MapperProxyFactory<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>knownMappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperProxyFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is not known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> mapperProxyFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var5<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Error getting mapper instance. Cause: "</span> <span class="token operator">+</span> var5<span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// mapperProxyFactory.newInstance(sqlSession);创建MapperProxy</span><span class="token keyword">public</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>代理对象中又包含了  DefaultSqlSeession</p><p><img src="QQ%E6%88%AA%E5%9B%BE20210729161338.png"></p><h3 id="执行增删改查方法"><a href="#执行增删改查方法" class="headerlink" title="执行增删改查方法"></a>执行增删改查方法</h3><p>Employee employee = mapper.getEmpById(1);</p><ul><li>先调用 invoke 获取当前方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var5<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>var5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//包装成mybatis可以识别的method</span>      MapperMethod mapperMethod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断是增删改查的哪一个方法</span>      <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Object param<span class="token punctuation">;</span>   Object result<span class="token punctuation">;</span>   <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> INSERT<span class="token operator">:</span>         param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>         result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> UPDATE<span class="token operator">:</span>         param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>         result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> DELETE<span class="token operator">:</span>         param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>         result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> SELECT<span class="token operator">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//包装参数</span>            param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//调用sqlSession的方法查询</span>            result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> FLUSH<span class="token operator">:</span>         result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">selectOne</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TooManyResultsException</span><span class="token punctuation">(</span><span class="token string">"Expected one result (or null) to be returned by selectOne(), but found: "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List var5<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            MappedStatement ms <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>            var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> Executor<span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var9<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> var9<span class="token punctuation">,</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> var5<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取sql语句的详细信息</span>   BoundSql boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>   CacheKey key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> CacheKey key<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Cache cache <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flushCacheIfRequired</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">isUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureNoOutParams</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>         List<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>tcm<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tcm<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> list<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//SimpleExecutor调用 query方法</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>   List var9<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      stmt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      var9 <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> var9<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>1、获取sqlSessionFactory对象:      解析文件的每一个信息保存在Configuration中，返回包含Configuration的DefaultSqlSession；      注意：【MappedStatement】：代表一个增删改查的详细信息2、获取sqlSession对象      返回一个DefaultSQlSession对象，包含Executor和Configuration;      这一步会创建Executor对象；3、获取接口的代理对象（MapperProxy）      getMapper，使用MapperProxyFactory创建一个MapperProxy的代理对象      代理对象里面包含了，DefaultSqlSession（Executor）4、执行增删改查方法总结：   1、根据配置文件（全局，sql映射）初始化出Configuration对象   2、创建一个DefaultSqlSession对象，      他里面包含Configuration以及      Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor） 3、DefaultSqlSession.getMapper（）：拿到Mapper接口对应的MapperProxy； 4、MapperProxy里面有（DefaultSqlSession）； 5、执行增删改查方法：      1）调用DefaultSqlSession的增删改查（Executor）；      2）会创建一个StatementHandler对象。         （同时也会创建出ParameterHandler和ResultSetHandler）      3）调用StatementHandler预编译参数以及设置参数值;         使用ParameterHandler来给sql设置参数      4）调用StatementHandler的增删改查方法；      5）ResultSetHandler封装结果 注意：   四大对象每个创建的时候都有一个interceptorChain.pluginAll(parameterHandler);</code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>插件原理  在四大对象创建的时候  1、每个创建出来的对象不是直接返回的，而是      interceptorChain.pluginAll(parameterHandler);  2、获取到所有的Interceptor（拦截器）（插件需要实现的接口）；      调用interceptor.plugin(target);返回target包装后的对象  3、插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）      我们的插件可以为四大对象创建出代理对象；          代理对象就可以拦截到四大对象的每一个执行；   public Object pluginAll(Object target) &#123;       for (Interceptor interceptor : interceptors) &#123;         target = interceptor.plugin(target);       &#125;       return target;   &#125;</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 完成插件签名： *        告诉MyBatis当前插件用来拦截哪个对象的哪个方法 */</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type<span class="token operator">=</span>StatementHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"parameterize"</span><span class="token punctuation">,</span>args<span class="token operator">=</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * intercept：拦截：     *         拦截目标对象的目标方法的执行；     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFirstPlugin...intercept:"</span><span class="token operator">+</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态的改变一下sql运行的参数：以前1号员工，实际从数据库查询3号员工</span>        Object target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前拦截到的对象："</span><span class="token operator">+</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿到：StatementHandler==>ParameterHandler===>parameterObject</span>        <span class="token comment" spellcheck="true">//拿到target的元数据</span>        MetaObject metaObject <span class="token operator">=</span> SystemMetaObject<span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object value <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"parameterHandler.parameterObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql语句用的参数是："</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改完sql语句要用的参数</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"parameterHandler.parameterObject"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行目标方法</span>        Object proceed <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回执行后的返回值</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * plugin：     *         包装目标对象的：包装：为目标对象创建一个代理对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//我们可以借助Plugin的wrap方法来使用当前Interceptor包装我们目标对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFirstPlugin...plugin:mybatis将要包装的对象"</span><span class="token operator">+</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object wrap <span class="token operator">=</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回为当前target创建的动态代理</span>        <span class="token keyword">return</span> wrap<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * setProperties：     *         将插件注册时的property属性设置进来     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插件配置的信息："</span><span class="token operator">+</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当有多个插件时，是按照插件配置的顺序一层一层的代理代理对象，执行目标的方法之后，按照逆向顺序执行</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="2021/07/31/Redis/"/>
      <url>2021/07/31/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="NoSQL数据库简介"><a href="#NoSQL数据库简介" class="headerlink" title="NoSQL数据库简介"></a>NoSQL数据库简介</h2><h3 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h3><ul><li>解决功能性问题：java，jsp，tomcat，html，Linux</li><li>解决扩展性的问题：Spring、SpringMVC、MyBatis</li><li>解决性能问题：NoSQL，java线程，Nginx</li></ul><h3 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h3><p>NoSQL（==Not Only SQL==），意为“不仅仅是SQL”，泛指<strong>非关系型数据库</strong>。</p><p>NoSQL不依赖业务逻辑方式存储，而以简单的key–value模式存储，因此大大的增加了数据库的扩展能力。</p><p><strong>其打破了传统的关系型数据库以业务逻辑为依据进行的存储方式，而是针对不同数据结构类型，改变以性能为优先的存储方式</strong></p><p>特点：</p><ul><li>不遵循SQL标准</li><li>不支持ACID，注意不是不支持事务</li><li>远超于SQL性能，因为不依赖业务逻辑，只是单纯的key–value</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>对数据高并发的读写，比如秒杀</li><li>海量数据的读写</li><li>对数据的高可扩展性 </li></ul><h3 id="不适用场景"><a href="#不适用场景" class="headerlink" title="不适用场景"></a>不适用场景</h3><ul><li>需要事务支持</li><li>基于sql的结构化查询存储，处理复杂的关系</li></ul><p>简言之一句话：==<strong>用不着sql的和用了sql也不行的情况，请考虑用NoSQL</strong>==</p><p>行式存储数据库：每一行都当做一块来存储，优势：查询数据很快等</p><p>列式存储数据库：每一列都当做一块来存储，优势：求平均值很快等</p><p>【补充：】</p><p>1TB (Trillionbyte 万亿字节 太字节)=1024GB</p><p>1PB（Petabyte 千万亿字节 拍字节）=1024TB，</p><p>1EB（Exabyte 百亿亿字节 艾字节）=1024PB，</p><p>1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,</p><p>1YB (Jottabyte 一亿亿亿字节 尧字节)= 1024 ZB,</p><p>1BB (Brontobyte 一千亿亿亿字节)= 1024 YB.</p><h2 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>Redis是一个开源的key – value存储系统</p></li><li><p>和Memcached 类似，但它支持存储value类型相对更多，包括string(字符串)，list(链表)，set(集合)，Zset(有序集合) 和hash(哈希类型)</p></li><li><p>这些数据类型都支持push /pop 、add/remove 及取交集并集和差集以及更丰富的操作，而这些<strong>操作都是原子性的</strong>。</p></li><li><p>在此基础上，Redis支持各种不同方式的排序</p></li><li><p>为了保证效率，<strong>数据都是缓存在内存中</strong>。</p></li><li><p>Redis会周期性的把更新的数据写入磁盘或者把写入、修改操作追加到记录文件。</p></li><li><p>并且在此基础上实现了master—slave(主从)同步。</p></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>配合关系型数据库做高速缓存<ul><li>高频次，热门访问的数据，降低数据库IO</li><li>分布式架构，做session共享</li></ul><img src="/images/QQ%E6%88%AA%E5%9B%BE20210803093645.png"></li><li>多样的数据结构存储持久化数据</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210803093707.png"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>redis-6.2.1.tar.gz  放到  /opt/   下</p></li><li><p>yum install gcc   下载gcc</p></li><li><p>tar -zxvf  redis-6.2.1.tar.gz   解压</p></li><li><p>make   编译为c的文件</p></li><li><p>make install   安装</p></li><li><p>默认在  /usr/local/bin</p></li></ul><p>安装目录下各个文件的作用：</p><p>redis-benchmark:性能测试工具</p><p>redis-check-aof：修复有问题的AOF文件</p><p>redis-check-dump：修复有问题的dump.rdb文件</p><p>redis-sentinel：Redis集群使用</p><p>redis-server：Redis服务器启动命令</p><p>redis-cli：客户端，操作入口</p><p>前台启动  :  redis–server</p><p>后台启动：</p><ul><li><p>cp  /opt/redis-6.2.5/redis.conf  /etc/redis.conf</p></li><li><p>vim  /etc/redis.conf    ，把 daemonize   no  改为   daemonize   yes </p><p>【补充：】  vim的命令行模式下输入   /daemonize    即可搜索需要的内容</p></li><li><p>cd  /usr/local/bin/</p></li><li><p>reids-server  配置文件所在位置        就可以启动服务</p></li><li><p> redis-cli  [ -p  端口号]                        可以连接客户端</p></li><li><p>若是要启动多个redis，需要在启动服务的时候表明自己用的是哪个配置文件，还有必须指定自己的端口号</p></li><li><p>关闭：   redis-cil  shutdown  或者  kill -9  进程号</p><p>多实例关闭，指定端口关闭:  redis-cli -p &lt;端口号&gt;shutdown</p></li></ul><h3 id="Redis占用内存大小"><a href="#Redis占用内存大小" class="headerlink" title="Redis占用内存大小"></a>Redis占用内存大小</h3><p>​      我们知道Redis是基于内存的key-value数据库，因为系统的内存大小有限，所以我们在使用Redis的时候可以配置Redis能使用的最大的内存大小</p><ul><li><p>通过配置文件配置</p></li><li><p>redis配置文件中，修改    maxmemory  后面的值即可</p></li><li><p>通过命令修改</p><pre class=" language-shell"><code class="language-shell">//设置Redis最大占用内存大小为100M127.0.0.1:6379> config set maxmemory 100mb//获取设置的Redis能使用的最大内存大小127.0.0.1:6379> config get maxmemory</code></pre><p>​    如果不设置最大内存大小或者设置最大内存大小为0，在64位操作系统下不限制内存大小，在32位操作系统下最多使用3GB内存</p></li></ul><h4 id="Redis的内存淘汰"><a href="#Redis的内存淘汰" class="headerlink" title="Redis的内存淘汰"></a>Redis的内存淘汰</h4><p>​    既然可以设置Redis最大占用内存大小，那么配置的内存就有用完的时候。那在内存用完的时候，还继续往Redis里面添加数据不就没内存可用了吗？</p><p>实际上Redis定义了几种策略来处理这种情况：</p><ul><li>noeviction(默认) ： 对于写请求不在提供服务，直接返回错误，DEL请求和部分特殊请求除外</li><li>allkeys-lru：从所有key中使用LRU(最近最少使用)算法进行淘汰</li><li>volatile-lru：从设置了过期时间的key中使用LRU算法淘汰</li><li>allkeys-random：从所有key中随机淘汰</li><li>volatile-random：从设置了过期时间的key中随机淘汰</li><li>volatile-ttl：在设置了过期时间的key中，根据key 的过期时间进行淘汰，越快过期的越优先淘汰</li></ul><p>当使用volatile-lru、volatile-random、volatile-ttl这三种策略时，如果没有key可以被淘汰，则和noeviction一样返回错误</p><h4 id="设置内存淘汰策略"><a href="#设置内存淘汰策略" class="headerlink" title="设置内存淘汰策略"></a>设置内存淘汰策略</h4><ul><li>获取当前内存淘汰策略</li></ul><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> config get maxmemory-policy</code></pre><ul><li>通过配置文件设置淘汰策略</li></ul><pre class=" language-shell"><code class="language-shell">maxmemory-policy allkeys-lru</code></pre><ul><li>通过命令修改淘汰策略：</li></ul><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> config set maxmemory-policy allkeys-lru</code></pre><p>【补充：LRU算法】</p><p>​    LRU(Least Recently Used)，即最近最少使用，是一种缓存置换算法。在使用内存作为缓存的时候，缓存的大小一般是固定的。当缓存被占满，这个时候继续往缓存里面添加数据，就需要淘汰一部分老的数据，释放内存空间用来存储新的数据。这个时候就可以使用LRU算法了。其核心思想是：如果一个数据在最近一段时间没有被用到，那么将来被使用到的可能性也很小，所以就可以被淘汰掉。</p><p>​     Redis 中的 LRU 不是严格意义上的LRU算法实现，是一种近似的 LRU 实现，主要是为了节约内存占用以及提升性能。Redis 配置文件有这样一个配置 —— <code>maxmemory-samples</code>，Redis 的 LRU 是取出配置的数目的key，然后从中选择一个最近最不经常使用的 key 进行置换，默认的是5。可以通过调整样本数量来取得 LRU 置换算法的速度或是精确性方面的优势。Redis 不采用真正的 LRU 实现的原因是为了节约内存使用</p><h3 id="Redis介绍相关知识"><a href="#Redis介绍相关知识" class="headerlink" title="Redis介绍相关知识"></a>Redis介绍相关知识</h3><p>端口 6379 的由来，它是根据 Merz  这个名字来的，九键输入法的  M  e  r  z  四个字母对应着  6  3  7  9 四个数字</p><ul><li>Redis默认有16个数据库 0 - 15，默认是 0 号库</li><li>使用  select  &lt;库的编号&gt;   来切换库</li><li>统一密码管理，所有库有着同样的密码</li></ul><p>==<strong>Redis是单线程 + 多路 IO 复用技术</strong>==</p><p>​       多路复用是指使用一个线程来检查多个文件描述符( Socket )的就绪状态,比如调用select和poll函数,传入多个文件描述符,如果有一个文件描述符就绪,则返回,否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行,也可以启动新的线程执行(比如使用线程池)。也就是<strong>单个线程，跟踪、管理多个I/O流 。</strong></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801005200.png"></p><p>在黄牛买到票之前， 1,2,3号他们还是干自己的事情，这就是多路 IO 复用，提高CPU利用率</p><p>Redis与Memcache的三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用</p><h4 id="Redis-key键操作"><a href="#Redis-key键操作" class="headerlink" title="Redis key键操作"></a>Redis key键操作</h4><ul><li><p>keys *  </p><ul><li>查看当前所有库</li></ul></li><li><p>exists  key</p><ul><li>判断某个key是否存在</li></ul></li><li><p>type key</p><ul><li>查看你的key对应的value是什么类型</li></ul></li><li><p>del key</p><ul><li>删除指定的key数据</li></ul></li><li><p>unlink  key</p><ul><li><strong>根据value选择非阻塞删除</strong>，也就是仅将key从keyspace元数据中删除，<strong>真正的删除会在后续异步操作</strong></li></ul></li><li><p>expire key  时间</p><ul><li>为给定的key设置过期时间，单位为秒，若是没有设置过期时间，则默认永不过期</li></ul></li><li><p>ttl  key</p><ul><li>查看还有多少秒过期，-1表示永不过期，-2表示已经过期</li></ul></li><li><p>select  库编号</p><ul><li>切换数据库</li></ul></li><li><p>dbsize </p><ul><li>查看当前数据库的key的数量</li></ul></li><li><p>flushdb 和  flushall</p><ul><li>清空当前库</li></ul></li></ul><h3 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h3><p>==<strong>常用数据类型都是针对于key - value 的value来说的</strong>==，这个value可以是string，list，set，hash。。。</p><h4 id="Redis字符串-String"><a href="#Redis字符串-String" class="headerlink" title="Redis字符串(String)"></a>Redis字符串(String)</h4><ul><li>简介<ul><li>String是Redis最基本的类型,你可以理解成与Memcached 一模一样的类型， 一个key对应一个value。</li><li>String类型是<strong>二进制安全的</strong>。 意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。只要能变成字符串就都能存到String里面去。</li><li><strong>String类型是Redis最基本的数据类型,</strong> 一个Redis中字符串value 最多可以是<strong>512M</strong>。</li></ul></li></ul><ul><li>常用命令<ul><li>set  &lt;key&gt;  &lt;value&gt;<ul><li> 添加键值对。如果key不为空，则达到一个覆盖的效果</li></ul></li><li>get  &lt;key&gt;   <ul><li>查询对应键的值</li></ul></li><li>getset  &lt;key&gt;  &lt;value&gt;   <ul><li> 以旧换新，设置新值的同时返回旧值</li></ul></li><li>append   &lt;key&gt;  &lt;value&gt;  <ul><li>将给定的 &lt;valule&gt; 追加到原值的末尾</li></ul></li><li>strlen  &lt;key&gt; <ul><li>获得值的长度</li></ul></li><li>setnx   &lt;key&gt;  &lt;value&gt;  <ul><li>只有key不存在时才能设置key的值</li></ul></li><li>setex  &lt;key&gt; 过期时间  &lt;value&gt;    <ul><li>添加数据的时候就设置过期时间，expire 是为已存在的key设置过期时间，注意区别</li></ul></li><li>incr  &lt;key&gt; <ul><li>将key中存储的数字值增1，<strong>只能对数字值操作</strong>，如果key为空，则新增值为1</li></ul></li><li>decr  &lt;key&gt; <ul><li>将key中存储的数字值减1</li></ul></li><li>incrby\decrby  &lt;key&gt; &lt;步长&gt; <ul><li> 将key中存储的数字值根据自定义步长增减</li></ul></li><li>mset  &lt;key1&gt;  &lt;value1&gt;  &lt;key2&gt;  &lt;value2&gt;  …   &lt;key n&gt;&lt;value n&gt;  <ul><li>添加多个值</li></ul></li><li>mget  &lt;key1&gt; &lt;key2&gt; …   &lt;key n&gt; <ul><li>查看多个值</li></ul></li><li>msetnx    &lt;key1&gt;  &lt;value1&gt;  &lt;key2&gt;  &lt;value2&gt;  …   &lt;key n&gt;&lt;value n&gt;    <ul><li>当且仅当添加的key都不存在时才成功</li></ul></li><li>getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;      <ul><li>截取范围  [起始位置，结束位置]  内的值。开始索引为0</li></ul></li><li>setrange  &lt;key&gt; &lt;起始位置&gt; &lt;value&gt;   <ul><li>从起始位置开始(开始索引为0)，用 &lt;value&gt;覆盖原来的值， &lt;value&gt;有几位就覆盖几位，覆盖不了的还是显示旧 &lt;value&gt;的值</li></ul></li></ul></li></ul><p>Redis单命令是原子性的</p><ul><li>原子操作是指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会有任何context switch</li><li><strong>在单线程中，能够在单条指令中完成的操作都可以认为是“原子操作”，因为中断只发生在指令之间</strong></li><li>在多线程中，不能被其他进程或线程打断的操作就叫原子操作</li><li>==<strong>Redis单命令的原子性主要得益于Redis是单线程的</strong>==</li></ul><p>【补充问题：】</p><p>java中的 i++ 是否是原子操作？ 答案：不是</p><p>i = 0； 两个线程分别对i进行 ++100次，值是多少？   答案 ： 2 ~ 200 之间都有可能</p><p>分析：</p><table><thead><tr><th>a线程</th><th>b线程</th></tr></thead><tbody><tr><td>i = 0</td><td>i = 0</td></tr><tr><td>i++</td><td>被a打断</td></tr><tr><td>…  到 i=99</td><td>被a打断</td></tr><tr><td>被b打断</td><td>i++</td></tr><tr><td>被b打断</td><td>i = 1</td></tr><tr><td>i = 1</td><td>被a打断</td></tr><tr><td>被b打断</td><td>i ++</td></tr><tr><td>被b打断</td><td>直到   i = 100</td></tr><tr><td>i ++</td><td>b结束</td></tr><tr><td>i = 2</td><td>b结束</td></tr></tbody></table><p>底层数据结构</p><p>​     String的数据结构为<strong>简单动态字符串</strong>，是可以修改的字符串，内部结构实现上类似于java的ArrayList，采用预分配冗余空间的方式来减少内存频繁分配，内部为当前字符串时间分配的空间一般要高于实际字符串长度len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M ，扩容时一次只会增加 1M 的空间，需要注意的是<strong>字符串最大长度为 512M</strong>。</p><h4 id="Redis列表-List"><a href="#Redis列表-List" class="headerlink" title="Redis列表(List)"></a>Redis列表(List)</h4><p>简介：</p><p>​    Redis列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或者尾部（右边），它的底层实际上是==<strong>双向列表</strong>==，对两端的操作性能很高，通过索引下标操作中间的结点性能会较差</p><p>常用命令</p><ul><li><p>lpush/rpush   &lt;key1&gt;  &lt;value1&gt;  &lt;value2&gt;  …  &lt;value n&gt;  </p><ul><li>从左边/右边插入一个或多个值</li><li>lpush 是从最左边放值，一个挤一个的放，把第一个挤到最后一个</li><li>rpush 是从最右边放值，一个挤一个的放，把最后一个挤到第一个</li></ul></li><li><p>lpop/rpop   &lt;key1&gt;  [count]</p><ul><li>从左边/右边吐出count个值，==<strong>值有键在，值无键亡</strong>==</li></ul></li><li><p>rpoplpush  &lt;key1&gt;  &lt;key2&gt;</p><ul><li>从&lt;key1&gt; 列表右边吐出一个值，插入到 &lt;key2&gt; 列表左边，没有   lpoprpush   这条指令</li></ul></li><li><p>lrange &lt;key1&gt;  &lt;start&gt;  &lt;stop&gt; </p><ul><li>按照索引下标获取元素（从左到右） </li><li>lrange key 0  -1 : 表示获取key的所有值</li></ul></li><li><p>lindex  &lt;key&gt; &lt;index&gt; </p><ul><li>按照索引下标（从0开始）获得元素（从左到右）</li></ul></li><li><p>llen  &lt;key&gt;  </p><ul><li>获取列表长度</li></ul></li><li><p>linsert &lt;key&gt; before/after  &lt;value&gt;  &lt;newvalue&gt;</p><ul><li>在 &lt;value&gt;的前面/后面插入  &lt;newvalue&gt; </li></ul></li><li><p>lrem  &lt;key&gt;  &lt;n&gt;  &lt;value&gt; </p><ul><li>从左边删除n个value（从左到右）</li></ul></li><li><p>lset  &lt;key&gt;  &lt;index&gt;  &lt;value&gt; </p><ul><li>将列表key下标为index(从0开始)的值替换成value</li></ul></li></ul><p>底层数据结构</p><p>​    List的数据结构为快速链表quickList。首先在列元素较少的情况下会使用一块连续的空间,这个结构是ziplist ,也即是<br>压缩列表。它将所有的元素紧挨着一起存储,分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。</p><p>​    因为普通的链表需要的附加指针空间太大,比较浪费空间。比如这个列表里存的只是int类型的数据结构，它还需要两个额外的指针prev和next.。</p><p>​    Redis将链表和ziplist结合起来组成了quicklist.也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能,又不会出现太大的空间冗余。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801091812.png"></p><h4 id="Redis集合（set）"><a href="#Redis集合（set）" class="headerlink" title="Redis集合（set）"></a>Redis集合（set）</h4><p>简介<br>    Redis set对外提供的功能与list类似也是一个列表的功能 ,特殊之处在于set是可以<strong>自动排重</strong>，当你需要存储一个列表数据，又不希望出现重复数据时, set是一个很好的选择，并且set提供了判断某个成员否在一个set集合内的重要接口,这个也是list所不能提供的。</p><p>​    Redis的Set是string类型的无序集合。它<strong>底层是一个value为null的hash表</strong>，所以添加,删除,查找的复杂度都是**0(1)**。集合中数据增加，查找数据的时间还是不变。</p><p>常用命令</p><ul><li><p>sadd  &lt;key&gt;   &lt;value1&gt;  &lt;value2&gt; ….</p><ul><li>将一个或多个值添加到集合key中，已经存在的值是添加不进去的</li></ul></li><li><p>smembers   &lt;key&gt; </p><ul><li>取出该集合的所有值</li></ul></li><li><p>sismember  &lt;key&gt;  &lt;value&gt;</p><ul><li>判断集合&lt;key&gt;是否为含有该&lt;value&gt; 的值，有返回1，没有返回0</li></ul></li><li><p>scard  &lt;key&gt;</p><ul><li>返回该集合的元素个数</li></ul></li><li><p>srem &lt;key&gt; &lt;value1&gt; &lt;value2&gt;…</p><ul><li> 删除集合中的元素</li></ul></li><li><p>spop &lt;key&gt; </p><ul><li>随机从该集合中吐出一个值，意味着<strong>该元素从集合中删除</strong></li></ul></li><li><p>srandmember &lt;key&gt; &lt;n&gt;</p><ul><li>随机从该集合中取出n个值，<strong>不会从集合中删除</strong></li></ul></li><li><p>smove &lt;source&gt;  &lt;destination&gt; value</p><ul><li>把集合中的一个值从一个集合移动到另一个集合</li></ul></li><li><p>sinter &lt;key1&gt; &lt;key2&gt;</p><ul><li>返回两个集合的交集元素</li></ul></li><li><p>sunion  &lt;key1&gt;  &lt;key2&gt;</p><ul><li>返回两个集合的并集元素</li></ul></li><li><p>sdiff &lt;key1&gt; &lt;key2&gt;</p><ul><li>返回key1集合中的，key2集合中没有的差集元素</li></ul></li></ul><p>底层数据结构</p><p>​        Java中HashSet的内部实现使用的是HashMap ,只不过所有的value都指向同一个对象。</p><p>​       Redis的set结构也是一样,它的内部也使用hash结构。</p><h4 id="Redis哈希（hash）"><a href="#Redis哈希（hash）" class="headerlink" title="Redis哈希（hash）"></a>Redis哈希（hash）</h4><p> 简介：</p><p>Redis hash是一个键值对集合。 Redis hash是一个 string类型的field 和value的映射表, hash特别适合于存储对象。类似Java里面的Map&lt;String,Object&gt;。用户ID为查找的key，存储的value户对象包含姓名,年龄，生日等信息,</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801103427.png"></p><p>常用指令</p><ul><li><p>hset &lt;key&gt;  &lt;field&gt;   &lt;value&gt; </p><ul><li>给集合中的   赋值 &lt;value&gt; 到 &lt;filed&gt;键</li></ul></li><li><p>hget  &lt;key1&gt;  &lt;filed&gt; </p><ul><li>取出 &lt;key1&gt;集合 &lt;filed&gt;的值</li></ul></li><li><p>hmset  &lt;key1&gt;   &lt;filed1&gt; &lt;value1&gt;   &lt;field2&gt; &lt;value2&gt;</p><ul><li>批量设置hash值</li></ul></li><li><p>hexists   &lt;key1&gt;   &lt;field&gt;</p><ul><li>查看hash表key中给定域field是否存在，返回1表示存在，返回0表示没有</li></ul></li><li><p>hkeys   &lt;key&gt;</p><ul><li>列出该hash集合的所有field</li></ul></li><li><p>hvals   &lt;key&gt;</p><ul><li>列出该hash集合的所有value</li></ul></li><li><p>hincrby   &lt;key&gt;  &lt;field&gt; &lt;increment&gt; </p><ul><li>为哈希表 key 中的  filed  的值加上一个增量 increment</li></ul></li><li><p>hsetnx   &lt;key&gt;  &lt;field&gt; &lt;value&gt; </p><ul><li>为哈希表 key 中的  filed  的值加上一个增量 increment，<strong>当且仅当 field 不存在</strong></li></ul></li></ul><p>底层数据结构</p><p>​    Hash类型对应的数据结构是两种: ziplist (压缩列表)，hashtable (哈希表)。当field-value长度较短且个数较少时，使用ziplist,否则使用hashtable.。</p><p>【回忆】：HashTable和HashMap区别</p><ul><li><p>继承：</p><ul><li>HashTable继承自Dirctionary，HashMap继承自AbstractMap，二者均实现了Map接口；</li></ul></li><li><p>线程安全性：</p><ul><li>HashTable的方法是同步的，即是线程安全的。HaspMap的方法不是同步的，不是线程安全的。在多线程并的情况下，我们可以直接使用HashTable，如果 要使用HashMap，就需要自行对HashMap的同步处理。</li></ul></li><li><p>键值：</p><ul><li>HashTable中不允许有null键和null值，HashMap中允许出现一个null键，可以存在一个或者多个键的值都为null。程序中，对于HashMap，如果使用get(参数为 键)方法时，返回结果为null，可能是该键不存在，也可能是该键对应的值为null，这就出现了结果的二义性。因此，在HashMap中，我们不能使用get()方法来查询键 对应的值，应该使用containskey()方法。</li></ul></li><li><p>哈希值：</p><ul><li>HashTable是直接使用对象的hashCode。HashMap是重新计算hash值。</li></ul></li><li><p>扩容：</p><ul><li>HashTable和HashMap的底层实现的数组和初始大小和扩容方式。HashTable初始大小为11，并且每次扩容都为：2 * old+1。HashMap的默认大小为16，并且一 定是2的指数，每次扩容都为old * 2。</li></ul></li></ul><h4 id="Redis有序集合Zset（sorted-set）"><a href="#Redis有序集合Zset（sorted-set）" class="headerlink" title="Redis有序集合Zset（sorted set）"></a>Redis有序集合Zset（sorted set）</h4><p>简介：</p><p>​        Redis有序集合Zset 与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p><p>​        不同之处是有序集合的每个成员都关联了一个评分( score) ，这个评分( score )被用来按照从最低分到最高分的方式排集合中的成员。</p><p>​        集合的成员是唯一的，但是评分可以是重复的。因为元素是有序的，所以也可以很快的根据评分( score )或者次序( position )来获取一个范围的元素。</p><p>​        访问有序集合的中间元素也是非常快的，因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><p>常用命令</p><ul><li><p>zadd &lt;key&gt; &lt;socre1&gt; &lt;value1&gt; &lt;score2&gt; &lt;value2&gt; …</p><ul><li>将一个或多个 member 元素及其score 值加入到有序集 key当中</li></ul></li><li><p>zrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [WITHSOCRES]</p><ul><li>返回有序集key中，下标在 &lt;start&gt;  &lt;stop&gt; 之间的元素，带WITHSOCRES，可以让分数一起和值返回到结果集</li><li>start 为 0 和 stop  为 -1  时，表示可以取出集合中的所有值</li></ul></li><li><p>zrangebyscore key min  max [withsocres] </p><ul><li>返回有序集key中，所有score值介于并包括 min 和 max之间的成员，有序集成员按score值从小到大排序</li></ul></li><li><p>zrevrangebyscore key  max  min  [withsocres] </p><ul><li>同上，改为从大到小</li></ul></li><li><p>zcount  &lt;key&gt;  &lt;min&gt;  &lt;max&gt; </p><ul><li>统计该集合分数区间内的元素个数</li></ul></li><li><p>zincrby &lt;key&gt;  &lt;increment&gt;  &lt;value&gt; </p><ul><li>为元素的score加上增量</li></ul></li><li><p>zrem  &lt;key&gt;  &lt;value&gt; </p><ul><li>删除该集合下指定值的元素</li></ul></li><li><p>zrank  &lt;key&gt;  &lt;value&gt; </p><ul><li>返回该值在集合中的排名，从0开始</li></ul></li></ul><p>底层数据结构</p><p>​        SortedSet (zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt; ，可以给每一个元素 value赋予一个权重score ，另一方面它又类似于TreeSet ，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。<br>​    </p><p>​    zset底层使用了两个数据结构。</p><ul><li>hash <ul><li>hash的作用就是关联元素value和权重score，保障元素value的唯一性,可以通过元素value找到相应的score值。</li></ul></li><li>跳跃表<ul><li>跳跃表的目的在于给元素value排序和根据score的范围获取元素列表。<strong>文章最后有解释跳跃表</strong></li></ul></li></ul><h3 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（publish）发送消息，订阅者（subscribe）接收消息。</p><p>Redis客户端可以订阅任意数量的频道。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801141145.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801141206.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801141509.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801141443.png"></p><h3 id="Redis新增数据类型"><a href="#Redis新增数据类型" class="headerlink" title="Redis新增数据类型"></a>Redis新增数据类型</h3><h4 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h4><p>简介：</p><p>现代计算机用二进制(位)作为信息的基础单位，1 个字等于8位，例如”abc”字符串是由3个字节组成，但实际在计算机存储时将其用二进制表示，”abc” 分别对应的ASCII码分别是97、98、 99， 对应的二进制分别是01100001、01100010和01100011。</p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。Redis提供了Bitmaps这个“数据类型”可以实现对位的操作: 。<br>(1) Bitmaps本身不是一 种数据类型，实际上它就是字符串( key-value ),但是它可以对字符串的位进行操作。<br>(2) Bitmaps单独提供了一套命令，所以在Redis中使用Bitmaps和使用字符串的方法不太相同。可以把 Bitmaps 想象成一个以位为单位的数组,数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量。</p><p>常用命令：</p><ul><li><p>setbit &lt;key&gt; &lt;offest&gt; &lt;value&gt;</p><ul><li>设置Bitmaps中某个偏移量的值（0或1），offest的偏移量从0开始</li></ul></li><li><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p></li><li><p>getbit &lt;key&gt; &lt;offest&gt;</p><ul><li>获取Bitmaps中某个偏移量的值</li></ul></li><li><p>bitcount </p><ul><li>统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的start或end参数，可以让计数只在特定的位上进行。start 和end参数的设置，可以是负数值:如-1表示最后一个位，而-2表示倒数第个二位，start、end 是指<strong>bit组（代表8个bit）</strong>的字节的下标数，二者皆包含。</li><li>bitcount  &lt;key&gt; [start end]<ul><li>统计字符串从start字节(从0开始)到end字节的比特值为1的数量，<strong>注意是字节</strong></li></ul></li></ul></li><li><p>bitop and/or/not/xor &lt;destkey&gt; [key…]</p><ul><li>bitop是一个复合操作，它可以做多个Bitmaps的and、or、not、xor操作并将结果保存在destkey中</li></ul></li></ul><h4 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h4><p>简介：</p><p>​    在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV(PageView页面访问量) ，可以使用Redis的incr、incrby 轻松实现。</p><p>​    但像UV ( UniqueVisitor ,独位访客)、独立IP数、搜索记录数等要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。解决基数问题有很多种方案:</p><p>(1 )数据存储在MySQL中,使用distinct count计算不重复个数。</p><p>( 2)使佣Redis提供的hash、 set、bitmaps等数据结构来处理</p><p>   以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>   能否能够降低一定的精度平衡存储空间？ Redis推出了HyperLogLog</p><p>   Redis HyperLogLog 用来做基数统计的算法，HyperLogLog的优点是,在输入元素的数量或者体积非常非常大时,计算基数所需的空间总是固定的、組是很小的。</p><p>   在Redis里面，每个HyperLogLog键只需要花费12 KB内存，就可以计算接近2^64个不同元素的基数。这和计算基数时，元素越多 耗费内存就越多的集合形成鲜明对比。</p><p>​    但是,因为HyperLogLog只会根据输入元素来计算基数,而不会储存输入元素本身,所以HyperLogLog不能像集合那样,返回输入的各个元素。</p><p>   什么是基数?。<br>    比如数据集{1, 3,5,7,5, 7, 8},那么这个数据集的基数集为{1, 3,5 ,7, 8},基数(不重复元素)为5个。基数估计就是在误差可接受的范围内 ,快速计算基数。</p><p>常用命令</p><ul><li><p>pfadd &lt;key&gt;  &lt;element&gt; [element…] </p><ul><li>添加指定元素到 HyperLogLog中，添加成功返回1，否则为0</li></ul></li><li><p>pfcount  &lt;key&gt;</p><ul><li>统计基数个数</li></ul></li><li><p>pfmerge  &lt;destkey&gt;   &lt;sourcekey&gt;   &lt;sourcekey&gt;  …</p><ul><li>将一个或多个 sourcekey 合并计算并存储在 destkey 中</li></ul></li></ul><h4 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h4><p>简介</p><p>​    Redis 3.2 中增加了对GEO型的支持。GEO , Geographic ,地理信息的缩写。该类型就是元素的2维坐标，在地图上就是经纬度，redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><p>常用命令</p><ul><li><p>geoadd &lt;key&gt; &lt;longitude&gt;  &lt;latitude&gt;  &lt;member&gt;</p><ul><li>添加地理位置（经度，纬度，名称），可以添加多个</li></ul></li><li><p>geopos  &lt;key&gt;  &lt;member&gt;  </p><ul><li>获取指定地区的坐标值</li></ul></li><li><p>geodist   &lt;key&gt;   &lt;member1&gt;   &lt;member2&gt;   [m|km|ft|mi] </p><ul><li>获取两个位置之间的直线距离，单位默认是  m </li></ul></li><li><p>georadius  &lt;key&gt;   &lt;longitude&gt;  &lt;latitude&gt; radius    [m|km|ft|mi] </p><ul><li>以给定的半径找出此半径内的元素</li></ul></li></ul><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//redis的所有命令都在jedis中有对应的方法，这里只显示了一部分</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisDemo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Jedis对象</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.130.172"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测试连接</span><span class="token comment" spellcheck="true">//        String ping = jedis.ping();</span><span class="token comment" spellcheck="true">//        System.out.println(ping);</span>        <span class="token comment" spellcheck="true">//添加</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取</span>        String s <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置多个key - value</span>        jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1"</span><span class="token punctuation">,</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2"</span><span class="token punctuation">,</span><span class="token string">"k3"</span><span class="token punctuation">,</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> mget <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mget<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>【注意：】</p><ul><li>查看配置文件 /etc/redis.conf <ul><li>注掉 bind = 127.0.0.1</li><li>把protected-mode yes  改为  protected-mode no</li></ul></li><li>关闭firewalld 和 iptables<ul><li>systemctl stop  firewalld </li><li>service iptables stop</li></ul></li></ul><h4 id="案例：模拟验证码发送"><a href="#案例：模拟验证码发送" class="headerlink" title="案例：模拟验证码发送"></a>案例：模拟验证码发送</h4><ul><li>输入手机号，点击发送后随机生成6位数字码，2分钟有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入3次</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210801185150.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-08-01 18:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneCode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接redis     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.130.172"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token string">"15110636286"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getRedisCode</span><span class="token punctuation">(</span><span class="token string">"15110636286"</span><span class="token punctuation">,</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"VerifyCode15110636286:code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1.生成六位随机数     *     * @return 六位随机数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rand <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 2.每个手机每天只能发送三次，验证码放到redis中，设置过期时间     *     * @param phone 手机号     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verifyCode</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接手机发送次数的key</span>        String countKey <span class="token operator">=</span> <span class="token string">"VerifyCode"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">":count"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接验证码的key</span>        String codeKey <span class="token operator">=</span> <span class="token string">"VerifyCode"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">":code"</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天发送次数超过三次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3.验证码校验     *     * @param phone 手机号     * @param code  验证码     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRedisCode</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String code<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接验证码的key</span>        String codeKey <span class="token operator">=</span> <span class="token string">"VerifyCode"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">":code"</span><span class="token punctuation">;</span>        String redisCode <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="springboot整合redis"><a href="#springboot整合redis" class="headerlink" title="springboot整合redis"></a>springboot整合redis</h3><ul><li>导入依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>配置文件</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Redis服务器地址</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.130.172</span><span class="token comment" spellcheck="true">#Redis服务器连接端D</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true">#Redis数据库索引(默认为0)</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#连接超时时间(毫秒)</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">1800000s</span><span class="token comment" spellcheck="true">#连接池最大连接数(使用负值表示没有限制)</span><span class="token attr-name">spring.redis.lettuce.pool.max--active</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true">#最大阻塞等待时间(负数表示没限制)</span><span class="token attr-name">spring.redis.lettuce.pool.maxwait</span><span class="token punctuation">=</span><span class="token attr-value">-1s</span><span class="token comment" spellcheck="true">#连接池中的最大空闲连接</span><span class="token attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment" spellcheck="true">#连接池中的最小空闲连接</span><span class="token attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0</span></code></pre><ul><li>配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-08-01 22:09 */</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>      om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>      jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> template<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> CacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>      om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>      jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>      RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      RedisCacheManager cacheManager <span class="token operator">=</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>controller层</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redisTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTestController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>   <span class="token annotation punctuation">@GetMapping</span>   <span class="token keyword">public</span> String <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置值到redis</span>      redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//从redis获取值</span>      String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>​    Redis事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请所打断。</p><p>​    Redis事务的==<strong>主要作用就是串联多个命令防止别的命令插队</strong>==。</p><p>【回忆MySQL事务：一个或一组sql语句组成的执行单元】</p><h4 id="Multi-–-Exec-–-discard"><a href="#Multi-–-Exec-–-discard" class="headerlink" title="Multi  –  Exec  –  discard"></a>Multi  –  Exec  –  discard</h4><p>从输入Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。组队的过程中可以通过discard来放弃组队。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802072030.png"></p><h4 id="事务错误处理"><a href="#事务错误处理" class="headerlink" title="事务错误处理"></a>事务错误处理</h4><ul><li>组队中某个命令出现了报告错误，执行时整个队列都会被取消</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802072642.png"></p><ul><li>执行阶段某个命令报出了错误，则只有报错的命令不会被执行，其他的命令都会执行，<strong>不会回滚</strong>。</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802072808.png"></p><h4 id="事务冲突-悲观锁，乐观锁"><a href="#事务冲突-悲观锁，乐观锁" class="headerlink" title="事务冲突(悲观锁，乐观锁)"></a>事务冲突(悲观锁，乐观锁)</h4><p>悲观锁</p><p>​    悲观锁(Pessimistic Lock)，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block 直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁，读锁，写锁等，都是在做操作之前先上锁。</p><p>乐观锁</p><p>​    乐观锁(Optimistic Lock),，顾名思义，就是很乐观 ，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号或者时间戳等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis 就是利用这种  check-and-set(CAS)  机制实现事务的。</p><p>【CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p><p> CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。==<strong>乐观锁是一种思想。CAS是这种思想的一种实现方式</strong>==。】</p><ul><li><p>WATCH key [key…]</p><ul><li>在执行multi之前，先执行watch key1 [key2]，可以监视一个(或多个) key ， 如果在事务执行之前这个(或这些) key被其他命令所改动,那么事务将被打断。</li></ul></li><li><p>unwatch</p><ul><li>取消对所有key的监视</li></ul></li></ul><h4 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h4><ul><li>单独的隔离操作<br>  事务中的所有命令 都会序列化、按顺序地执行。事务在执行的过程中, 不会被其他客户端发送来的命令求所打断。</li><li>没有隔离级别的概念 。<br>  队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行。</li><li>不保证原子性<br>事务中如果有一 条命令执行失败 ，其后的命令仍然会被执行，没有回滚。</li></ul><h4 id="Redis事务和MySQL的事务有什么区别"><a href="#Redis事务和MySQL的事务有什么区别" class="headerlink" title="Redis事务和MySQL的事务有什么区别"></a>Redis事务和MySQL的事务有什么区别</h4><p><a href="https://www.cnblogs.com/gjmhome/p/14409390.html">讲解1</a></p><p><a href="https://zhuanlan.zhihu.com/p/264354517">讲解2</a></p><h4 id="秒杀案例"><a href="#秒杀案例" class="headerlink" title="秒杀案例"></a>秒杀案例</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"  pageEncoding="UTF-8"%><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html>   <head>      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">      <title>Insert title here</title>   </head>   <body>      <h1>iPhone 12 Pro !!!  1元秒杀！！！      </h1>      <form id="msform" action="$&#123;pageContext.request.contextPath&#125;/doseckill" enctype="application/x-www-form-urlencoded">         <input type="hidden" id="prodid" name="prodid" value="0101">         <input type="button"  id="miaosha_btn" name="seckill_btn" value="秒杀点我"/>      </form>   </body>   <script  type="text/javascript" src="$&#123;pageContext.request.contextPath&#125;/script/jquery/jquery-3.1.0.js"></script>   <script  type="text/javascript">      $(function()&#123;         $("#miaosha_btn").click(function()&#123;                 var url=$("#msform").attr("action");            $.post(url,$("#msform").serialize(),function(data)&#123;               if(data=="false")&#123;                  alert("抢光了" );                  $("#miaosha_btn").attr("disabled",true);               &#125;            &#125; );             &#125;)      &#125;)   </script></html></code></pre><p>serlvet</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 秒杀案例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecKillServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">SecKillServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      String userid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">""</span> <span class="token punctuation">;</span>      String prodid <span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"prodid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//        boolean isSuccess=SecKill_redis.doSecKill(userid,prodid);</span>      <span class="token keyword">boolean</span> isSuccess<span class="token operator">=</span> SecKill_redisByScript<span class="token punctuation">.</span><span class="token function">doSecKill</span><span class="token punctuation">(</span>userid<span class="token punctuation">,</span>prodid<span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Util</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> JedisPool jedisPool <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token function">JedisPoolUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> JedisPool <span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> jedisPool<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>JedisPoolUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> jedisPool<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               JedisPoolConfig poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               poolConfig<span class="token punctuation">.</span><span class="token function">setBlockWhenExhausted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               poolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ping  PONG</span>               jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span> <span class="token string">"192.168.130.172"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> <span class="token number">60000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> jedisPool<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>JedisPool jedisPool<span class="token punctuation">,</span> Jedis jedis<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> jedis<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         jedisPool<span class="token punctuation">.</span><span class="token function">returnResource</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecKill_redis</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.1.190"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//秒杀过程</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doSecKill</span><span class="token punctuation">(</span>String uid<span class="token punctuation">,</span>String prodid<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 uid和prodid非空判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uid <span class="token operator">==</span> null <span class="token operator">||</span> prodid <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 连接redis</span>        <span class="token comment" spellcheck="true">//Jedis jedis = new Jedis("192.168.44.168",6379);</span>        <span class="token comment" spellcheck="true">//通过连接池得到jedis对象</span>        JedisPool jedisPoolInstance <span class="token operator">=</span> JedisPoolUtil<span class="token punctuation">.</span><span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> jedisPoolInstance<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 拼接key</span>        <span class="token comment" spellcheck="true">// 3.1 库存key</span>        String kcKey <span class="token operator">=</span> <span class="token string">"sk:"</span><span class="token operator">+</span>prodid<span class="token operator">+</span><span class="token string">":qt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2 秒杀成功用户key</span>        String userKey <span class="token operator">=</span> <span class="token string">"sk:"</span><span class="token operator">+</span>prodid<span class="token operator">+</span><span class="token string">":user"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//监视库存</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 获取库存，如果库存null，秒杀还没有开始</span>        String kc <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀还没有开始，请等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5 判断用户是否重复秒杀操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经秒杀成功了，不能重复秒杀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6 判断如果商品数量，库存数量小于1，秒杀结束</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kc<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀已经结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7 秒杀过程</span>        <span class="token comment" spellcheck="true">//使用事务</span>        Transaction multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//组队操作</span>        multi<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        multi<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> results <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>results <span class="token operator">==</span> null <span class="token operator">||</span> results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀失败了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.1 库存-1</span>        <span class="token comment" spellcheck="true">//jedis.decr(kcKey);</span>        <span class="token comment" spellcheck="true">//7.2 把秒杀成功用户添加清单里面</span>        <span class="token comment" spellcheck="true">//jedis.sadd(userKey,uid);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀成功了.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>lua脚本，解决库存问题</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecKill_redisByScript</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger logger <span class="token operator">=</span>LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SecKill_redisByScript<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      JedisPool jedispool <span class="token operator">=</span>  JedisPoolUtil<span class="token punctuation">.</span><span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Jedis jedis<span class="token operator">=</span>jedispool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Set<span class="token operator">&lt;</span>HostAndPort<span class="token operator">></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>HostAndPort<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//    doSecKill("201","sk:0101");</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> String secKillScript <span class="token operator">=</span><span class="token string">"local userid=KEYS[1];\r\n"</span> <span class="token operator">+</span>       <span class="token string">"local prodid=KEYS[2];\r\n"</span> <span class="token operator">+</span>       <span class="token string">"local qtkey='sk:'..prodid..\":qt\";\r\n"</span> <span class="token operator">+</span>       <span class="token string">"local usersKey='sk:'..prodid..\":usr\";\r\n"</span> <span class="token operator">+</span>       <span class="token string">"local userExists=redis.call(\"sismember\",usersKey,userid);\r\n"</span> <span class="token operator">+</span>       <span class="token string">"if tonumber(userExists)==1 then \r\n"</span> <span class="token operator">+</span>       <span class="token string">"   return 2;\r\n"</span> <span class="token operator">+</span>       <span class="token string">"end\r\n"</span> <span class="token operator">+</span>       <span class="token string">"local num= redis.call(\"get\" ,qtkey);\r\n"</span> <span class="token operator">+</span>       <span class="token string">"if tonumber(num)&lt;=0 then \r\n"</span> <span class="token operator">+</span>       <span class="token string">"   return 0;\r\n"</span> <span class="token operator">+</span>       <span class="token string">"else \r\n"</span> <span class="token operator">+</span>       <span class="token string">"   redis.call(\"decr\",qtkey);\r\n"</span> <span class="token operator">+</span>       <span class="token string">"   redis.call(\"sadd\",usersKey,userid);\r\n"</span> <span class="token operator">+</span>       <span class="token string">"end\r\n"</span> <span class="token operator">+</span>       <span class="token string">"return 1"</span> <span class="token punctuation">;</span>   <span class="token keyword">static</span> String secKillScript2 <span class="token operator">=</span>       <span class="token string">"local userExists=redis.call(\"sismember\",\"&amp;#123;sk&amp;#125;:0101:usr\",userid);\r\n"</span> <span class="token operator">+</span>      <span class="token string">" return 1"</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doSecKill</span><span class="token punctuation">(</span>String uid<span class="token punctuation">,</span>String prodid<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      JedisPool jedispool <span class="token operator">=</span>  JedisPoolUtil<span class="token punctuation">.</span><span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Jedis jedis<span class="token operator">=</span>jedispool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//String sha1=  .secKillScript;</span>      String sha1<span class="token operator">=</span>  jedis<span class="token punctuation">.</span><span class="token function">scriptLoad</span><span class="token punctuation">(</span>secKillScript<span class="token punctuation">)</span><span class="token punctuation">;</span>      Object result<span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">evalsha</span><span class="token punctuation">(</span>sha1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> uid<span class="token punctuation">,</span>prodid<span class="token punctuation">)</span><span class="token punctuation">;</span>      String reString<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> reString <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已抢空！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> reString <span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抢购成功！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> reString <span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该用户已抢过！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抢购异常！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在linux中使用以下指令测试</p><p>​    ab -n 1000 -c 100   -p ~/postfile -T application/x-www-form-urlencoded<a href="http://192.168.1.190:8080/seckill/doseckill">http://192.168.1.190:8080/seckill/doseckill</a></p><h3 id="持久化操作–-RDB"><a href="#持久化操作–-RDB" class="headerlink" title="持久化操作– RDB"></a>持久化操作– RDB</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>​    在指定的==<strong>时间间隔</strong>==内将内存中的数据集==<strong>快照</strong>==写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p>  备份的默认位置是  /usr/local/bin/dump.rdb，在 /etc/redis.conf 的 SNAPSHOTTING 下面可以修改</p><h4 id="备份原理"><a href="#备份原理" class="headerlink" title="备份原理"></a>备份原理</h4><p>​        Redis会单独创建( fork)一个子进程来进行持久化，<strong>会先将数据写入到一个临时文件中</strong>，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件</strong>（也称作写时复制）。整个过程中，主进程是不进行任何IO操作的,这就确保了极高的性能，如果需要进行大规模数据的恢复，对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。==<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong>==。</p><p>​    备份的过程是自动的，可以设置手动，但在手动备份的过程中会阻塞其他全部进程，等备份完了其他进程才会工作，所以不建议设置手动的</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li><p>Fork的作用是复制一个与当前进程一样的进程。 新进程的所有数据(变量、环境变量、程序计数器等)数值都和原进程一致， 但是是一个全新的进程 ,并作为原进程的子进程</p></li><li><p>在Linux程序中, fork会产生一个和父进程完全相同的子进程 ，但子进程在此后多会exec系统调用，出于效率考虑,，Linux中引入了”写时复制技术”。</p></li><li><p><em>一般情况父进程和子进程会共用同一段物理内存</em>,只有进程空间的各段的内容要发生变化时,才会将父进程的内容复制一份给子进程。。</p></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802110201.png"></p><h4 id="rdb恢复备份"><a href="#rdb恢复备份" class="headerlink" title="rdb恢复备份"></a>rdb恢复备份</h4><p>关闭redis，重新启动redis时备份的 dump.rdb 文件会自动加载</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高时更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li><li>可以最大化redis性能</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802111828.png"></p><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。</li><li>RDB是在备份周期中没间隔一段时间做一次备份，如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ul><h3 id="持久化操作-–-AOF"><a href="#持久化操作-–-AOF" class="headerlink" title="持久化操作 – AOF"></a>持久化操作 – AOF</h3><p> AOF(Append Only File)</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>==<strong>以日志的形式来记录每个写操作(增量保存)</strong>== ，将Redis执行过的**所有写指令记录下来(读操作不记录)**，只许追加文件但不可以改写文件,，redis启动之初会读取该文件重新构建数据，换言之， redis重启的话就根据日志文件的内容将写指令从前到后执行一次，以完成数据的恢复工作。</p><p><strong>AOF默认不开启：</strong>在 /etc/redis.conf 中把  appendonly  no    改为 appendonly  yes</p><p>可以在 redis.conf 中配置文件名称，默认为appendonly.aof。AOF文件的保存路径与RDB的路径一致。</p><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><ul><li><p>客户端的请求写命令会被append追加到AOF缓冲区内。</p></li><li><p>AOF缓冲区根据AOF同步频率的设置 [always，everysec，no]  将操作sync同步到磁盘的AOF文件中。</p></li><li><p>AOF文件大小超过重写策略或手动重写时，会对AOF文件  rewrite 重写，压缩 AOF文件容量。</p></li><li><p>Redis服务重启时，会重新 load 加载  AOF 文件中的写操作以达道数据恢复的目的。</p></li></ul><h4 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h4><p>重启redis服务，数据重新加载</p><h4 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h4><p>appendonly.aof损坏  后重启redis  报错 ：Could not connect to Redis at 127.0.0.1:6379: Connection refused</p><p>步骤：</p><ul><li><p>cd  /usr/local/bin</p></li><li><p>redis-check-aof –fix appendonly.aof    </p></li><li><p>重启redis</p></li></ul><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h4><ul><li>appendfsync always<ul><li>始终同步，每次redis的写入都会立刻计入日志，性能较差但数据完整性比较好</li></ul></li><li>appendfsync everysec<ul><li>每秒同步，每次记录日志一次，如果宕机，本秒的数据可能丢失</li></ul></li><li>appendfsync no<ul><li>redis不主动进行同步，把同步时机交给操作系统</li></ul></li></ul><h4 id="Rewirte压缩"><a href="#Rewirte压缩" class="headerlink" title="Rewirte压缩"></a>Rewirte压缩</h4><p>重写压缩操作</p><p>概念：</p><p>​    AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时, Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令bgrewriteaof。</p><p>原理：</p><p>​    AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename) , redis4.0版本后的重写，实质上就是把rdb的快照，以二进制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p><p><strong>大于128M才会重写</strong></p><p>重写流程</p><ul><li>bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</li><li>主进程fork出子进程执行写操作，保证主进程不会阻塞。</li><li>子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_ buf缓冲区和aof_ rewrite_ buf 重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</li><li>子进程写完新的AOF文件后,向主进程发信号,父进程更新统计信息。</li><li>主进程把aof_ rewrite_ _buf 中的数据写入到新的AOF文件。</li><li>使用新的AOF文件覆盖旧的AOF文件,完成AOF重写。。</li></ul><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li>备份机制更加文件，丢失数据概率更低</li><li>可读的日志文本，通过操作APO 文件，可以处理误操作。</li></ul><h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4><ul><li>比起RDB占用更多的磁盘空间</li><li>恢复备份速度要慢</li><li>每次读写都同步的话，有一定的性能压力</li><li>存在个别Bug，造成不能恢复</li></ul><p>==<strong>如果  RDB  和 AOF 同时开启，系统默认去加载 AOF的数据</strong>==</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>==<strong>一主多从</strong>==</p><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>​    主机数据更新后根据配置和策略，主动同步到备用机的 master/slaver机制，Master以写为主,，Slave以读为主。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802130815.png"></p><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul><li>读写分离，性能扩展</li><li>容灾快速恢复</li></ul><h4 id="搭建一主多从"><a href="#搭建一主多从" class="headerlink" title="搭建一主多从"></a>搭建一主多从</h4><ul><li><p>创建 /myredis  文件夹</p></li><li><p>复制redis.conf  配置文件到  /myredis</p></li><li><p>创建一主两从，创建三个配置文件</p><ul><li>redis6379.conf</li><li>redis6380.conf</li><li>redis6381.conf</li></ul></li><li><p>在配置文件中写入内容</p></li></ul><pre class=" language-java"><code class="language-java">include <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>confpidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6379<span class="token punctuation">.</span>pidport <span class="token number">6379</span>dbfilename dump6379<span class="token punctuation">.</span>rdb      include <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>confpidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6380<span class="token punctuation">.</span>pidport <span class="token number">6380</span>dbfilename dump6380<span class="token punctuation">.</span>rdb   include <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>confpidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6381<span class="token punctuation">.</span>pidport <span class="token number">6381</span>dbfilename dump6381<span class="token punctuation">.</span>rdb</code></pre><ul><li>启动三个redis服务<ul><li>进入所要查看的redis客户端</li><li>输入   info replication   查看当前的运行状况</li></ul></li></ul><ul><li>配从不配主<ul><li>在从机上    slaveof   &lt;ip&gt;   &lt;port&gt;</li></ul></li></ul><ul><li><p>至此实现了 6379  为主 ，6380 和6381 为从 的一主多从</p></li><li><p>在主机上写，从机可以读取到，但是在从机上写，就会报错</p><p>(error) READONLY You can’t write against a read only replica.</p></li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>当从机接上主服务之后，从服务器向主服务发送数据同步消息</li><li>主服务器接到从服务器发送过来请求同步的消息，把主服务器数据进行持久化，rdb文件，把rdb文件发送从服务器，从服务器拿到rdb进行读取（全量复制）</li><li>之后每次主服务器进行写出操作后，会<strong>主动</strong>和从服务器进行数据同步（增量复制）</li></ul><h4 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h4><ul><li>一主二仆：  <strong>一个主机多个从机</strong><ul><li>从机挂掉后重启之后会成为一个新的主机，不会和原来的主机关联</li><li>重新成为从机之后，会把主机所有数据都复制过来</li><li>主服务器挂掉后，从服务器还是会连着挂掉的主服务器</li><li>主服务器重启之后还是主服务器，连接着原来的从服务器</li></ul></li></ul><ul><li>薪火相传：<strong>一个主机一个从机，从机之后还有从机</strong><ul><li>特点和一主二仆一样</li></ul></li></ul><ul><li>反客为主：主的挂掉，从机上位<ul><li>主机挂掉后，从机输入   slaveof  no one ，从机成为主机</li><li>原主机的从机都成为了 上位的这个从机  的从机</li><li>如果原主机复活，则原主机会成为  新主机的从机</li><li>这个得手动设置，如果想自动设置，需要==<strong>哨兵模式</strong>==</li></ul></li></ul><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><p>==<strong>反客为主的自动版</strong>==，能够后台监控主机是否故障，如果故障了根据<strong>投票数</strong>自动将从机转为主机</p><ul><li>cd   /myredis</li><li>vim sentinel.conf</li><li>添加：  sentinel monitor mymaster 192.168.130.172 6379  1</li></ul><p>mymaster 是为监控对象起的服务器名称，1 代表至少有一个哨兵同意迁移</p><ul><li>redis-sentinel  /myredis/sentinel.conf</li><li>设置哨兵成功</li></ul><p>哨兵模式涉及到选取哪个从机当主机的问题，选择的条件依次为：</p><ul><li>replica-priority 100，值越小优先级越高，优先级在redis.conf中默认 为100</li><li>偏移量大的优先，偏移量是指获得原主机数据最全的</li><li>选择 runid 最小的，每个redis实例启动后都会随机生成一个40位的 runid</li></ul><p>【投票】<strong>（半数原则）</strong></p><p>​    当任何一个Sentinel发现被监控的Master下线时，会通知其它的Sentinel开会，投票确定该Master是否下线（半数以上，所以sentinel<strong>通常配奇数个</strong>）。</p><h4 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h4><p>​    由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟 ，当系统很繁忙的时候，延迟问题会更加严重,，Slave机器数量的增加也会使这个问题更加严重。</p><h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><p>问题：我们已经部署好了redis，并且能启动一个redis，实现数据的读写，为什么还要学习redis集群？</p><p>（1）单个redis存在不稳定性。当redis服务宕机了，就没有可用的服务了。</p><p>（2）单个redis的读写能力是有限的。</p><p><strong>总结：redis集群是为了强化redis的读写能力</strong></p><h4 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h4><p>Redis集群实现了对Redis的水平扩容，即启动N个redis节点(节点只能是Master)，将整个数据库分布存储在这N个节点中，每个节点存储总数据1/N。<br>Redis集群通过分区( partition )来提供一定程度的可用性 ( availability ) ：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p><p>任何一个节点都可以作为集群的入口</p><h4 id="搭建reids集群"><a href="#搭建reids集群" class="headerlink" title="搭建reids集群"></a>搭建reids集群</h4><ul><li><p>删除  .rdb 和  .aof 文件</p></li><li><p>制作6个实例，6379，6380，6381，6389，6390，6391</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//其他几个除了端口号需要改为自己的，其他的都不要动</span>include <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>confpidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6379<span class="token punctuation">.</span>pidport <span class="token number">6379</span>dbfilename dump6379<span class="token punctuation">.</span>rdb  cluster<span class="token operator">-</span>enabled yes <span class="token comment" spellcheck="true">//开启集群</span>cluster<span class="token operator">-</span>config<span class="token operator">-</span>file nodes<span class="token operator">-</span><span class="token number">6379</span><span class="token punctuation">.</span>conf <span class="token comment" spellcheck="true">//设置节点的配置文件名称</span>cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token number">15000</span>  <span class="token comment" spellcheck="true">//设置节点失联时间，超过该时间(毫秒)，集群自动进行主从切换</span>【补充：<span class="token string">":%s/6379/6380"</span> 可以把<span class="token number">6379</span>全局替换为<span class="token number">6380</span>，  <span class="token string">"::set nu"</span> 是显示行号】</code></pre><ul><li><p>启动6个redis</p></li><li><p>cd /opt/redis-6.2.5/src</p></li><li><p>redis-cli    –cluster   create    –cluster-replicas   1   192.168.130.172:6379    192.168.130.172:6380    192.168.130.172:6381    192.168.130.172:6389     192.168.130.172:6390     192.168.130.172:6391  </p></li></ul><p>【这里必须得用真实IP地址 ， 这里的 1 代表采用最简单的方式配置集群，一台主机，一台从机，正好三组】</p><ul><li><p>redis-cli -c -p 6379或者6380或者6381     只要是主机都可以连接到集群，设置数据会==<strong>自动切换</strong>==到相应的写主机。</p></li><li><p>cluster nodes      可以查看集群信息</p></li></ul><h4 id="集群的结点分配"><a href="#集群的结点分配" class="headerlink" title="集群的结点分配"></a>集群的结点分配</h4><p>==<strong>一个集群至少有三个主节点</strong>==</p><p>​    分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库不在一个IP地址上，这也就是为什么上面说的必须用真实的IP的原因。</p><h4 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h4><p>​    一个Redis集群包含 16384个  插槽（hash  slot），数据库中的每一个键都属于这 16384个插槽的一个。</p><p>​    集群使用公式==**CRC16(key) % 16384 **==来计算key属于哪个槽。</p><p>​    集群中每个节点都负责一部分插槽</p><p>​    上述集群的插槽分部情况</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210802164752.png"></p><h4 id="集群中插入值"><a href="#集群中插入值" class="headerlink" title="集群中插入值"></a>集群中插入值</h4><p>​    在redis-cli每次录入、查询键值， redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽,，redis 会报错，告知应前往的redis实例地址和端口。redis-cli户端提供了  - c   参数实现自动重定向。<br> 比如<strong>redis-cli -C- p6379 登入后,再录入、查询键值对可以自动重定向</strong>。</p><p>通过{}来定义组的概念，从而是key中{}内相同的内容的键值对昂达哦一个slot中去</p><pre class=" language-redis"><code class="language-redis">mset  name&#123;user&#125; Tom   age&#123;user&#125;  20</code></pre><h4 id="查询集群中的值"><a href="#查询集群中的值" class="headerlink" title="查询集群中的值"></a>查询集群中的值</h4><ul><li>cluser keyslot &lt;key&gt;   <ul><li>计算 key 对应的插槽</li></ul></li><li>cluster countkeysinslot  插槽值<ul><li>返回该插槽中有几个key，只能在插槽对应的redis下操作</li></ul></li></ul><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p>如果主机下线，从机会替换主机成为新主机，主机上线之后成为新主机的从机</p><p>如果某一段插槽的主从都挂掉，并且  cluster-require-full-coverage 为</p><ul><li> yes，那么整个集群都挂掉</li><li>  no ，则只是该插槽的数据不能用和无法存储</li></ul><h4 id="集群的jedis开发"><a href="#集群的jedis开发" class="headerlink" title="集群的jedis开发"></a>集群的jedis开发</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisClusterDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      HostAndPort hostAndPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.130.172"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      JedisCluster jedisCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>hostAndPort<span class="token punctuation">)</span><span class="token punctuation">;</span>      String set <span class="token operator">=</span> jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         jedisCluster<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Redis集群的不足"><a href="#Redis集群的不足" class="headerlink" title="Redis集群的不足"></a>Redis集群的不足</h4><ul><li>多键操作不被支持，需要其他方法实现</li><li>多键的Redis事务是不被支持的，lua脚本不被支持</li><li>由于Redis集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster ,需要整体迁移而不是逐步过渡,复杂度较大。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p> 缓存穿透是指缓存和数据库中都没有的数据，而用户不断的发起请求。</p><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>对空值缓存</p><p>​     如果一个查询返回的数据为空(不管是数据是否不存在)，我们仍然把这个空结果( null )进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</p></li><li><p>设置可访问的名单(白名单)</p><p>   使用bitmaps类型定义一个可以访问的名单 ，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截,不允许访问。</p></li><li><p>采用布隆过滤器</p><p>​    布隆过滤器( Bloom Filter )是1970 年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数(哈希函数)。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。将所有可能存在的数据哈希到一个足够大的bitmaps 中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p></li><li><p>进行实时监控</p><p>   当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</p></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>​    缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>预先设置热门数据：在redis高峰访问之前，把一些热门数据提前存到redis里面，加大这些热门数据的key的时长，或者设置为永不过时</li><li>实时调整：现场监控哪些数据热门，实时调整key的过期时长</li><li>使用锁</li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><p>   缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>构建多级缓存架构：Nginx缓存 +  redis 缓存  +  其他缓存（ehcache）</p></li><li><p>使用锁或队列：</p><p>​     用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。但是不适用高并发情况。</p></li><li><p>设置过期标志更新缓存<br>   记录缓存数据是否过期(设置提前量) ,如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p></li><li><p>将缓存失效时间分散开下。</p><pre><code>  比如我们可以在原有的失效时间基础上增加一个随机值,比如1-5 分钟的随机值，这样每-一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</code></pre></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>​    随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统的多进程和多线程，并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM的互斥机制来控制共享资源的访问,这就是分布式锁要解决的问题!。</p><ul><li><p>基于数据类实现分布式锁</p></li><li><p>基于缓存，redis等</p></li><li><p>基于Zookeeper</p></li></ul><p>每一种分布式锁解决方案都有各自的优缺点</p><ul><li>性能：redis最高</li><li>可靠性：zookeeper最高</li></ul><h4 id="使用redis实现分布式锁"><a href="#使用redis实现分布式锁" class="headerlink" title="使用redis实现分布式锁"></a>使用redis实现分布式锁</h4><ul><li><p>使用 setnx 上锁，通过  del 释放锁</p></li><li><p>如果锁一直没有释放，设置key过期时间，自动释放</p></li><li><p>如果上锁之后突然出现异常，无法设置过期时间了，只需在上锁的同时设置过期时间就可以</p><ul><li>set  &lt;key&gt;  &lt;value&gt;  nx   ex   时长</li></ul></li></ul><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>​    Redis ACL是Access Control List (访问控制列表)的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。   </p><p>​    在Redis 5版本之前, Redis安全规则只有密码控制还有通过rename来调整高危命令比如flushdb ，KEYS *， shutdown 等。    </p><p> Redis 6则提供ACL的功能对用户进行更细粒度的权限控制：</p><ul><li>接入权限，用户名和密码</li><li>可以执行的命令</li><li>可以操作的KEY</li></ul><p>常用指令</p><ul><li><p>acl list  </p><ul><li>命令展示用户权限列表</li></ul></li><li><p>acl  set setuser &lt;username&gt;</p><ul><li>添加用户</li></ul></li><li><p>alc  whoami</p><ul><li>查看当前用户是谁</li></ul></li><li><p>acl   setuser    &lt;username&gt;   on   &gt;密码    ~cache:*   +get </p><ul><li>key前面加 cache：    并且只能对get操作</li></ul></li><li><p>auth    &lt;username&gt;     &lt;password&gt;</p><ul><li>切换用户</li></ul></li></ul><h1 id="跳跃表（跳表）"><a href="#跳跃表（跳表）" class="headerlink" title="跳跃表（跳表）"></a>跳跃表（跳表）</h1><h2 id="1-跳跃表的原理"><a href="#1-跳跃表的原理" class="headerlink" title="1. 跳跃表的原理"></a>1. 跳跃表的原理</h2><p>   学过数据结构的都知道，在单链表中查询一个元素的时间复杂度为O(n)，即使该单链表是有序的，我们也不能通过2分的方式缩减时间复杂度。 </p><p><img src="images/20161205210928206" alt="img"></p><p>   如上图，我们要查询元素为55的结点，必须从头结点，循环遍历到最后一个节点，不算-INF(负无穷)一共查询8次。那么用什么办法能够用更少的次数访问55呢？最直观的，当然是新开辟一条捷径去访问55。 </p><p><img src="images/20161205211105653"></p><p>   如上图，我们要查询元素为55的结点，只需要在L2层查找4次即可。在这个结构中，查询结点为46的元素将耗费最多的查询次数5次。即先在L2查询46，查询4次后找到元素55，因为链表是有序的，46一定在55的左边，所以L2层没有元素46。然后我们退回到元素37，到它的下一层即L1层继续搜索46。非常幸运，我们只需要再查询1次就能找到46。这样一共耗费5次查询。</p><p>那么，如何才能更快的搜寻55呢？有了上面的经验，我们就很容易想到，再开辟一条捷径。 </p><p><img src="images/20161205211246498" alt="这里写图片描述"></p><p>   如上图，我们搜索55只需要2次查找即可。这个结构中，查询元素46仍然是最耗时的，需要查询5次。即首先在L3层查找2次，然后在L2层查找2次，最后在L1层查找1次，共5次。很显然，这种思想和2分非常相似，那么我们最后的结构图就应该如下图。</p><p><img src="images/20161205211539787"></p><p>​    我们可以看到，最耗时的访问46需要6次查询。即L4访问55，L3访问21、55，L2访问37、55，L1访问46。我们直觉上认为，这样的结构会让查询有序链表的某个元素更快。那么究竟算法复杂度是多少呢？</p><p>​    如果有n个元素，因为是2分，所以层数就应该是log n层 (本文所有log都是以2为底)，再加上自身的1层。以上图为例，如果是4个元素，那么分层为L3和L4，再加上本身的L2，一共3层；如果是8个元素，那么就是3+1层。最耗时间的查询自然是访问所有层数，耗时logn+logn，即2logn。为什么是2倍的logn呢？我们以上图中的46为例，查询到46要访问所有的分层，每个分层都要访问2个元素，中间元素和最后一个元素。所以时间复杂度为O(logn)。</p><p>​    至此为止，我们引入了最理想的跳跃表，但是如果想要在上图中插入或者删除一个元素呢？比如我们要插入一个元素22、23、24……，自然在L1层，我们将这些元素插入在元素21后，那么L2层，L3层呢？我们是不是要考虑插入后怎样调整连接，才能维持这个理想的跳跃表结构。我们知道，平衡二叉树的调整是一件令人头痛的事情，左旋右旋左右旋……一般人还真记不住，而调整一个理想的跳跃表将是一个比调整平衡二叉树还复杂的操作。幸运的是，我们并不需要通过复杂的操作调整连接来维护这样完美的跳跃表。有一种基于概率统计的插入算法，也能得到时间复杂度为O(logn)的查询效率，这种跳跃表才是我们真正要实现的。</p><h2 id="2-跳跃表的实现步骤分析"><a href="#2-跳跃表的实现步骤分析" class="headerlink" title="2. 跳跃表的实现步骤分析"></a>2. 跳跃表的实现步骤分析</h2><p>​    先讨论插入，我们先看理想的跳跃表结构，L2层的元素个数是L1层元素个数的1/2，L3层的元素个数是L2层的元素个数的1/2，以此类推。从这里，我们可以想到，只要在插入时尽量保证上一层的元素个数是下一层元素的1/2，我们的跳跃表就能成为理想的跳跃表。那么怎么样才能在插入时保证上一层元素个数是下一层元素个数的1/2呢？很简单，抛硬币就能解决了！假设元素X要插入跳跃表，很显然，L1层肯定要插入X。那么L2层要不要插入X呢？我们希望上层元素个数是下层元素个数的1/2，所以我们有1/2的概率希望X插入L2层，那么抛一下硬币吧，正面就插入，反面就不插入。那么L3到底要不要插入X呢？相对于L2层，我们还是希望1/2的概率插入，那么继续抛硬币吧！以此类推，元素X插入第n层的概率是(1/2)的n次。这样，我们能在跳跃表中插入一个元素了。</p><p>在此还是以上图为例：跳跃表的初试状态如下图，表中没有一个元素： </p><p><img src="images/20161205212059243" alt="这里写图片描述"></p><p>如果我们要插入元素2，首先是在底部插入元素2，如下图： </p><p><img src="images/20161205212313963" alt="这里写图片描述"></p><p>然后我们抛硬币，结果是正面，那么我们要将2插入到L2层，如下图: </p><p><img src="images/20161205212409123"></p><p>继续抛硬币，结果是反面，那么元素2的插入操作就停止了，插入后的表结构就是上图所示。接下来，我们插入元素33，跟元素2的插入一样，现在L1层插入33，如下图： </p><p><img src="images/20161205212458264" alt="这里写图片描述"></p><p>然后抛硬币，结果是反面，那么元素33的插入操作就结束了，插入后的表结构就是上图所示。接下来，我们插入元素55，首先在L1插入55，插入后如下图： </p><p><img src="images/20161205212553339" alt="这里写图片描述"></p><p>然后抛硬币，结果是正面，那么L2层需要插入55，如下图： </p><p><img src="images/20161205212659309" alt="这里写图片描述"></p><p>继续随机，结果又是正面，那么L3层需要插入55，如下图： </p><p><img src="https://img-blog.csdn.net/20161205212712590" alt="这里写图片描述"></p><p>​    以此类推，我们插入剩余的元素。当然因为规模小，结果很可能不是一个理想的跳跃表。但是如果元素个数n的规模很大，学过概率论的同学都知道，最终的表结构肯定非常接近于理想跳跃表。</p><p>​    当然，这样的分析在感性上是很直接的，但是时间复杂度的证明实在复杂，在此我就不深究了，感兴趣的可以去看关于跳跃表的paper。再讨论删除，删除操作没什么讲的，直接删除元素，然后调整一下删除元素后的指针即可。跟普通的链表删除操作完全一样。再来讨论一下时间复杂度，插入和删除的时间复杂度就是查询元素插入位置的时间复杂度，这不难理解，所以是O(logn)。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><p>在章节2中，我们采用抛硬币的方式来决定新元素插入的最高层数，这当然不能在程序中实现。代码中，我们采用随机数生成的方式来获取新元素插入的最高层数。我们先估摸一下n的规模，然后定义跳跃表的最大层数maxLevel，那么底层，也就是第0层，元素是一定要插入的，概率为1；最高层，也就是maxLevel层，元素插入的概率为1/2^maxLevel。</p><p>我们先随机生成一个范围为0~2^maxLevel-1  的一个整数r。那么元素r小于2^(maxLevel-1) 的概率为1/2，r小于2^(maxLevel-2) 的概率为1/4，……，r小于2的概率为1/2^(maxLevel-1) ，r小于1的概率为1/2^maxLevel。</p><p>举例，假设maxLevel为4，那么r的范围为0~15，则r小于8的概率为1/2，r小于4的概率为1/4，r小于2的概率为1/8，r小于1的概率为1/16。1/16正好是maxLevel层插入元素的概率，1/8正好是maxLevel层插入的概率，以此类推。</p><p>通过这样的分析，我们可以先比较r和1，如果r&lt;1，那么元素就要插入到maxLevel层以下；否则再比较r和2，如果r&lt;2，那么元素就要插入到maxLevel-1层以下；再比较r和4，如果r&lt;4，那么元素就要插入到maxLevel-2层以下……如果r&gt;2^(maxLevel - 1)，那么元素就只要插入在底层即可。</p><p>以上分析是随机数算法的关键。算法跟实现跟语言无关，但是Java程序员还是更容易看明白Java代码实现的跳跃表</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***************************  SkipList.java  *********************/</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxLevel<span class="token punctuation">;</span>    <span class="token keyword">private</span> SkipListNode<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> powers<span class="token punctuation">;</span>    <span class="token keyword">private</span> Random rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SkipList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">SkipList</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        maxLevel <span class="token operator">=</span> i<span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipListNode</span><span class="token punctuation">[</span>maxLevel<span class="token punctuation">]</span><span class="token punctuation">;</span>        powers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxLevel<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> maxLevel<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            root<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">choosePowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">choosePowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        powers<span class="token punctuation">[</span>maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2^maxLevel - 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxLevel <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>           powers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> powers<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 2^(j+1)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">chooseLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> powers<span class="token punctuation">[</span>maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxLevel<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> powers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return a level &lt; the highest level;</span>        <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// return the highest level;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// make sure (with isEmpty()) that search() is called for a nonempty list;</span>    <span class="token keyword">public</span> T <span class="token function">search</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> lvl<span class="token punctuation">;</span>        SkipListNode<span class="token operator">&lt;</span>T<span class="token operator">></span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// find the highest nonnull</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>lvl <span class="token operator">=</span> maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> lvl <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">;</span> lvl<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// level;</span>        prev <span class="token operator">=</span> curr <span class="token operator">=</span> root<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// success if equal;</span>                 <span class="token keyword">return</span> curr<span class="token punctuation">.</span>key<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// if smaller, go down,</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>lvl <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// if possible</span>                      <span class="token keyword">return</span> null<span class="token punctuation">;</span>                       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curr <span class="token operator">==</span> root<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// by one level</span>                      curr <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token operator">--</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// starting from the</span>                 <span class="token keyword">else</span> curr <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token operator">--</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// predecessor which</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// can be the root;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// if greater,</span>                 prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// go to the next</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// non-null node</span>                      curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// on the same level</span>                 <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// or to a list on a lower level;</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>lvl<span class="token operator">--</span><span class="token punctuation">;</span> lvl <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">;</span> lvl<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>lvl <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                           curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token keyword">else</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SkipListNode<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> curr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipListNode</span><span class="token punctuation">[</span>maxLevel<span class="token punctuation">]</span><span class="token punctuation">;</span>        SkipListNode<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> prev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipListNode</span><span class="token punctuation">[</span>maxLevel<span class="token punctuation">]</span><span class="token punctuation">;</span>        SkipListNode<span class="token operator">&lt;</span>T<span class="token operator">></span> newNode<span class="token punctuation">;</span>        <span class="token keyword">int</span> lvl<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        curr<span class="token punctuation">[</span>maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">[</span>maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        prev<span class="token punctuation">[</span>maxLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>lvl <span class="token operator">=</span> maxLevel <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> lvl <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> lvl<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 prev<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">=</span> curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// go to the next</span>                curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">=</span> curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// if smaller;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>curr<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// don't </span>                <span class="token keyword">return</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// include duplicates;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lvl <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">// go one level down</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// if not the lowest</span>                      curr<span class="token punctuation">[</span>lvl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">[</span>lvl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// level, using a link</span>                      prev<span class="token punctuation">[</span>lvl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// either from the root</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// or from the predecessor;</span>                     curr<span class="token punctuation">[</span>lvl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>lvl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                     prev<span class="token punctuation">[</span>lvl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">[</span>lvl<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        lvl <span class="token operator">=</span> <span class="token function">chooseLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// generate randomly level </span>        newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipListNode</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>lvl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// for newNode;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lvl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// initialize next fields of</span>            newNode<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> curr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// newNode and reset to newNode</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// either fields of the root</span>                 root<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// or next fields of newNode's</span>            <span class="token keyword">else</span> prev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// predecessors;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书城项目</title>
      <link href="2021/07/25/%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
      <url>2021/07/25/%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="书城项目"><a href="#书城项目" class="headerlink" title="书城项目"></a>书城项目</h1><h2 id="第一阶段-编写前端页面和表单验证"><a href="#第一阶段-编写前端页面和表单验证" class="headerlink" title="第一阶段 编写前端页面和表单验证"></a>第一阶段 编写前端页面和表单验证</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/css/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo_img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/img/logo.gif<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_banner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欢迎登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regist.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>立即注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg_cont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>errorMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入用户名和密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_success.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub_btn<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                尚硅谷书城.Copyright <span class="token entity" title="&copy;">&amp;copy;</span>2015            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="登录成功页面"><a href="#登录成功页面" class="headerlink" title="登录成功页面"></a>登录成功页面</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>尚硅谷会员注册页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/css/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    h<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        h<span class="token number">1</span> a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo_img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/img/logo.gif<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>欢迎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>um_span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>韩总<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>光临尚硅谷书城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../order/order.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的订单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎回来 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>转到主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                尚硅谷书城.Copyright <span class="token entity" title="&copy;">&amp;copy;</span>2015            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="注册页面-表单验证"><a href="#注册页面-表单验证" class="headerlink" title="注册页面+表单验证"></a>注册页面+表单验证</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>尚硅谷会员注册页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/css/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/script/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 页面加载完成之后</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 给注册绑定单击事件</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sub_btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 验证用户名：必须由字母，数字下划线组成，并且长度为5到12位</span>                    <span class="token comment" spellcheck="true">//1 获取用户名输入框里的内容</span>                    <span class="token keyword">var</span> usernameText <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2 创建正则表达式对象</span>                    <span class="token keyword">var</span> usernamePatt <span class="token operator">=</span> <span class="token regex">/^\w&amp;#123;5,12&amp;#125;$/</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3 使用test方法验证</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>usernamePatt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>usernameText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4 提示用户结果</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"用户名不合法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 验证密码：必须由字母，数字下划线组成，并且长度为5到12位</span>                    <span class="token comment" spellcheck="true">//1 获取用户名输入框里的内容</span>                    <span class="token keyword">var</span> passwordText <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2 创建正则表达式对象</span>                    <span class="token keyword">var</span> passwordPatt <span class="token operator">=</span> <span class="token regex">/^\w&amp;#123;5,12&amp;#125;$/</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3 使用test方法验证</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>passwordPatt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>passwordText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4 提示用户结果</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"密码不合法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 验证确认密码：和密码相同</span>                    <span class="token comment" spellcheck="true">//1 获取确认密码内容</span>                    <span class="token keyword">var</span> repwdText <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#repwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2 和密码相比较</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>repwdText <span class="token operator">!=</span> passwordText<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//3 提示用户</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"确认密码和密码不一致！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 邮箱验证：xxxxx@xxx.com</span>                    <span class="token comment" spellcheck="true">//1 获取邮箱里的内容</span>                    <span class="token keyword">var</span> emailText <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2 创建正则表达式对象</span>                    <span class="token keyword">var</span> emailPatt <span class="token operator">=</span> <span class="token regex">/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.&amp;#123;1,2&amp;#125;[a-z]+)+$/</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3 使用test方法验证是否合法</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>emailPatt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>emailText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4 提示用户</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"邮箱格式不合法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 验证码：现在只需要验证用户已输入。因为还没讲到服务器。验证码生成。</span>                    <span class="token keyword">var</span> codeText <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#code"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//去掉验证码前后空格</span>                    <span class="token comment" spellcheck="true">// alert("去空格前：["+codeText+"]")</span>                    codeText <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>codeText<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// alert("去空格后：["+codeText+"]")</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>codeText <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> codeText <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4 提示用户</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"验证码不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 去掉错误信息</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token number">.</span>login_form&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">420</span>px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo_img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/img/logo.gif<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_banner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欢迎注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>注册页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>errorMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>                                           <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>                                           <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>确认密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认密码<span class="token punctuation">"</span></span>                                           <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repwd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repwd<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>电子邮件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入邮箱地址<span class="token punctuation">"</span></span>                                           <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itxt<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../static/img/code.bmp<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">40</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub_btn<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                尚硅谷书城.Copyright <span class="token entity" title="&copy;">&amp;copy;</span>2015            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><h3 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> book<span class="token punctuation">;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> book<span class="token punctuation">;</span> <span class="token keyword">use</span> book<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>email<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin@atguigu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span></code></pre><h3 id="user表对应的javaBean"><a href="#user表对应的javaBean" class="headerlink" title="user表对应的javaBean"></a>user表对应的javaBean</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>   <span class="token keyword">private</span> String username<span class="token punctuation">;</span>   <span class="token keyword">private</span> String password<span class="token punctuation">;</span>   <span class="token keyword">private</span> String email<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//此处省略其他必要的方法</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="编写工具类-JdbcUtils"><a href="#编写工具类-JdbcUtils" class="headerlink" title="编写工具类  JdbcUtils"></a>编写工具类  JdbcUtils</h3><ul><li>先导入druid和mysql连接包</li></ul><p>配置文件，jdbc.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">172161</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/book?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">maxActive</span><span class="token punctuation">=</span><span class="token attr-value">10</span></code></pre><h3 id="JdbcUtils工具类-测试"><a href="#JdbcUtils工具类-测试" class="headerlink" title="JdbcUtils工具类 + 测试"></a>JdbcUtils工具类 + 测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DruidDataSource dataSource<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            dataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DruidDataSource<span class="token punctuation">)</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取数据库连接池中的连接     * @return 如果返回 null,说明获取连接失败&lt;br/>有值就是获取连接成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 关闭连接     * @param connection     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Close</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Connection connection <span class="token operator">=</span> er<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      er<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="编写-BaseDao"><a href="#编写-BaseDao" class="headerlink" title="编写 BaseDao"></a>编写 BaseDao</h3><p>对数据库的增删改查操作</p><ul><li>先导入DBUtils</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 执行 Insert/Update/Delete操作     * @param sql     * @param args     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询返回一个 javaBean的sql语句     * @param type     * @param sql     * @param args     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">queryForOne</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询返回多个 javaBean的sql语句     * @param type     * @param sql     * @param args     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">queryForList</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>T<span class="token operator">></span> query <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询返回特殊值的sql语句     * @param sql     * @param args     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">queryForSingleValue</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="UserDao及IMPL以及其测试"><a href="#UserDao及IMPL以及其测试" class="headerlink" title="UserDao及IMPL以及其测试"></a>UserDao及IMPL以及其测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名字查询用户，用于验证密码是否可用     * @return     */</span>    User <span class="token function">queryByUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名字和密码查询用户，用于登录     * @return     */</span>    User <span class="token function">queryByUsernameAndPassword</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存用户，用于注册     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from t_user where username = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token function">queryForOne</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByUsernameAndPassword</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      String sql <span class="token operator">=</span> <span class="token string">"select * from t_user where username = ? and password = ?"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">queryForOne</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into t_user(`username`,`password`,`email`) values(?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUserByUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span><span class="token string">"whw"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUserByUsernameAndPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserByUsernameAndPassword</span><span class="token punctuation">(</span><span class="token string">"whw"</span><span class="token punctuation">,</span> <span class="token string">"172161"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误，登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"1111"</span><span class="token punctuation">,</span> <span class="token string">"172161"</span><span class="token punctuation">,</span> <span class="token string">"whw1@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="UserService及IMPL以及其测试类"><a href="#UserService及IMPL以及其测试类" class="headerlink" title="UserService及IMPL以及其测试类"></a>UserService及IMPL以及其测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册用户     * @param user     */</span>    <span class="token keyword">void</span>  <span class="token function">registUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户登录     * @param user     * @return 如果返回 null，说明登录失败，返回有值，是登录成功     */</span>    User <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断用户名是否冲突     * @param username     * @return 返回 true 表示用户名已存在，返回 false 表示用户名可用     */</span>    <span class="token keyword">boolean</span> <span class="token function">existsUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserByUsernameAndPassword</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">existsUsername</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">registUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"aaji168"</span><span class="token punctuation">,</span><span class="token string">"777777"</span><span class="token punctuation">,</span><span class="token string">"aaji168@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">registUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"bbji168"</span><span class="token punctuation">,</span><span class="token string">"666666"</span><span class="token punctuation">,</span><span class="token string">"bbji168@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"whw"</span><span class="token punctuation">,</span> <span class="token string">"172161"</span><span class="token punctuation">,</span> <span class="token string">"whw168@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">existsUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">existsUsername</span><span class="token punctuation">(</span><span class="token string">"whw168"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名可用~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现用户注册的功能"><a href="#实现用户注册的功能" class="headerlink" title="实现用户注册的功能"></a>实现用户注册的功能</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210726074231.png"></p><h4 id="为所有页面添加base标签"><a href="#为所有页面添加base标签" class="headerlink" title="为所有页面添加base标签"></a>为所有页面添加base标签</h4><ul><li><p>添加base标签   &lt;base href = “<a href="http://localhost:8080/book/&quot;&gt;">http://localhost:8080/book/&quot;&gt;</a></p></li><li><p>修改页面内的所有地址  </p><ul><li>比如：<ul><li>资源引用地址&lt;link type = “text/css” rel=”stylesheet” href=”static/css/style.css”&gt;</li><li>表单提交地址：&lt;form action=”registServlet”&gt;</li></ul></li></ul></li></ul><h4 id="RegistServlet代码"><a href="#RegistServlet代码" class="headerlink" title="RegistServlet代码"></a>RegistServlet代码</h4><p>后续会继续优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求的参数</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String email <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//校验验证码是否正确，此处先用abcdef，后面会用动态的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用户名存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">existsUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转发到注册页面</span>                req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/regist.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//用户名可用，注册用户并转到注册成功页面</span>                userService<span class="token punctuation">.</span><span class="token function">registUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/regist_success.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//验证码错误，跳回注册页面</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/regist.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="用户登录功能"><a href="#用户登录功能" class="headerlink" title="用户登录功能"></a>用户登录功能</h3><h4 id="LoginServlet代码"><a href="#LoginServlet代码" class="headerlink" title="LoginServlet代码"></a>LoginServlet代码</h4><p>后续会继续优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求的参数</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户名或者密码错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转发到登录页面</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转发到登录成功页面</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/login_success.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><h3 id="页面JSP动态化"><a href="#页面JSP动态化" class="headerlink" title="页面JSP动态化"></a>页面JSP动态化</h3><ul><li>在 html 页面顶行添加 page 指令。</li><li>修改文件后缀名为：.jsp</li><li>使用 IDEA 搜索替换.html 为.jsp(快捷键：Ctrl+Shift+R)</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210726090815.png"></p><h3 id="抽取页面相同的内容"><a href="#抽取页面相同的内容" class="headerlink" title="抽取页面相同的内容"></a>抽取页面相同的内容</h3><h4 id="页面的头部"><a href="#页面的头部" class="headerlink" title="页面的头部"></a>页面的头部</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><%--动态获取URL，这个是比较重要的--%><%   String basePath = request.getScheme()           +"://"           + request.getServerName()           + ":"           + request.getServerPort()           + request.getContextPath()           + "/";   pageContext.setAttribute("basePath",basePath);%><base href="<%=basePath%>"><link type="text/css" rel="stylesheet" href="static/css/style.css"><script type="text/javascript" src="static/script/jquery-1.7.2.js"></script></code></pre><h4 id="页面的页脚"><a href="#页面的页脚" class="headerlink" title="页面的页脚"></a>页面的页脚</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><div id="bottom">        <span>            HAN书城.Copyright &copy;2015        </span></div></code></pre><h4 id="登录成功后的菜单"><a href="#登录成功后的菜单" class="headerlink" title="登录成功后的菜单"></a>登录成功后的菜单</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><div>    <span>欢迎<span class="um_span">$&#123;sessionScope.user.username&#125;</span>光临HAN书城</span>    <a href="pages/order/order.jsp">我的订单</a>    <a href="userServlet?action=logout">退出登录</a>&nbsp;&nbsp;    <a href="index.jsp">返回</a></div></code></pre><h4 id="manager模块的菜单"><a href="#manager模块的菜单" class="headerlink" title="manager模块的菜单"></a>manager模块的菜单</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><div>    <a href="manager/bookServlet?action=page">图书管理</a>    <a href="order_manager.jsp">订单管理</a>    <a href="index.jsp">返回商城</a></div></code></pre><h4 id="分页条"><a href="#分页条" class="headerlink" title="分页条"></a>分页条</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><div id="page_nav">    <%--大于首页才显示--%>    <c:if test="$&#123;requestScope.page.pageNo > 1&#125;">        <a href="$&#123;requestScope.page.url&#125;&pageNo=1">首页</a>        <a href="$&#123;requestScope.page.url&#125;&pageNo=$&#123;requestScope.page.pageNo-1&#125;">上一页</a>    </c:if>    <%--页码输出的开始--%>    <c:choose>        <%-- 情况1：如果页码数小于等于5的情况，页码的范围是：1-总页码 --%>        <c:when test="$&#123;requestScope.page.pageTotal <= 5&#125;">            <c:set var="begin" value="1"/>            <c:set var="end" value="$&#123;requestScope.page.pageTotal&#125;"/>        </c:when>        <%-- 情况2 ：总页码大于5的情况，假设一共10页--%>        <c:when test="$&#123;requestScope.page.pageTotal > 5&#125;">            <c:choose>                <%--① 当前页码为前面3个：1,2,3的情况，页码范围为：1-5--%>                <c:when test="$&#123;requestScope.page.pageNo <=3 &#125;">                    <c:set var="begin" value="1"/>                    <c:set var="end" value="5"/>                </c:when>                <%-- ② 当前页面为最后3个，8,9，10，页码范围是：总页码减4 - 总页码--%>                <c:when test="$&#123;requestScope.page.pageNo > requestScope.page.pageTotal - 3 &#125;">                    <c:set var="begin" value="$&#123;requestScope.page.pageTotal - 4&#125;"/>                    <c:set var="end" value="$&#123;requestScope.page.pageTotal&#125;"/>                </c:when>                <%-- ③ 4，5，6，7，页码范围是：当前页码-2 --当前页码+2 --%>                <c:otherwise>                    <c:set var="begin" value="$&#123;requestScope.page.pageNo - 2&#125;"/>                    <c:set var="end" value="$&#123;requestScope.page.pageNo + 2&#125;"/>                </c:otherwise>            </c:choose>        </c:when>    </c:choose>    <c:forEach begin="$&#123;begin&#125;" end="$&#123;end&#125;" var="i">        <c:if test="$&#123;i == requestScope.page.pageNo&#125;">            【$&#123;i&#125;】        </c:if>        <c:if test="$&#123;i != requestScope.page.pageNo&#125;">            <a href="$&#123;requestScope.page.url&#125;&pageNo=$&#123;i&#125;">$&#123;i&#125;</a>        </c:if>    </c:forEach>    <%--页码输出的结束--%>    <%--如果是最后一页，则不显示下一页--%>    <c:if test="$&#123;requestScope.page.pageNo < requestScope.page.pageTotal&#125;">        <a href="$&#123;requestScope.page.url&#125;&pageNo=$&#123;requestScope.page.pageNo+1&#125;">下一页</a>        <a href="$&#123;requestScope.page.url&#125;&pageNo=$&#123;requestScope.page.pageTotal&#125;">末页</a>    </c:if>    共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录    到第<input value="$&#123;param.pageNo&#125;" name="pn" id="pn_input"/>页    <input id="searchPageBtn" type="button" value="确定">    <script>        $(function () &#123;            $("#searchPageBtn").click(function () &#123;                var pageNo = $("#pn_input").val();                //JavaScript中提供了一个location地址栏对象                //它有一个属性href.他可以获取浏览器地址中的地址                //href属性可读可写                location.href = "$&#123;pageScope.basePath&#125;$&#123;requestScope.page.url&#125;&pageNo=" + pageNo;            &#125;);        &#125;);    </script></div></code></pre><h3 id="登录，注册错误提示以及表单回显"><a href="#登录，注册错误提示以及表单回显" class="headerlink" title="登录，注册错误提示以及表单回显"></a>登录，注册错误提示以及表单回显</h3><p>登录回显：</p><p>​    Servlet程序端需要添加回显信息到Request域中</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  1、获取请求的参数</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 userService.login()登录处理业务</span>        User loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果等于null,说明登录 失败!</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把错误信息，和回显的表单项信息，保存到Request域中</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//   跳回登录页面</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 登录 成功</span>            <span class="token comment" spellcheck="true">// 保存用户登录的信息到Session域中</span>            req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//跳到成功页面login_success.html</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/login_success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><div class="msg_cont">   <span class="errorMsg">      $&#123; empty requestScope.msg ? "请输入用户名和密码":requestScope.msg &#125;   </span></div><div class="form">   <form action="userServlet" method="post">      <input type="hidden" name="action" value="login" />      <label>用户名称：</label>      <input class="itxt" type="text" placeholder="请输入用户名"             autocomplete="off" tabindex="1" name="username"             value="$&#123;requestScope.username&#125;" />      <br />      <br />      <label>用户密码：</label>      <input class="itxt" type="password" placeholder="请输入密码"             autocomplete="off" tabindex="1" name="password" />      <br />      <br />      <input type="submit" value="登录" id="sub_btn" />   </form></div></code></pre><h3 id="BaseServlet的抽取-重要"><a href="#BaseServlet的抽取-重要" class="headerlink" title="BaseServlet的抽取(重要)"></a>BaseServlet的抽取(重要)</h3><p>优化一；LoginServlet和RegistServlet可以合并为UserServlet</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      String action <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParamter</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">login</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"regist"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">regist</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//  1、获取请求的参数</span>         String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用 userService.login()登录处理业务</span>         User loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 如果等于null,说明登录 失败!</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把错误信息，和回显的表单项信息，保存到Request域中</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//   跳回登录页面</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 登录 成功</span>            <span class="token comment" spellcheck="true">// 保存用户登录的信息到Session域中</span>            req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//跳到成功页面login_success.html</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/login_success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取Session中的验证码</span>         String token <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>KAPTCHA_SESSION_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 删除 Session中的验证码</span>         req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>KAPTCHA_SESSION_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//  1、获取请求的参数</span>         String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String email <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String code <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         User user <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">copyParamToBean</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//        2、检查 验证码是否正确  === 写死,要求验证码为:abcde</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//        3、检查 用户名是否可用</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">existsUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名["</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"]已存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 把回显信息，保存到Request域中</span>               req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名已存在！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>               req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//跳回注册页面</span>               req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/regist.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//调用Sservice保存到数据库</span>               userService<span class="token punctuation">.</span><span class="token function">registUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//跳到注册成功页面 regist_success.jsp</span>               req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/regist_success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把回显信息，保存到Request域中</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"验证码错误！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验证码["</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"]错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/user/regist.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>接着给login.jsp和regist.jsp页面添加隐藏域和修改请求地址</p><p>【补充】这里一定要注意 form里的action属性和input里的action参数的区别。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"userServlet"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"action"</span> value<span class="token operator">=</span><span class="token string">"login"</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"userServlet"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"action"</span> value<span class="token operator">=</span><span class="token string">"regist"</span><span class="token operator">></span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre><p>优化二：使用反射优化doPost()里的elst  if  代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      String action <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span>      Method method <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 调用目标业务 方法</span>      method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>优化三：抽取BaseServlet,让UserServlet继承</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 解决post请求中文乱码问题</span>       <span class="token comment" spellcheck="true">// 一定要在获取请求参数之前调用才有效</span>       req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//解决响应的中文乱码</span>       resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       String action <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span>          Method method <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用目标业务 方法</span>          method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="数据的封装和抽取BeanUtils的使用"><a href="#数据的封装和抽取BeanUtils的使用" class="headerlink" title="数据的封装和抽取BeanUtils的使用"></a>数据的封装和抽取BeanUtils的使用</h3><p>BeanUtils工具类可以一次性把所有请求参数注入到  JavaBean中。</p><p>需要导入  BeanUtils  包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把Map中的值注入到对应的JavaBean属性中。     *     * @param value     * @param bean     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">copyParamToBean</span><span class="token punctuation">(</span>T bean<span class="token punctuation">,</span> Map value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 把所有请求的参数都注入到user对象中             */</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第四阶段-EL表达式回显数据"><a href="#第四阶段-EL表达式回显数据" class="headerlink" title="第四阶段 EL表达式回显数据"></a>第四阶段 EL表达式回显数据</h2><p>前面已经捎带的写了，这儿就不一一列出</p><h2 id="第五阶段-图书模块"><a href="#第五阶段-图书模块" class="headerlink" title="第五阶段  图书模块"></a>第五阶段  图书模块</h2><p>和user差不多</p><ul><li>创建book表，插入数据</li><li>编写图书模块的 javaBean</li></ul><h3 id="Dao接口，实现类，测试类"><a href="#Dao接口，实现类，测试类" class="headerlink" title="Dao接口，实现类，测试类"></a>Dao接口，实现类，测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    Book <span class="token function">queryBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">queryForPageTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryForPageItems</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">queryForPageTotalCountByPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryForPageItemsByPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into t_book(`name`,`author`,`price`,`sales`,`stock`,`img_path`) values(?,?,?,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getImgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from t_book where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"update t_book set `name`=?,`author`=?,`price`=?,`sales`=?,`stock`=?,`img_path`=? where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getImgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Book <span class="token function">queryBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select `id` , `name` , `author` , `price` , `sales` , `stock` , `img_path` imgPath from t_book where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">queryForOne</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select `id` , `name` , `author` , `price` , `sales` , `stock` , `img_path` imgPath from t_book"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">queryForList</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">queryForPageTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from t_book"</span><span class="token punctuation">;</span>        Number count <span class="token operator">=</span> <span class="token punctuation">(</span>Number<span class="token punctuation">)</span> <span class="token function">queryForSingleValue</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryForPageItems</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select `id` , `name` , `author` , `price` , `sales` , `stock` , `img_path` imgPath from t_book limit ?,?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">queryForList</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">queryForPageTotalCountByPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from t_book where price between ? and ?"</span><span class="token punctuation">;</span>        Number count <span class="token operator">=</span> <span class="token punctuation">(</span>Number<span class="token punctuation">)</span> <span class="token function">queryForSingleValue</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryForPageItemsByPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select `id`,`name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath "</span> <span class="token operator">+</span>                <span class="token string">"from t_book where price between ? and ? order by price limit ?,?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">queryForList</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> BookDao bookDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"瀚文为什么这么帅！"</span><span class="token punctuation">,</span> <span class="token string">"王瀚文"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">"瀚文为什么这么牛！"</span><span class="token punctuation">,</span> <span class="token string">"王瀚文"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>null        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bookDao<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForPageTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForPageItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageItems</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForPageTotalCountByPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageTotalCountByPrice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForPageItemsByPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageItemsByPrice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Service接口，实现类，测试类"><a href="#Service接口，实现类，测试类" class="headerlink" title="Service接口，实现类，测试类"></a>Service接口，实现类，测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    Book <span class="token function">queryBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">pageByPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> BookDao bookDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Book <span class="token function">queryBookById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置每页显示的数量</span>        page<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求总记录数</span>        Integer pageTotalCount <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置总记录数</span>        page<span class="token punctuation">.</span><span class="token function">setPageTotalCount</span><span class="token punctuation">(</span>pageTotalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求总页码</span>        Integer pageTotal <span class="token operator">=</span> pageTotalCount <span class="token operator">/</span> pageSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageTotalCount <span class="token operator">%</span> pageSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pageTotal<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置总页码</span>        page<span class="token punctuation">.</span><span class="token function">setPageTotal</span><span class="token punctuation">(</span>pageTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置当前页码</span>        page<span class="token punctuation">.</span><span class="token function">setPageNo</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求当前页数据的开始索引</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求当前页数据</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> items <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageItems</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置当前页数据</span>        page<span class="token punctuation">.</span><span class="token function">setItems</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">pageByPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置每页显示的数量</span>        page<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求总记录数</span>        Integer pageTotalCount <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageTotalCountByPrice</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置总记录数</span>        page<span class="token punctuation">.</span><span class="token function">setPageTotalCount</span><span class="token punctuation">(</span>pageTotalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求总页码</span>        Integer pageTotal <span class="token operator">=</span> pageTotalCount <span class="token operator">/</span> pageSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageTotalCount <span class="token operator">%</span> pageSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pageTotal<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置总页码</span>        page<span class="token punctuation">.</span><span class="token function">setPageTotal</span><span class="token punctuation">(</span>pageTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置当前页码</span>        page<span class="token punctuation">.</span><span class="token function">setPageNo</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求当前页数据的开始索引</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求当前页数据</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> items <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">queryForPageItemsByPrice</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>pageSize<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置当前页数据</span>        page<span class="token punctuation">.</span><span class="token function">setItems</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Servlet类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> BookService bookService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 处理分页功能     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">page</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 获取请求的参数 pageNo 和 pageSize</span>        <span class="token keyword">int</span> pageNo <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pageNo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 调用BookService.page(pageNo，pageSize)：Page对象</span>        Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        page<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"manager/bookServlet?action=page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 保存Page对象到Request域中</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 请求转发到pages/manager/book_manager.jsp页面</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/manager/book_manager.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageNo <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pageNo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageNo <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1、获取请求的参数==封装成为Book对象</span>        Book book <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">copyParamToBean</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        2、调用BookService.addBook()保存图书</span>        bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、跳到图书列表页面</span><span class="token comment" spellcheck="true">//        req.getRequestDispatcher("/manager/bookServlet?action=list").forward(req, resp);</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/manager/bookServlet?action=page&amp;pageNo="</span> <span class="token operator">+</span>pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        1、获取请求的参数id，图书编程</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        2、调用bookService.deleteBookById();删除图书</span>        bookService<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、重定向回图书列表管理页面</span><span class="token comment" spellcheck="true">//        /book/manager/bookServlet?action=list</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/manager/bookServlet?action=page&amp;pageNo="</span><span class="token operator">+</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pageNo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        1、获取请求的参数==封装成为Book对象</span>        Book book <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">copyParamToBean</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        2、调用BookService.updateBook( book );修改图书</span>        bookService<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、重定向回图书列表管理页面</span><span class="token comment" spellcheck="true">//        地址：/工程名/manager/bookServlet?action=list</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/manager/bookServlet?action=page&amp;pageNo="</span> <span class="token operator">+</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pageNo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.通过BookService</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.把全部图书保存到Request域中</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.请求转发到/pages/manager/book_manager.jsp</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/manager/book_manager.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getBook</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 获取请求的参数图书编号</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 调用bookService.queryBookById查询图书</span>        Book book <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 保存到图书到Request域中</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 请求转发到。pages/manager/book_edit.jsp页面</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/pages/manager/book_edit.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>接着修改jsp页面中的路径</p>]]></content>
      
      
      <categories>
          
          <category> 书城项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP笔记"><a href="#HTTP笔记" class="headerlink" title="HTTP笔记"></a>HTTP笔记</h1><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>​    HT TP协议(HyperText Transfer Protocol，超文本传输协议)  是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准</p><p>​    HTTP是一个基于TCP/IP通信协议来传递数据 （HTML 文件, 图片文件, 查询结果等）。</p><h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>​    HTTP协议工作于客户端—服务器架构上，浏览器作为HTTP客户端通过URL向HTTP服务端(WEB服务器)发送所有请求</p><p>​    WEB服务器根据接收到的请求，向客户端发送响应信息</p><p>​    HTTP默认端口号为80，但是也可以改为8080或者其他端口。</p><p><strong>注意事项</strong></p><ul><li>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求，服务器处理完成客户的请求，并收到客户的应答后，断开连接。采用这种方式可以节省传输时间</li><li>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送，客户端以及服务器指定使用适合的MIME-TYPE内容类型。</li><li>HTTP是无状态：HTTP协议是无状态协议，无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的消息，则它必须重传，这样可能导致每次连接传输的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722075624.png"></p><p>补充内容：</p><p>​    CGI(Common Gateway Interface) 是 HTTP 服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。</p><p>​    绝大多数的 CGI 程序被用来解释处理来自表单的输入信息，并在服务器产生相应的处理，或将相应的信息反馈给浏览器。CGI 程序使网页具有交互功能。</p><h2 id="HTTP-消息结构"><a href="#HTTP-消息结构" class="headerlink" title="HTTP 消息结构"></a>HTTP 消息结构</h2><p>​    HTTP 是基于客户端/服务端（C/S）的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p><p>​    一个 HTTP 客户端是一个应用程序，通过连接到服务器达到向服务器发送一个或多个HTTP 的请求的目的。</p><p>​    一个HTTP  服务器 同样也是一个应用程序，通过接收客户端的请求并向客户端发送HTTP 响应数据。</p><p>​    HTTP 使用 统一资源标识符（Uniform Resource Identifiers  URI）来传输数据和建立连接</p><p>​    一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。</p><h3 id="客户端请求消息："><a href="#客户端请求消息：" class="headerlink" title="客户端请求消息："></a><strong>客户端请求消息</strong>：</h3><p>​    客户端发送一个HTTP请求到服务器的请求消息包括以下格式(请求<strong>报文</strong>的一般格式)：请求行（request line）、请求头部（header）、空行和请求体四个部分组成。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722081129.png"></p><h3 id="服务器响应消息："><a href="#服务器响应消息：" class="headerlink" title="服务器响应消息："></a>服务器响应消息：</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722081219.png"></p><h3 id="报文："><a href="#报文：" class="headerlink" title="报文："></a><strong>报文</strong>：</h3><p>​    报文(message)是网络中交换与传输的数据单元，即站点一次性要发送的数据块。报文包含了将要发送的完整的数据信息，其长短很不一致，长度不限且可变。</p><h2 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h2><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">GET</td><td align="left">请求指定的页面信息，并返回实体主体。</td></tr><tr><td align="left">2</td><td align="left">HEAD</td><td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td align="left">3</td><td align="left">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td align="left">4</td><td align="left">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="left">5</td><td align="left">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="left">6</td><td align="left">CONNECT</td><td align="left">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="left">7</td><td align="left">OPTIONS</td><td align="left">允许客户端查看服务器的性能。</td></tr><tr><td align="left">8</td><td align="left">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td align="left">9</td><td align="left">PATCH</td><td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h2 id="HTTP-响应头信息"><a href="#HTTP-响应头信息" class="headerlink" title="HTTP 响应头信息"></a>HTTP 响应头信息</h2><table><thead><tr><th align="left">应答头</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Allow</td><td align="left">服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td align="left">Content-Encoding</td><td align="left">文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td align="left">Content-Length</td><td align="left">表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td align="left">Content-Type</td><td align="left">表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td align="left">Date</td><td align="left">当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td align="left">Expires</td><td align="left">应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td align="left">Last-Modified</td><td align="left">文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td align="left">Location</td><td align="left">表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td align="left">Refresh</td><td align="left">表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;">http://host/path&quot;</a>)   让浏览器读取指定的页面。 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<a href="http://host/path&quot;%EF%BC%9E">http://host/path&quot;＞</a>   实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。  注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。  注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td align="left">Server</td><td align="left">服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td align="left">Set-Cookie</td><td align="left">设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td align="left">WWW-Authenticate</td><td align="left">客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>​    当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器，当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头(server header) 用以响应浏览器的请求。</p><p>​    </p><p>HTTP状态码的英文为HTTP Status Code。</p><p>常见的HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><p><strong>HTTP状态码分类</strong></p><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。<a href="http://www.dreamdu.com/webbuild/client_vs_server/">客户端</a>应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h2 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h2><p>​    Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件。</p><p>​    Content-Type 响应头告诉客户端实际返回的内容的内容类型。</p><p><img src="/IMAGES/QQ%E6%88%AA%E5%9B%BE20210722091419.png"></p><p><strong>常见的媒体格式类型如下：</strong></p><ul><li>text/html ： HTML格式</li><li>text/plain ：纯文本格式</li><li>text/xml ： XML格式</li><li>image/gif ：gif图片格式</li><li>image/jpeg ：jpg图片格式</li><li>image/png：png图片格式</li></ul><p>以application开头的媒体格式类型：</p><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml： XML数据格式</li><li>application/atom+xml ：Atom XML聚合格式</li><li>application/json： JSON数据格式</li><li>application/pdf：pdf格式</li><li>application/msword ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li><li>application/x-www-form-urlencoded ： <form encType="">中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</li></ul><h2 id="URL-amp-URI"><a href="#URL-amp-URI" class="headerlink" title="URL&amp;URI"></a>URL&amp;URI</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p><strong>定义：</strong></p><p>　　在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫<strong>URL</strong>（<strong>Uniform Resource Locator,统一资源定位符</strong>），它是WWW的统一资源定位标志，就是<strong>指网络地址</strong>。</p><p><strong>URL格式</strong></p><p>　　URL由三部分组成：资源类型、存放资源的主机域名、资源文件名，也可认为由4部分组成：协议、主机、端口、路径。</p><p>　　URL的一般语法格式为：(带方括号[]的为可选项)：</p><p>　　<strong>protocol :// hostname[:port] / path / [;parameters][?query]#fragment</strong></p><p>　　例如<a href="http://www.baidu.com/">http://www.baidu.com:80/</a></p><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>定义：</p><p>​    　在电脑术语中，**统一资源标识符（Uniform Resource Identifier，URI)**是一个用于标识某一互联网资源名称的字符串。 该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。URI由包括确定语法和相关协议的方案所定义。</p><h3 id="URL-和-URI-的区别和联系"><a href="#URL-和-URI-的区别和联系" class="headerlink" title="URL 和 URI 的区别和联系"></a>URL 和 URI 的区别和联系</h3><p>​    URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。URI  只是一种概念，而URL是具体的实现</p><p>只要能唯一标识资源的就是URI，在URI的基础上给出其资源的访问方式的就是URL，</p><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><p><strong>HTTP</strong>（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p><p>HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 <strong>http://</strong> 打头的都是标准 HTTP 服务。</p><p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p><p><strong>HTTPS</strong>（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p><p>HTTPS 默认工作在 TCP 协议443端口，它的工作流程一般如以下方式：</p><ul><li>1、TCP 三次同步握手</li><li>2、客户端验证服务器数字证书</li><li>3、DH 算法协商对称加密算法的密钥、hash 算法的密钥</li><li>4、SSL 安全加密隧道协商完成</li><li>5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的hash算法进行数据完整性保护，保证数据不被篡改。</li></ul><h3 id="HTTP-与-HTTPS-区别"><a href="#HTTP-与-HTTPS-区别" class="headerlink" title="HTTP 与 HTTPS 区别"></a>HTTP 与 HTTPS 区别</h3><ul><li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li><li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li><li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li><li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li>HTTPS 其实就是建构在 SSL/TLS(TLS是传输层加密协议，前身是SSL协议) 之上的 HTTP 协议，所以， HTTPS 比 HTTP 要更耗费服务器资源。</li></ul><h3 id="HTTPS-的工作原理"><a href="#HTTPS-的工作原理" class="headerlink" title="HTTPS 的工作原理"></a>HTTPS 的工作原理</h3><p>对称加密：</p><p>​    有一个秘钥K ，和一个算法f，用算法f和秘钥K对数据进行加密得到x，即f（k,data） = X  ，再用k和f对x进行解密得到data，即 f(K,X) = data</p><p>用对称加密解决安全问题：</p><p>​    客户端和服务端共同商量好一个k，客户端请求时用k加密后的数据传到服务端，服务端再用k进行解密得到data，同样响应的时候也是这样。但是这样不安全，但是因为服务端的k只有一个(因为服务器端不可能为每个客户端量身制定一个k)，其他人也可以获取，就可以截获密文进行解密得到明文，相当于没加密</p><p>非对称加密：</p><p>​    有一个公钥pK，一个私钥sk 和一个算法f，用算法f和公钥pK对数据进行加密得到y，即f（pk,data） = y ，再用sk和f对y进行解密得到data，即 f(sK,y) = data。或者用私钥加密，公钥解密。==<strong>pk所有人都可以拿到，sk只有服务端有</strong>==</p><p>用非对称加密解决安全问题：</p><p>​        第一步客户端向服务器索要公钥，服务端返回公钥。第二步用公钥加密传送到服务端，服务端再用私钥解密，处理请求后再私钥加密再返回（在返回的时候只能用私钥加密，因为如果用公钥加密的话客户端得到数据也不能解密，因为没有私钥）。第三步服务器端返回数据到客户端，客户端用公钥解密得到数据。但是同样不安全，在服务器向客户端返回数据时，被截获密文，由于每个人都可以拿到pk，就可以解密返回的密文得到明文</p><p>两者结合解决安全问题：</p><p>​    由于对称加密的不安全因素为k可以被其他人获取，只要这个秘钥是私有的，就可以安全传输数据。非对称加密是客户端向服务器发送数据是安全的，服务器向客户端发送是不安全的</p><ul><li><p>客户端向服务器索要公钥，服务端返回公钥。</p></li><li><p>客户端随机定一个字符串 str1，用公钥加密后的数据Y上传给服务端 </p></li><li><p>服务端用私钥解密Y得到 str1</p></li><li><p>服务端和客户端协商之后str1就作为对称加密的k</p></li><li><p>客户端用 str1 加密上传数据给服务端</p></li><li><p>服务端用  str1 解密获得密文</p></li></ul><p> 但是！，如果黑客在第一步就介入充当中间人</p><ul><li>客户端向服务器索要公钥，黑客截获数据，并且充当服务端返回黑客自己的公钥spk1。</li><li>黑客冒充客户端用截获的数据向服务器发送请求索要公钥pk，并且服务端返回pk</li><li>客户端用spk1加密str1发送给黑客，黑客再用自己的私钥解密拿到 str1</li><li>黑客和客户端协商，表示可以用str1当做秘钥</li><li>黑客用pk将str1加密发送到服务端</li><li>服务端用sk解密得到str1，黑客和服务端协商之后确定str1为秘钥，自此开始，桥梁搭成</li><li>然后客户端向黑客发送数据Y，黑客解密后得到密文，并且向服务端发送数据Y</li><li>服务端返回数据X给黑客，黑客在解密X得到密文，并且返回X给客户端，之后就一直这样</li></ul><p>解决黑客中间人的问题</p><p>解决这个问题的关键是判断pk是好是坏，通过通过证书颁发机构（CA, Certificate Authority），就可以解决，只要不是CA发布的秘钥就不是好秘钥，假设CA发布的秘钥为公钥CPK和私钥CSK</p><ul><li>CA使用CSK加密服务端的pk，得到一个licence给服务端(大多收费)</li><li>客户端不再请求pk，而是直接请求licence</li><li>客户端用CPK解密得到pk，CPK不需要去CA获取，直接就在操作系统中获取了。操作系统写死了大量的CPK</li><li>接着客户端随机定一个字符串 str1，用公钥加密后的数据Y上传给服务端 </li><li>服务端用私钥解密Y得到 str1</li><li>服务端和客户端协商之后str1就作为对称加密的k</li><li>客户端用 str1 加密上传数据给服务端</li><li>服务端用  str1 解密获得密文</li></ul><p>​       如果再有中间 人发给客户端假的证书，操作系统中的CPK是解密不到这个证书的，并且提示证书不安全，请求就停止了，如果黑客是截获获取证书以后的操作，也是获取不到str1的，因为str1只有sk能解密，而sk只有服务端有，得不到str1，后面的对称加密的数据自然就拿不到了</p><p>​      客户端先是用CA+非对称加密拿到pk，再对称加密传输数据</p><p>【说明：】上述过程中的str1只是为了让宏观上先理解流程，具体的确定过程如下</p><ul><li>客户端向服务端发起请求，携带本机支持的SSL版本，非对称算法以及随机数1</li><li>服务端确定SSL版本，对称加密算法，随机数2，并发送给客户端</li><li>客户端认证证书，认证不通过则停止</li><li>客户端向服务端发送随机数3以及一个将上述几步传输的数据全部进行hash算法的值</li><li>服务端也会通过hash算法计算，接着比较客户端上传的值是否和自己计算的一样，如果一样的话，就将随机数1,2,3通过两者协商好的算法得到秘钥k</li><li>服务端将上述几步的数据通过hash算法计算得到值响应给客户端</li><li>客户端重新计算1,2,4步的数据的hash值，比较是否相同。相同的话客户端也通过之前协商好的算法计算得到k，也就是上面几个过程的str1</li></ul><p>最终步骤</p><ul><li>CA使用CSK加密服务端的pk，得到一个licence给服务端(大多收费)</li><li>客户端不再请求pk，而是直接请求licence</li><li>客户端用CPK解密得到pk，CPK不需要去CA获取，直接就在操作系统中获取了。操作系统写死了大量的CPK</li><li>之后的所有请求响应都是通过pk加密的</li><li>客户端向服务端发起请求，携带本机支持的SSL版本，非对称算法以及随机数1</li><li>服务端确定SSL版本，对称加密算法，随机数2，并发送给客户端</li><li>客户端认证证书，认证不通过则停止</li><li>客户端向服务端发送随机数3以及一个将上述几步传输的数据全部进行hash算法的值</li><li>服务端也会通过hash算法计算，接着比较客户端上传的值是否和自己计算的一样，如果一样的话，就将随机数1,2,3通过两者协商好的算法得到秘钥k</li><li>服务端将上述几步的数据通过hash算法计算得到值响应给客户端</li><li>客户端重新计算1,2,4步的数据的hash值，比较是否相同。相同的话客户端也通过之前协商好的算法计算得到k</li><li>客户端用 k 加密上传数据给服务端</li><li>服务端用  k 解密获得密文，通道搭建完成</li></ul><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>TCP/IP 是用于因特网 (Internet) 的通信协议。</p><h3 id="什么是-TCP-IP？"><a href="#什么是-TCP-IP？" class="headerlink" title="什么是 TCP/IP？"></a>什么是 TCP/IP？</h3><ul><li><p>TCP/IP是供已连接因特网的计算机进行通信的通信协议。</p></li><li><p>TCP/IP指传输控制协议/网际协议（Transmission Control Protocol /  Internet Protocol）</p></li><li><p>TCP/IP定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。</p></li></ul><p>TCP/IP内部包含一系列用于处理数据通信的协议：</p><ul><li>TCP（传输控制协议）：应用程序之间的通信</li><li>UDP（用户数据报协议）：应用程序之间的简单通信</li><li>IP（网际协议）：计算机之间的通信</li><li>ICMP（因特网信息控制协议）：针对错误和状态</li><li>DHCP（动态值机配置协议）：针对动态寻址</li></ul><h3 id="TCP-使用固定的连接"><a href="#TCP-使用固定的连接" class="headerlink" title="TCP 使用固定的连接"></a>TCP 使用固定的连接</h3><p>==<strong>TCP 用于应用程序之间的通信。</strong>==</p><p>当应用程序希望通过TCP 与另一个应用程序通信时，他会发送一个通信请求。这个请求必须被送到一个确切的地址，在双方握手后，TCP 将在两个应用程序之间建立一个全双工的通信。这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p><p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb复习</title>
      <link href="2021/07/21/JavaWeb%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/07/21/JavaWeb%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>xml 是可扩展的标记性语言。</p><p>xml的作用：</p><ul><li>用来保存数据，而且这些数据具有自我描述性</li><li>可以做为项目或者模块的配置文件</li><li>做为网络传输数据的格式(不过现在以 JSON 为主)</li></ul><p>xml的元素就是它的标签</p><p>xml命名规则：</p><ul><li>名称可以含字母、数字以及其他的字符</li><li>名称不能以数字或者标点符号开始 </li><li>名称不能包含空格</li></ul><p>文本区域  CDATA区</p><p>​    CDATA 语法可以告诉 xml 解析器，CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析</p><p>   格式：&lt;![CDATA[这里可以把你输入的字符原样显示，不会解析]]&gt;</p><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>​        xml 可扩展的标记语言。 不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析。</p><p>​        早起JDK提供的了两种xml解析技术 ：  DOM   和    Sax</p><h3 id="dom解析"><a href="#dom解析" class="headerlink" title="dom解析"></a>dom解析</h3><p>​    dom解析技术是W3C组织指定的，而所有的编程语言都对这个解析技术使用了自己语言的特点进行实现。Java对dom技术也做了实现</p><h3 id="SAX解析"><a href="#SAX解析" class="headerlink" title="SAX解析"></a>SAX解析</h3><p>​    sun 公司在 JDK5 版本对 dom 解析技术进行升级：SAX（ Simple API for XML ） SAX 解析，它跟 W3C 制定的解析不太一样。它类似事件机制，通过回调告诉用户当前正在解析的内容。 它是一行一行的读取 xml 文件进行解析的。不会创建大量的 dom 对象。 所以它在解析 xml 的时候，在内存的使用和性能上。都优于 Dom 解析</p><p>第三方解析：jdom、==<strong>dom4j</strong>==、pull</p><h3 id="dom4j解析-重点"><a href="#dom4j解析-重点" class="headerlink" title="dom4j解析(重点)"></a>dom4j解析(重点)</h3><p>由于是第三方公司的技术，所以得下载dom4j的jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--books.xml--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>books</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">sn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SN12341232<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>辟邪剑谱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>班主任<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">sn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SN12341231<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>葵花宝典<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>99.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>班长<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>books</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//javabean类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String sn<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>   <span class="token keyword">private</span> String author<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exceprion<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1.通过创建 SAXReader 对象，来读取 xml 文件，获取 Document 对象</span>   SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Document document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"src/books.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通过Document对象，获取 xml 的根元素 </span>   Element root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通过根元素获取所有的book标签对象</span>   List<span class="token operator">&lt;</span>Element<span class="token operator">></span> books <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//遍历每个book对象，获取每个book标签对象中的每一个元素</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Element book <span class="token operator">:</span> books<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取name标签</span>      Element nameElement <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//asXML():把标签对象转换为标签字符串</span>      <span class="token comment" spellcheck="true">//System.out.println(nameElement.asXML());//&lt;name>辟邪剑谱&lt;/name> </span>            <span class="token comment" spellcheck="true">//获取name标签中的文本内容</span>      String nameText <span class="token operator">=</span> nameElement<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//elementText() :直接获取标签中的文本内容</span>      String bookText <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String authorText <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取books的属性值sn</span>      string snValue <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">arrtibuteValue</span><span class="token punctuation">(</span><span class="token string">"sn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"书名:"</span> <span class="token operator">+</span> nameText <span class="token operator">+</span> <span class="token string">",sn:"</span> <span class="token operator">+</span> snValue <span class="token operator">+</span> <span class="token string">",价格:"</span> <span class="token operator">+</span> priceText <span class="token operator">+</span> <span class="token string">",作者："</span> <span class="token operator">+</span> authorText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//结果为：书名:辟邪剑谱,sn:SN12341232,价格:9.9,作者：班主任</span>      <span class="token comment" spellcheck="true">//            书名:葵花宝典,sn:SN12341231,价格:99.99,作者：班长</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="JavaWeb-1"><a href="#JavaWeb-1" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><p>概念：</p><p>​    JavaWeb是指所有通过Java语言编写的可以通过浏览器访问的程序的总称，JavaWeb是基于请求和响应来开发的</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求是客户端给服务器发送数据，叫请求 Request</p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应是指服务器给客户端回传数据，叫响应Response</p><h3 id="请求和响应的关系"><a href="#请求和响应的关系" class="headerlink" title="请求和响应的关系"></a>请求和响应的关系</h3><p>请求和响应是成对出现的，有响应就有请求。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721211817.png"></p><p>​                    </p><h3 id="Web-资源的分类"><a href="#Web-资源的分类" class="headerlink" title="Web 资源的分类"></a>Web 资源的分类</h3><p>web资源按照实现的技术和呈现的效果不同，又分为静态资源和动态资源</p><p>静态资源：html、css、js、MP4视频、jpg图片</p><p>动态资源：jsp页面、servlet程序</p><h3 id="常用的web服务器"><a href="#常用的web服务器" class="headerlink" title="常用的web服务器"></a>常用的web服务器</h3><ul><li><p><strong>Tomcat</strong>：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务 器），也是当前应用最广的 JavaWeb 服务器（免费）。</p></li><li><p><strong>jboos</strong>：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。</p></li><li><p>GlassFish:  由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用少）。</p></li><li><p>Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持， 性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。</p></li><li><p>WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范， 而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p></li></ul><h3 id="Tomcat的使用"><a href="#Tomcat的使用" class="headerlink" title="Tomcat的使用"></a>Tomcat的使用</h3><p><strong>目录介绍</strong> ：</p><p>​    bin   专门用来存放 Tomcat 服务器的可执行程序 </p><p>​    conf  专门用来存放 Tocmat 服务器的配置文件 </p><p>​    lib   专门用来存放 Tomcat 服务器的 jar 包 </p><p>​    logs  专门用来存放 Tomcat 服务器运行时输出的日记信息 </p><p>​    temp  专门用来存放 Tomcat 运行时产生的临时数据 </p><p>​    webapps  专门用来存放部署的 Web 工程。 </p><p>​    work  是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721213037.png"></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet介绍"><a href="#Servlet介绍" class="headerlink" title="Servlet介绍"></a>Servlet介绍</h3><ul><li>Servlet是JavaEE规范之一，规范就是接口</li><li>Servlet是javaweb三大组件之一</li><li>==<strong>Servlet是运行在服务器上的java小程序，可以接收客户端发送过来的请求，处理请求，并响应数据给客户端</strong>==</li><li><strong>由服务器进行创建</strong></li></ul><p>实现一个Servlet程序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Servlet 被访问了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>xml中的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>                       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- servlet 标签给 Tomcat 配置 Servlet 程序 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--servlet-class 是 Servlet 程序的全类名--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.atguigu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--servlet-mapping 标签给 servlet 程序配置访问地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个 Servlet 程序使用--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--url-pattern 标签配置访问地址 &lt;br/> / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/> /hello 表示地址为：http://ip:port/工程路径/hello &lt;br/> --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721222328.png"></p><h3 id="Servlet的声明周期"><a href="#Servlet的声明周期" class="headerlink" title="Servlet的声明周期"></a>Servlet的声明周期</h3><ul><li><p>执行Servlet构造器方法</p></li><li><p>指定init初始化方法</p><p>以上两步是在第一次访问的时候创建Servlet程序会调用</p></li></ul><ul><li><p>执行 service 方法</p><p>第三步每次访问都会调用</p></li><li><p>执行destroy销毁方法</p><p>第四步，在web工程停止的时候调用</p></li></ul><h3 id="Servlet的GET和POST请求的分发处理"><a href="#Servlet的GET和POST请求的分发处理" class="headerlink" title="Servlet的GET和POST请求的分发处理"></a>Servlet的GET和POST请求的分发处理</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 类型转换（因为它有getMethod()方法）</span>        HttpServletRequest httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取请求的方式</span>        String method <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 做get请求的操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 做post请求的操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="通过继承HttpServlet实现Servlet程序"><a href="#通过继承HttpServlet实现Servlet程序" class="headerlink" title="通过继承HttpServlet实现Servlet程序"></a>通过继承HttpServlet实现Servlet程序</h3><p>一般在实际项目开发中，都是使用==<strong>继承</strong>==HttpServlet类的方式去实现Servlet程序</p><ul><li>编写一个类去继承HttpServlet类</li><li>根据业务需要重写goGet和doPost方法</li><li>到web.xml中配置Servlet程序的访问地址，不过现在都用注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * doGet() 在get请求的时候调用     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloServlet2 的doGet方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * doPost() 在post请求的时候调用     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloServlet2 的doPost方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.whw.servlet.HelloServlet2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="Servlet类的继承体系"><a href="#Servlet类的继承体系" class="headerlink" title="Servlet类的继承体系"></a>Servlet类的继承体系</h3><p>Interface Servlet :Servlet接口，只负责定义Servlet程序的访问规范</p><p>abstract class GenericServlet ：GenericServlet 类 ，实现了Servlet接口，做了很多空实现</p><p>abstract class HttpServlet： HttpServlet抽象类实现了service()方法，并实现了请求的分发处理</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721223756.png"></p><h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p><strong>HttpServlet实现了ServletConfig</strong></p><p>​    ServletConfig (接口) 是Servlet 程序的配置信息类</p><p>​    <strong>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，</strong>我们负责使用。 </p><p>​    Servlet 程序默认是第一次访问的时候创建，ServletConfig 是<strong>每个</strong> Servlet 程序创建时，就创建一个对应ServletConfig 对 象。</p><p>​    <strong>解释：</strong>ServletConfig是在Servlet的init方法的参数里，init方法在servlet创建的时候就会执行，所以ServletConfig也就一同创建了</p><p>作用：                                                                                    ServletConfig接口中的源码</p><ul><li>可以获取Servlet程序的别名 servlet—name的值      public String getServletName();</li><li>获取初始化参数 init—param                                      public String getInitParameter(String name);</li><li>获取ServletContext对象(后面会详说)                        public ServletContext getServletContext();</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.whw.servlet.HelloServlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--init-param是初始化参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--是参数名--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--是参数值--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--init-param是初始化参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--是参数名--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--是参数值--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre><p>Servlet实现类中的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 init初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1、可以获取Servlet程序的别名servlet-name的值</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloServlet程序的别名是:"</span> <span class="token operator">+</span> servletConfig<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2、获取初始化参数init-param</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数username的值是;"</span> <span class="token operator">+</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数url的值是;"</span> <span class="token operator">+</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3、获取ServletContext对象</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>HttpServlet的子类中也可获取ServletConfig</p><p>它是通过父类中的init方法来创建的，所以如果子类中重写的init方法，则一定要调用父类中的init方法</p><p>父类中源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>子类中重写后</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写了init初始化方法,做了一些工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     ServletConfig servletConfig <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取初始化参数init-param</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数username的值是;"</span> <span class="token operator">+</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数url的值是;"</span> <span class="token operator">+</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><ul><li>ServletContext是一个接口，表示Servlet的上下文对象</li><li>一个web工程只有一个ServltContext对象实例</li><li>ServletContext对象是一个域对象</li><li>ServletContext是在web工程部署启动的时候创建的，在web工程停止的时候销毁</li></ul><p>域对象：是可以像 Map 一样存取数据的对象，叫域对象，这里的域指的是存取数据的操作范围，即整个 web 工程。</p><table><thead><tr><th></th><th>存数据</th><th>取数据</th><th>删除数据</th></tr></thead><tbody><tr><td>Map</td><td>put()</td><td>get()</td><td>remove()</td></tr><tr><td>域对象</td><td>putAttribute()</td><td>getAttribute()</td><td>removeAttribute()</td></tr></tbody></table><p><strong>作用：</strong></p><ul><li><p>获取 web.xml 中配置的上下文参数 context-param</p></li><li><p>获取当前的工程路径，格式: /工程路径</p></li><li><p>获取工程部署后在服务器硬盘上的绝对路径</p></li><li><p>像 Map 一样存取数据 (用的最多) </p></li></ul><p>web.xml配置信息</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--context-param是上下文参数(它属于整个web工程)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--context-param是上下文参数(它属于整个web工程)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><p>ServletContext可以获取当前的工程路径和工程部署后在服务器硬盘上的绝对路径</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//1、获取web.xml中配置的上下文参数context-param</span>        ServletContext context <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"context-param参数username的值是:"</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"context-param参数password的值是:"</span> <span class="token operator">+</span>         context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//2、获取当前的工程路径，格式: /工程路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"当前工程路径:"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//3、获取工程部署后在服务器硬盘上的绝对路径</span>               <span class="token comment" spellcheck="true">/**         *  / 斜杠被服务器解析地址为:http://ip:port/工程名/  映射到IDEA代码的web目录&lt;br/>         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工程部署的路径是:"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>ServletContext可以存储数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextServlet1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取ServletContext对象</span>        ServletContext context <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存之前: Context1 获取 key1的值是:"</span><span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Context1 中获取域数据key1的值是:"</span><span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>定义：</p><p>​    协议是指双方，或多方，相互约定好，大家都需要遵守的规则，叫协议。 所谓 HTTP 协议，就是指，客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫 HTTP 协议。 HTTP 协议中的数据又叫<strong>报文</strong></p><h4 id="请求的HTTP协议格式"><a href="#请求的HTTP协议格式" class="headerlink" title="请求的HTTP协议格式"></a>请求的HTTP协议格式</h4><p><strong>GET请求</strong></p><ul><li>请求行<ul><li>请求的方式                       GET/POST</li><li>请求的资源路径</li><li>请求的协议的版本号        HTTP/1.1</li></ul></li><li>请求头<ul><li>key : value  组成  不同的键值对代表不同的含义。</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722103614.png"></p><p><strong>get方法没有请求体是因为它在URL中就把发送给服务器的信息给带上了</strong></p><p><strong>POST请求</strong></p><ul><li><p>请求行</p><ul><li>请求的方式                       GET/POST</li><li>请求的资源路径</li><li>请求的协议的版本号        HTTP/1.1</li></ul></li><li><p>请求头</p><p>key : value    不同的请求头，有不同的含义</p></li><li><p><strong>空行</strong></p></li><li><p>请求体 ：就是发送给服务器的数据</p></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722105311.png"></p><p>目前只有一个post的请求，就是form表单的属性  method = post</p><p>其他的都是 get 请求</p><h4 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h4><ul><li><p>响应行</p><ul><li>请求的方式                       GET/POST</li><li>请求的资源路径</li><li>请求的协议的版本号        HTTP/1.1</li></ul></li><li><p>响应头</p><p>key : value    不同的响应头，有不同的含义</p></li><li><p><strong>空行</strong></p></li><li><p>响应体 ：回传给客户端的数据</p></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722105745.png"></p><h4 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h4><ul><li><p>200 表示请求成功 </p></li><li><p>302  表示请求重定向（明天讲） </p></li><li><p>404  表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误） </p></li><li><p>500   表示服务器已经收到请求，但是服务器内部错误（代码错误）</p></li></ul><h4 id="MIME-Type"><a href="#MIME-Type" class="headerlink" title="MIME-Type"></a>MIME-Type</h4><p>​    MIME 是 HTTP 协议中数据类型。 </p><p>​    MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。MIME 类型的格式是“大类型/小 类型”，并与某一种文件的扩展名相对应</p><p><strong>响应头 Content-Type   的值即为 MIME -Type</strong></p><p>常见的 MIME 类型：</p><ul><li>text/html ： HTML格式</li><li>text/plain ：纯文本格式</li><li>text/xml ： XML格式</li><li>image/gif ：gif图片格式</li><li>image/jpeg ：jpg图片格式</li><li>image/png：png图片格式</li></ul><h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>用途：</p><p>​    每次只要有请求进入 Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息解析好封装到 ServletRequest对象中。 然后传递到 service 方法（doGet 和 doPost）中给我们使用。我们可以通过 HttpServletRequest 对象，获取到所有请求的 信息。</p><p>常用方法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getRequestURI()</td><td>获取请求的资源路径</td></tr><tr><td>getRequestURL()</td><td>获取请求的同一资源定位符,也就是项目的绝对路径</td></tr><tr><td>getRemoteHost()</td><td>获取客户端的 ip 地址</td></tr><tr><td><strong>getHeader()</strong></td><td>获取请求头</td></tr><tr><td><strong>getParameter()</strong></td><td>获取请求的参数</td></tr><tr><td>getParameterValues()</td><td>获取请求的多个参数</td></tr><tr><td>getMethod()</td><td>获取请求的方式 GET 或 POST</td></tr><tr><td><strong>setAttribute()</strong></td><td>设置域数据</td></tr><tr><td><strong>getAttribute()</strong></td><td>获取域数据</td></tr><tr><td>getRequestDispatcher()</td><td>获取请求转发对象</td></tr></tbody></table><h4 id="请求的中文乱码"><a href="#请求的中文乱码" class="headerlink" title="请求的中文乱码"></a>请求的中文乱码</h4><p>doGet方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取请求参数</span>String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先以 iso8859-1 进行编码 //2 再以 utf-8 进行解码</span>username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>doPost方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置请求体的字符集为 UTF-8，从而解决 post 请求的中文乱码问题 ,一定要放在第一行</span>   req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------doPost------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取请求参数 </span>   String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobby <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"兴趣爱好："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p>请求转发是指，服务器收到请求后，从一次资源跳转到另一个资源的操作叫请求转发。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722112547.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取请求的参数（办事的材料）查看</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Servlet1（柜台1）中查看参数（材料）："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给材料 盖一个章，并传递到Servlet2（柜台 2）去查看</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"柜台1的章"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 问路：Servlet2（柜台 2）怎么走</span>        <span class="token comment" spellcheck="true">/**         * 请求转发必须要以斜杠打头，/ 斜杠表示地址为：http://ip:port/工程名/ , 映射到IDEA代码的web目录         *         */</span>        RequestDispatcher requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/servlet2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 走向Sevlet2（柜台 2），这个经常忘写</span>        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取请求的参数（办事的材料）查看</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Servlet2（柜台2）中查看参数（材料）："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查看 柜台1 是否有盖章</span>        Object key1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"柜台1是否有章："</span> <span class="token operator">+</span> key1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理自己的业务</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet2 处理自己的业务 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="web-中-斜杠的不同意义"><a href="#web-中-斜杠的不同意义" class="headerlink" title="web 中 / 斜杠的不同意义"></a>web 中 / 斜杠的不同意义</h4><p>/  被浏览器解析  得到的地址为   <a href="http://ip:port">http://ip:port</a></p><p>/ 被服务器解析  得到的地址为    <a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p><ul><li><p>&lt;**url-pattern**&gt;/servlet1&lt;/**url-pattern**&gt;</p></li><li><p>servletContext.getRealPath(“/”); </p></li><li><p>request.getRequestDispatcher(“/”); </p></li><li><p>jsp页面中的  / </p></li><li><p>特殊情况： response.sendRediect(“/”);    把斜杠发送给浏览器解析，得到 <a href="http://ip:port/">http://ip:port/</a></p></li></ul><h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>作用：</p><p>​        HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 ServletResponse对象传 递给 Servlet 程序去使用。HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息， 我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置</p><p>两个输出流：</p><p>​    字节流          getOutputStream();      常用于下载（传递二进制数据） </p><p>​    字符流           getWriter();                   常用于回传字符串（常用）</p><p>注意：两个流同时只能使用一个，使 用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseIOServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span>         ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要求 ： 往客户端回传 字符串 数据。 </span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"response's content!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="响应的乱码"><a href="#响应的乱码" class="headerlink" title="响应的乱码"></a>响应的乱码</h4><p>resp.setContentType(<strong>“text/html; charset=UTF-8”</strong>);</p><p>注意点：它会同时设置服务器和客户端都使用UTF-8字符集，同时设置了响应头</p><p>​                <strong>此方法一定要在获取流对象之前调用才有效</strong></p><h4 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h4><p>​    请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求 </p><p>重定向（因为之前的地址可能已经被废弃）。响应码 302</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722115517.png"></p><p>请求重定向的第一种方案： </p><p>设置响应状态码302 ，表示重定向，（已搬迁）,设置响应头，说明 新的地址在哪里</p><p>resp.setStatus(302); </p><p>resp.setHeader(<strong>“Location”</strong>, <strong>“<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a></strong>); </p><p>请求重定向的第二种方案（推荐使用）： </p><p>resp.sendRedirect(<strong>“<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a></strong>);</p><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><p>jap的全称是 java server page，java的服务器页面</p><p>jsp的主要作用数代替Servlet程序回传html页面的数据。</p><p>因为servlet程序回传html页面数据是一件非常繁琐的时区，开发成本和维护成本都极高。</p><p>Servlet回传html页面数据的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PringHtml</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 通过响应的回传流回传 html 页面数据 r</span>         esp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;!DOCTYPE html>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;html lang=\"en\">\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;head>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;meta charset=\"UTF-8\">\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;title>Title&lt;/title>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;/head>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;body>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" 这是 html 页面数据 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" &lt;/body>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/html>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>jsp回传一个页面的代码</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %> <html>   <head>   <title>Title</title> </head>    <body>    这是 html 页面数据 </body>   </html></code></pre><h3 id="jsp的本质"><a href="#jsp的本质" class="headerlink" title="jsp的本质"></a>jsp的本质</h3><p>==<strong>jsp 页面本质上是一个 Servlet 程序。</strong>==</p><p>​    当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成 </p><p>为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容是：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">a<span class="token punctuation">.</span>jsp</span> <span class="token keyword">extends</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>HttpJspBase</span>  <span class="token keyword">implements</span> <span class="token class-name">org<span class="token punctuation">.</span>apaceh<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>JspSourceDependent</span><span class="token punctuation">,</span>              org<span class="token punctuation">.</span>apaceh<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>JspSourceImports<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>跟踪代码发现  HttpJspBase   继承了   HttpServlet类，也就是说: jsp 翻译出来的java类，间接继承了HttpServlet类，说明翻译出来的是一个Servlet程序</p><p>其本质也是通过输出流，把html代码 回传给客户端</p><h3 id="jsp的语法"><a href="#jsp的语法" class="headerlink" title="jsp的语法"></a>jsp的语法</h3><h4 id="jsp头部的page指令"><a href="#jsp头部的page指令" class="headerlink" title="jsp头部的page指令"></a>jsp头部的page指令</h4><p>jsp的page指令可以修改  .jsp 页面中一些重要的属性或者行为</p><ul><li>language 属性                 表示jsp翻译后是什么语言文件，暂时只支持java</li><li>contentType 属性           表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值</li><li>pageEncoding属性         表示当前 jsp 页面文件本身的字符集。</li><li>import属性                      跟 java 源代码中一样。用于导包，导类。</li><li>autoFlush属性                设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。</li><li>buffer属性                       设置 out 缓冲区的大小。默认是 8kb</li><li>errorPage 属性               设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。</li></ul><p>​      跳转的这个路径一般都是以斜杠打头，它表示请求地址为   <a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a>   ，因为jsp被服务器解析成为Servlet程序，所以  /  表示的路径还是   <a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a>  </p><ul><li><p>isErrorPage 属性             设置当前 jsp 页面是否是错误信息页面。默认是 false。如果是 true 可以 获取异常信息</p></li><li><p>session属性                     设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。</p></li><li><p>extends属性                    设置 jsp 翻译出来的 java 类默认继承谁。</p></li></ul><h3 id="jsp中的脚本"><a href="#jsp中的脚本" class="headerlink" title="jsp中的脚本"></a>jsp中的脚本</h3><h4 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h4><p>格式：  &lt;%！ 声明Java代码 %&gt;</p><p>作用：可以给jsp翻译出来的 java 类定义属性和方法甚至是静态代码块，内部类等</p><pre class=" language-jsp"><code class="language-jsp"><%--1、声明类属性--%>    <%!        private Integer id;        private String name;        private static Map<String,Object> map;    %><%--2、声明static静态代码块--%>    <%!        static &#123;            map = new HashMap<String,Object>();            map.put("key1", "value1");            map.put("key2", "value2");            map.put("key3", "value3");        &#125;    %><%--3、声明类方法--%>    <%!        public int abc()&#123;            return 12;        &#125;    %><%--4、声明内部类--%>    <%!        public static class A &#123;            private Integer id = 12;            private String abc = "abc";        &#125;    %></code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722141110.png"></p><h4 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h4><ul><li><p>格式 ： &lt;%= 表达式 %&gt;</p></li><li><p>作用：在jsp页面上输出数据</p></li><li><p>表达式脚本的特点： </p><ul><li><p>所有的表达式脚本都会被翻译到  _jspService()   方法中 </p></li><li><p>表达式脚本都会被翻译成为 out.print()输出到页面上 </p></li><li><p>由于表达式脚本翻译的内容都在_jspService() 方法中,所以_jspService()方法中的对象都可以直接使用。 </p></li><li><p>表达式脚本中的表达式不能以分号结束。</p></li></ul></li></ul><pre class=" language-jsp"><code class="language-jsp"><%=12 %> <br><%=12.12 %> <br><%="我是字符串" %> <br><%=map%> <br><%=request.getParameter("username")%></code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722141446.png"></p><h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><ul><li><p>格式：</p><p>​    &lt;%</p><pre><code>           Java语句</code></pre><p>​    %&gt;</p></li><li><p>作用：编写需要的功能</p></li><li><p>特点</p><ul><li>代码脚本翻译之后都在_jspService 方法中 _</li><li>_代码脚本由于翻译到_jspService()方法中，所以在_jspService()方法中的现有对象都可以直接使用。 </li><li>还可以由多个代码脚本块组合完成一个完整的 java 语句。 </li><li>代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据</li></ul></li></ul><pre class=" language-jsp"><code class="language-jsp"><%--代码脚本----for 循环语句--%>    <table border="1" cellspacing="0">    <%        for (int j = 0; j < 10; j++) &#123;    %>        <tr>            <td>第 <%=j + 1%>行</td>        </tr>    <%        &#125;    %>    </table></code></pre><h3 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h3><p>​    jsp 中的内置对象，是指 Tomcat 在翻译 jsp 页面成为 Servlet 源代码后，内部提供的九大对象，叫内置对象。</p><ul><li>request             请求对象</li><li>response           响应对象</li><li>pageContext    jsp的上下文对象</li><li>session              会话对象</li><li>application        ServletContext对象</li><li>config                 ServletConfig对象</li><li>put                      jsp输出流对象</li><li>page                   指向当前jsp的对象</li><li>exception          异常对象</li></ul><h3 id="四大域对象"><a href="#四大域对象" class="headerlink" title="四大域对象"></a>四大域对象</h3><table><thead><tr><th>名称</th><th>作用域</th></tr></thead><tbody><tr><td>pageContext</td><td>当前jsp页面范围内有效</td></tr><tr><td>reques</td><td>一次请求内有效</td></tr><tr><td>session</td><td>一次会话范围内有效</td></tr><tr><td>application</td><td>整个web工程范围内都有效(只要 web 工程不停止，数据都在)</td></tr></tbody></table><p>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。</p><p>其从小到大的顺序为：    pageContext ——&gt; request ——&gt; session ——&gt;application</p><h3 id="jsp中的-out-输出和-response、getWriter-输出的区别"><a href="#jsp中的-out-输出和-response、getWriter-输出的区别" class="headerlink" title="jsp中的   out   输出和   response、getWriter 输出的区别"></a>jsp中的   out   输出和   response、getWriter 输出的区别</h3><p>response 中表示响应，我们经常用于设置返回给客户端的内容（输出） </p><p>out 也是给用户做输出使用的。 </p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722143410.png"></p><p>由于jsp翻译后底层源代码是使用out来输出的。所以一般情况下，在 jsp 页面中统一使用 out 来进行输出。避 免打乱页面输出内容的顺序。 </p><p>out.write()     输出字符串没有问题 </p><p>out.print()     输出任意数据都没有问题（都转换成为字符串后调用的 write 输出）</p><h3 id="jsp的常用标签"><a href="#jsp的常用标签" class="headerlink" title="jsp的常用标签"></a>jsp的常用标签</h3><h4 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h4><p>&lt;%@ include file=”/xxx.jsp”%&gt; 就是静态包含</p><p>​    file 属性指定你要包含的jsp页面的路径，地址中第一个斜杠 / 表示为<a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a> </p><p> 静态包含的特点：</p><ul><li>静态包含不会翻译被包含的jsp页面。</li><li>静态包含其实是把被包含的jsp页面的代码拷贝到包含的位置执行输出。</li></ul><h4 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h4><p>&lt;jsp:include page=””&gt;</jsp:include>     这是动态包含<br>page 属性是指定你要包含的jsp页面的路径，动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置</p><p>动态包含的特点：</p><ul><li>动态包含会把包含的jsp页面也翻译成为java代码</li><li>动态包含底层代码使用如下代码去调用被包含的jsp页面执行输出。<pre><code>    JspRuntimeLibrary.include(request, response, &quot;/include/footer.jsp&quot;, out, false);</code></pre></li><li>动态包含，还可以传递参数</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>jsp<span class="token operator">:</span>include page<span class="token operator">=</span><span class="token string">"/include/footer.jsp"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>param name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"bbj"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>param name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>include<span class="token operator">></span></code></pre><h4 id="jsp标签—转发"><a href="#jsp标签—转发" class="headerlink" title="jsp标签—转发"></a>jsp标签—转发</h4><pre class=" language-jsp"><code class="language-jsp"><%--   <jsp:forward page=""></jsp:forward>       是请求转发标签，它的功能就是请求转发 page 属性设置请求转发的路径 --%><jsp:forward page="/xxx.jsp"></jsp:forward></code></pre><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><ul><li>Listener 监听器它是 JavaWeb 的三大组件之一</li><li>Listener 它是 JavaEE 的规范，就是接口</li><li>监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给程序去做一些相应的处理。</li><li>共有八个监听器，随着技术变革，现在只有 ServletContextListener 有用</li></ul><h3 id="ServletContextListener监听器"><a href="#ServletContextListener监听器" class="headerlink" title="ServletContextListener监听器"></a>ServletContextListener监听器</h3><ul><li>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁</li><li>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。</li><li>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在ServeltContext对象创建之后马上调用，做初始化     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在ServletContext对象销毁之后调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContext对象被创建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Date d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContext对象被销毁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置监听器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>com.whw.listener.MyServletContextListenerImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span></code></pre><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h3 id="EL表达式-1"><a href="#EL表达式-1" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>EL表达式的全称是  Expression Language。表达式语言</p><p>作用：代替jsp页面的表达式脚本</p><p>EL 表达式的格式是：${表达式}</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <%        request.setAttribute("key","值");    %>    表达式脚本输出key的值是:      <%=request.getAttribute("key1")==null?"":request.getAttribute("key1")%><br/>    EL表达式输出key的值是：$&#123;key1&#125;   <!--EL 表达式在输出 null 值的时候，输出的是空串。--></body></html></code></pre><h3 id="EL表达式搜索域数据的顺序"><a href="#EL表达式搜索域数据的顺序" class="headerlink" title="EL表达式搜索域数据的顺序"></a>EL表达式搜索域数据的顺序</h3><p>EL 表达式主要是在 jsp 页面中输出数据。 主要是输出域对象中的数据。 </p><p>当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <%        //往四个域中都保存了相同的key的数据。        request.setAttribute("key", "request");        session.setAttribute("key", "session");        application.setAttribute("key", "application");        pageContext.setAttribute("key", "pageContext");    %>    $&#123; key &#125;</body></html></code></pre><h3 id="EL表达式输出Bean的普通属性，数组属性。List集合属性，map集合属性"><a href="#EL表达式输出Bean的普通属性，数组属性。List集合属性，map集合属性" class="headerlink" title="EL表达式输出Bean的普通属性，数组属性。List集合属性，map集合属性"></a>EL表达式输出Bean的普通属性，数组属性。List集合属性，map集合属性</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    i.需求——输出Person类中普通属性，数组属性。list集合属性和map集合属性。</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> phones<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> cities<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//省略  构造器  getter、setter方法  toString()</span>      <span class="token comment" spellcheck="true">//额外的一个方法，名字为getAge</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在EL表达式中，获取属性值的时候不是直接找属性，而是找属性对应的   getXxx()  或者  isXxx()   方法，这就解释了下面代码为什么没有  age属性 ，${p.age} 也可以获取到值</p><pre class=" language-jsp"><code class="language-jsp"><%@ page import="com.whw.pojo.Person" %><%@ page import="java.util.List" %><%@ page import="java.util.ArrayList" %><%@ page import="java.util.Map" %><%@ page import="java.util.HashMap" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <%        Person person = new Person();        person.setName("HH好帅！");        person.setPhones(new String[]&#123;"18610541354","18688886666","18699998888"&#125;);        List<String> cities = new ArrayList<String>();        cities.add("北京");        cities.add("上海");        cities.add("深圳");        person.setCities(cities);        Map<String,Object>map = new HashMap<>();        map.put("key1","value1");        map.put("key2","value2");        map.put("key3","value3");        person.setMap(map);        pageContext.setAttribute("p", person);    %>    输出Person：$&#123; p &#125;<br/>    输出Person的name属性：$&#123;p.name&#125; <br>    输出Person的pnones数组属性值：$&#123;p.phones[2]&#125; <br>    输出Person的cities集合中的元素值：$&#123;p.cities&#125; <br>    输出Person的List集合中个别元素值：$&#123;p.cities[2]&#125; <br>    输出Person的Map集合: $&#123;p.map&#125; <br>    输出Person的Map集合中某个key的值: $&#123;p.map.key3&#125; <br>    输出Person的age属性：$&#123;p.age&#125; <br>   </body></html></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>语法：${ 运算表达式 } </p><p> EL 表达式支持如下运算符：</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><strong>关系运算符</strong></h4><table><thead><tr><th>关系运算符</th><th>说 明</th><th>示 例</th><th>结 果</th></tr></thead><tbody><tr><td>==（或 eq）</td><td>等于</td><td>13 = 3 或 13 eq 2</td><td>false</td></tr><tr><td>!=（或 ne）</td><td>不等于</td><td>13 != 2或13 ne 2</td><td>true</td></tr><tr><td>&lt;（或 lt）</td><td>小于</td><td>13 &lt; 2 或13 lt 2</td><td>false</td></tr><tr><td>&gt;（或gt）</td><td>大于</td><td>13 &gt; 2 或13 gt 2</td><td>true</td></tr><tr><td>&lt;=（或le）</td><td>小于等于</td><td>13 &lt;= 2 或13 le 2</td><td>false</td></tr><tr><td>&gt;=（或ge）</td><td>大于等于</td><td>13 &gt;= 2 或13 ge 2</td><td>true</td></tr></tbody></table><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><strong>算术运算符</strong></h4><table><thead><tr><th>算术运算符</th><th>说 明</th><th>示 例</th><th>结 果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>${13+2}</td><td>15</td></tr><tr><td>-</td><td>减</td><td>${13-2}</td><td>11</td></tr><tr><td>*</td><td>乘</td><td>${13*2}</td><td>26</td></tr><tr><td>/（或div）</td><td>除</td><td>13 / 2 或13 div 2</td><td>6.5</td></tr><tr><td>%（或mod）</td><td>取模（求余）</td><td>13 % 2 或13 mod 2</td><td>1</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><strong>逻辑运算符</strong></h4><table><thead><tr><th>逻辑运算符</th><th>说 明</th><th>示 例</th><th>结 果</th></tr></thead><tbody><tr><td>&amp;&amp;（或and）</td><td>逻辑与</td><td>如果 A 为 true，B 为 false，则 A &amp;&amp; B（或 A and B）</td><td>false</td></tr><tr><td>||（或 or）</td><td>逻辑或</td><td>如果 A 为 true，B 为 false，则 A ||B（或 A or B）</td><td>true</td></tr><tr><td>!（或 not）</td><td>逻辑非</td><td>如果 A 为 true，则 !A（或 not A）</td><td>false</td></tr></tbody></table><h4 id="empty运算"><a href="#empty运算" class="headerlink" title="empty运算"></a>empty运算</h4><p>empty 运算可以判断一个数据是否为空，如果为空，则输出 true,不为空输出 false。</p><p>以下几种情况为空： </p><ul><li>值为 null 值的时候，为空 </li><li>值为空串的时候，为空 </li><li>值是 Object 类型数组，长度为零的时候 </li><li>list 集合，元素个数为零 </li><li>map 集合，元素个数为零</li></ul><pre class=" language-jsp"><code class="language-jsp"><%@ page import="java.util.List" %><%@ page import="java.util.ArrayList" %><%@ page import="java.util.Map" %><%@ page import="java.util.HashMap" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <%//        1、值为null值的时候，为空        request.setAttribute("emptyNull", null);   //        2、值为空串的时候，为空        request.setAttribute("emptyStr", "");   //        3、值是Object类型数组，长度为零的时候        request.setAttribute("emptyArr", new Object[]&#123;&#125;);   //        4、list集合，元素个数为零        List<String> list = new ArrayList<>();        request.setAttribute("emptyList", list);   //        5、map集合，元素个数为零        Map<String,Object> map = new HashMap<String, Object>();        request.setAttribute("emptyMap", map);    %>    $&#123; empty emptyNull &#125; <br/>    $&#123; empty emptyStr &#125; <br/>    $&#123; empty emptyArr &#125; <br/>    $&#123; empty emptyList &#125; <br/>    $&#123; empty emptyMap &#125; <br/></body></html></code></pre><h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><p>表达式 1？表达式 2：表达式 3 </p><p>如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值。</p><p>示例：</p><pre class=" language-jsp"><code class="language-jsp">$&#123;1 != 1 ? "HH帅死了" : "HH又骗人"&#125;</code></pre><h4 id="“-”点运算符-和-中括号运算符"><a href="#“-”点运算符-和-中括号运算符" class="headerlink" title="“.”点运算符 和 [] 中括号运算符"></a>“.”点运算符 和 [] 中括号运算符</h4><p>点运算，可以输出 Bean 对象中某个属性的值。 </p><p>[]中括号运算，可以输出有序集合中某个元素的值。 </p><p>并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值。</p><pre class=" language-jsp"><code class="language-jsp"><%@ page import="java.util.Map" %><%@ page import="java.util.HashMap" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <%        Map<String,Object> map = new HashMap<String, Object>();        map.put("a.a.a", "aaaValue");        map.put("b+b+b", "bbbValue");        map.put("c-c-c", "cccValue");        request.setAttribute("map", map);    %>        $&#123; map['a.a.a'] &#125; <br>        $&#123; map["b+b+b"] &#125; <br>        $&#123; map['c-c-c'] &#125; <br></body></html></code></pre><h3 id="EL表达式的11个隐含对象"><a href="#EL表达式的11个隐含对象" class="headerlink" title="EL表达式的11个隐含对象"></a>EL表达式的11个隐含对象</h3><table><thead><tr><th>变量</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContextImpl</td><td>获取jsp中的九大内置对象</td></tr><tr><td>pageScope</td><td>Map&lt;String,Object&gt;</td><td>获取pageContext域中的对象</td></tr><tr><td>requestScope</td><td>Map&lt;String,Object&gt;</td><td>获取Request域中的对象</td></tr><tr><td>applocationScope</td><td>Map&lt;String,Object&gt;</td><td>获取ServletContext域中的对象</td></tr><tr><td>sessionScope</td><td>Map&lt;Stirng,Object&gt;</td><td>获取Session域中的数据</td></tr><tr><td>param</td><td>Map&lt;String,Object&gt;</td><td>获取请求参数的值</td></tr><tr><td>paramValues</td><td>Map&lt;String,Object&gt;</td><td>获取请求参数的值，获取多个值的时候使用</td></tr><tr><td>header</td><td>Map&lt;String,Object&gt;</td><td>获取请求头的信息</td></tr><tr><td>headerValues</td><td>Map&lt;String,Object&gt;</td><td>获取请求头的多个值的信息</td></tr><tr><td>cookie</td><td>Map&lt;String,Object&gt;</td><td>获取当前请求的Cookie信息</td></tr><tr><td>initParam</td><td>Map&lt;Stirng,Object&gt;</td><td>获取在web.xml中配置的<context-param>上下文参数</td></tr></tbody></table><h4 id="EL获取四个特定域中的属性"><a href="#EL获取四个特定域中的属性" class="headerlink" title="EL获取四个特定域中的属性"></a>EL获取四个特定域中的属性</h4><p>pageScope                    ——&gt;           pageContext域</p><p>requestScope               ——&gt;           Request域</p><p>sessionScope               ——&gt;           Session域</p><p>applicationScope         ——&gt;          ServletContext域</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <%        pageContext.setAttribute("key1", "pageContext1");        pageContext.setAttribute("key2", "pageContext2");        request.setAttribute("key2", "request");        session.setAttribute("key2", "session");        application.setAttribute("key2", "application");    %>       $&#123; pageScope.key2 &#125;       $&#123; requestScope.key2 &#125;       $&#123; requestScope.key2 &#125;       $&#123; applicationScope.key2 &#125;</body></html></code></pre><h4 id="pageContext-对象的使用"><a href="#pageContext-对象的使用" class="headerlink" title="pageContext 对象的使用"></a>pageContext 对象的使用</h4><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    request.getScheme() 它可以获取请求的协议    request.getServerName() 获取请求的服务器ip或域名    request.getServerPort() 获取请求的服务器端口号    getContextPath() 获取当前工程路径    request.getMethod() 获取请求的方式（GET或POST）    request.getRemoteHost()  获取客户端的ip 地址    session.getId() 获取会话的唯一标识    <%        pageContext.setAttribute("req", request);    %>    <%=request.getScheme() %> <br>    1.协议： $&#123; req.scheme &#125;<br>    2.服务器ip：$&#123; pageContext.request.serverName &#125;<br>    3.服务器端口：$&#123; pageContext.request.serverPort &#125;<br>    4.获取工程路径：$&#123; pageContext.request.contextPath &#125;<br>    5.获取请求方法：$&#123; pageContext.request.method &#125;<br>    6.获取客户端ip地址：$&#123; pageContext.request.remoteHost &#125;<br>    7.获取会话的id编号：$&#123; pageContext.session.id &#125;<br></body></html></code></pre><h4 id="param-amp-paramValues对象"><a href="#param-amp-paramValues对象" class="headerlink" title="param &amp; paramValues对象"></a>param &amp; paramValues对象</h4><p>请求地址为：</p><p><a href="http://localhost:8080/09_EL_JSTL/other_el_obj.jsp?username=wzg168&amp;password=666666&amp;hobby=java&amp;hobby=cpp">http://localhost:8080/09_EL_JSTL/other_el_obj.jsp?username=wzg168&amp;password=666666&amp;hobby=java&amp;hobby=cpp</a></p><p>param                      Map&lt;String,Object&gt;          获取请求参数的值</p><p>paramValues          Map&lt;String,Object&gt;          获取请求参数的值，获取多个值的时候使用</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    输出请求参数username的值：$&#123; param.username &#125; <br>    输出请求参数password的值：$&#123; param.password &#125; <br>    输出请求参数username的值：$&#123; paramValues.username[0] &#125; <br>    输出请求参数hobby的值：$&#123; paramValues.hobby[0] &#125; <br>    输出请求参数hobby的值：$&#123; paramValues.hobby[1] &#125; <br></body></html></code></pre><p>header                 Map&lt;String,String&gt;      它可以获取请求头的信息 </p><p>headerValues     Map&lt;String,String[]&gt;     它可以获取请求头的信息，它可以获取多个值的情况</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>   <!--注意请求头里的特殊字符-->    输出请求头【User-Agent】的值：$&#123; header['User-Agent'] &#125; <br>    输出请求头【Connection】的值：$&#123; header.Connection &#125; <br>    输出请求头【User-Agent】的值：$&#123; headerValues['User-Agent'][0] &#125; <br></body></html></code></pre><p>cookie      Map&lt;String,Cookie&gt;      它可以获取当前请求的 Cookie 信息 </p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    获取Cookie的名称：$&#123; cookie.JSESSIONID.name &#125; <br>    获取Cookie的值：$&#123; cookie.JSESSIONID.value &#125; <br></body></html></code></pre><p>initParam     Map&lt;String,String&gt;     它可以获取在 web.xml 中配置的&lt;context-param&gt;上下文参数</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>jdbc:mysql:///test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    输出&lt;Context-param&gt;username的值：$&#123; initParam.username &#125; <br>    输出&lt;Context-param&gt;url的值：$&#123; initParam.url &#125; <br> </body></html></code></pre><h2 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>​    JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标签库。目的是为了替换代码脚本，是页面变得更加整洁</p><p>JSTL 由五个不同功能的标签库组成。</p><table><thead><tr><th>功能范围</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>核心标签库</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>html</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/function">http://java.sun.com/jsp/jstl/function</a></td><td>fn</td></tr><tr><td>数据库</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>xml</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr></tbody></table><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li><p>先导入 jstl 标签库的 jar 包。 </p><ul><li>taglibs-standard-impl-1.2.1.jar </li><li>taglibs-standard-spec-1.2.1.jar</li></ul></li><li><p>使用 taglib 指令引入标签库。&lt;%@ taglib prefix=*”c”* uri=”<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a>* %&gt;</p></li></ul><h3 id="core核心库的使用"><a href="#core核心库的使用" class="headerlink" title="core核心库的使用"></a>core核心库的使用</h3><ul><li>&lt;c:set/&gt;  :  set 标签可以往域中保存数据</li></ul><pre class=" language-jsp"><code class="language-jsp"><c:set scope="session" var="abc" value="abcValue"/></code></pre><ul><li><p>&lt;c:if&gt; ：if 标签用来做 条件 判断。 </p><pre class=" language-jsp"><code class="language-jsp"><c:if test="$&#123; 12 == 12 &#125;">    <h1>12 等于 12</h1></c:if> <c:if test="$&#123; 12 != 12 &#125;">    <h1>12 不等于 12</h1> </c:if></code></pre></li><li><p>&lt;c:chooose&gt;    &lt;c:when&gt;     &lt;c:otherwise&gt;</p><ul><li>作用：多路判断</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>c<span class="token punctuation">:</span>choose<span class="token operator">></span>       <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>when test<span class="token operator">=</span><span class="token string">"$&amp;#123; requestScope.height > 190 &amp;#125;"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>h2<span class="token operator">></span> 小巨人<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>when<span class="token operator">></span>          <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>when test<span class="token operator">=</span><span class="token string">"$&amp;#123; requestScope.height > 180 &amp;#125;"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>h2<span class="token operator">></span> 很高<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>when<span class="token operator">></span>          <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>when test<span class="token operator">=</span><span class="token string">"$&amp;#123; requestScope.height > 170 &amp;#125;"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>h2<span class="token operator">></span> 还可以<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>when<span class="token operator">></span>       <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>otherwise<span class="token operator">></span>          <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>choose<span class="token operator">></span>             <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>when test<span class="token operator">=</span><span class="token string">"$&amp;#123;requestScope.height > 160&amp;#125;"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h3<span class="token operator">></span>大于 <span class="token number">160</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>when<span class="token operator">></span>                        <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>when test<span class="token operator">=</span><span class="token string">"$&amp;#123;requestScope.height > 150&amp;#125;"</span><span class="token operator">></span>               <span class="token operator">&lt;</span>h3<span class="token operator">></span>大于 <span class="token number">150</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>when<span class="token operator">></span>                        <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>when test<span class="token operator">=</span><span class="token string">"$&amp;#123;requestScope.height > 140&amp;#125;"</span><span class="token operator">></span>               <span class="token operator">&lt;</span>h3<span class="token operator">></span>大于 <span class="token number">140</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>when<span class="token operator">></span>                        <span class="token operator">&lt;</span>c<span class="token punctuation">:</span>otherwise<span class="token operator">></span> 其他小于 <span class="token number">140</span> <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>otherwise<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>choose<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>otherwise<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token punctuation">:</span>choose<span class="token operator">></span></code></pre></li><li><p>&lt;c:foreach&gt; :  遍历输出使用。</p><ul><li>遍历 1-10</li></ul><pre class=" language-jsp"><code class="language-jsp"><table border="1">   <c:forEach begin="1" end="10" var="i">      <tr>         <td>第$&#123;i&#125;行</td>      </tr>   </c:forEach></table></code></pre><ul><li>遍历object数组</li></ul><pre class=" language-jsp"><code class="language-jsp"><%    request.setAttribute("arr",newString[&#123;"18610541354","18688886666","18699998888"&#125;);%><c:forEach items="$&#123; requestScope.arr &#125;" var="item">   $&#123; item &#125; <br> </c:forEach></code></pre><ul><li>遍历Map集合</li></ul><pre class=" language-jsp"><code class="language-jsp"><%    Map<String,Object> map = new HashMap<String, Object>();   map.put("key1", "value1");   map.put("key2", "value2");   map.put("key3", "value3");   map.put("key4", "value4");   request.setAttribute("map", map); %><c:forEach items="$&#123; requestScope.map &#125;" var="entry">    <h1>$&#123;entry.key&#125; = $&#123;entry.value&#125;</h1> </c:forEach></code></pre><ul><li>遍历List集合—list中存放 Student类，有属性：编号，用户名，密码，年龄，电话信息</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//省略全参构造器，get、set方法。toString()</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%   List<Student> studentList = new ArrayList<Student>();   for (int i = 1; i <= 10; i++) &#123;      studentList.add(new Student(i,"username"+i ,"pass"+i,18+i,"phone"+i));   &#125;   request.setAttribute("stus", studentList);%>    <form action="" enctype=""></form>    <table>        <tr>            <th>编号</th>            <th>用户名</th>            <th>密码</th>            <th>年龄</th>            <th>电话</th>            <th>操作</th>        </tr>        <%--            items 表示遍历的集合            var 表示遍历到的数据            begin表示遍历的开始索引值            end 表示结束的索引值            step 属性表示遍历的步长值            varStatus 属性表示当前遍历到的数据的状态            for（int i = 1; i < 10; i+=2）        --%>    <c:forEach begin="2" end="7" step="2" varStatus="status" items="$&#123;requestScope.stus&#125;" var="stu">        <tr>            <td>$&#123;stu.id&#125;</td>            <td>$&#123;stu.username&#125;</td>            <td>$&#123;stu.password&#125;</td>            <td>$&#123;stu.age&#125;</td>            <td>$&#123;stu.phone&#125;</td>            <td>$&#123;status.step&#125;</td>        </tr>    </c:forEach>    </table></code></pre></li></ul><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><ul><li>要有一个 form 标签，method=post 请求。</li><li>form 标签的 encType 属性值必须为 multipart/form-data 值。</li><li>在 form 标签中使用 input type=file 添加上传的文件。</li><li>编写服务器代码（Servlet 程序）接收，处理上传的数据。</li></ul><p>​        encType=multipart/form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼 接，然后以二进制流的形式发送给服务器</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730092923.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.31.74:8080/09_EL_JSTL/uploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    头像：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>导入  commons-fileupload-1.2.1.jar    commons-io-1.4.jar </p><p>常用方法：</p><ul><li><p>ServletFileUpload 类，用于解析上传的数据。</p></li><li><p>boolean ServletFileUpload.<em>isMultipartContent</em>(HttpServletRequest request); </p><p>   判断当前上传的数据格式是否是多段的格式。</p></li><li><p>public List&lt;FileItem&gt; parseRequest(HttpServletRequest request) </p><p>  解析上传的数据</p></li><li><p>boolean FileItem.isFormField() </p><p>​    判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。 </p><p>​    true 表示普通类型的表单项 ， false 表示上传的文件类型</p></li><li><p>String FileItem.getFieldName() </p><p>   获取表单项的 name 属性值</p></li><li><p>String FileItem.getString() </p><p>   获取当前表单项的值。 </p></li><li><p>String FileItem.getName(); </p><p>   获取上传的文件名 </p></li><li><p>void FileItem.write( file ); </p><p>   将上传的文件写到 参数 file 所指向的硬盘位置 。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//获取请求的二进制流</span>   <span class="token comment" spellcheck="true">//        ServletInputStream inputStream = req.getInputStream();</span>   <span class="token comment" spellcheck="true">//        byte[] buffer = new byte[102400];</span>   <span class="token comment" spellcheck="true">//        int read = inputStream.read(buffer);</span>   <span class="token comment" spellcheck="true">//        System.out.println(new String(buffer,0,read));</span>      <span class="token comment" spellcheck="true">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的）</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ServletFileUpload<span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建FileItemFactory工厂实现类</span>      FileItemFactory fileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 创建用于解析上传数据的工具类ServletFileUpload类</span>      ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>fileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 解析上传的数据，得到每一个表单项FileItem</span>         List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> list <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem fileItem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 普通表单项</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的name属性值："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 参数UTF-8.解决乱码问题</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的value属性值："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 上传的文件</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的name属性值："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\"</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1.获取要下载的文件名</span>   String downloadFileName <span class="token operator">=</span> <span class="token string">"1.webp"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2.读取要下载的文件内容</span>   ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取要下载的文件类型</span>   String mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4.在回传之前，通过响应头告诉客户端返回的数据类型</span>   resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//5.还要告诉客户端收到的数据是用于下载使用（还是使用响应头）</span>   <span class="token comment" spellcheck="true">//Content-Disposition响应头，表示收到的数据怎么处理</span>   <span class="token comment" spellcheck="true">//attachment表示附件，表示下载使用</span>   <span class="token comment" spellcheck="true">//filename="" 表示指定下载的文件名</span>   <span class="token comment" spellcheck="true">//URL编码是把汉字转换成为%xx%xx（汉字）的格式</span>   resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downloadFileName<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   InputStream resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取响应的输出流</span>   ServletOutputStream outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3.把下载的文件内容回传给客户端</span>   <span class="token comment" spellcheck="true">//读取流中全部的数据，复制给输出流，输出给客户端</span>   IOUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>概念：</p><ul><li>Cookie 是服务器通知客户端保存<strong>键值对</strong>的一种技术</li><li>客户端有了 Cookie 后，每次请求都发送给服务器</li><li>每个 Cookie 的大小不能超过 4kb</li></ul><p>创建</p><ul><li>客户端发送请求给服务器，服务器创建Cookie并通过Set-Cookie响应回客户端</li><li>客户端收到响应后发现有Cookie就会和自己的Cookie比较，没有就创建，有就修改</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723213441.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//servlet代码 </span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCookie</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 创建Cookie对象</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 通知客户端保存Cookie</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 创建Cookie对象</span>        Cookie cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 通知客户端保存Cookie</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>服务器获取Cookie</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查找指定名称的Cookie对象     * @param name     * @param cookies     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Cookie <span class="token function">findCookie</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span> Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null <span class="token operator">||</span> cookies <span class="token operator">==</span> null <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//servlet代码 </span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// getName方法返回Cookie的key（名）</span>       <span class="token comment" spellcheck="true">// getValue方法返回Cookie的value值</span>       resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie["</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] &lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Cookie iWantCookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果不等于null，说明赋过值，也就是找到了需要的Cookie</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iWantCookie <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"找到了需要的Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li><p>Cookie的值的修改</p><ul><li>方案一：<ul><li>先创建一个要修改的同名（指的就是 key）的 Cookie 对象 </li><li>在构造器，同时赋于新的 Cookie 值。 </li><li>调用 response.addCookie( Cookie ); </li></ul></li></ul><pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"newValue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>方案二：<ul><li>先查找到需要修改的 Cookie 对象 </li><li>调用 setValue()方法赋于新的 Cookie 值。</li><li>调用 response.addCookie()通知客户端保存修改 </li></ul></li></ul><pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cookie <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"newValue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="Cookie生命控制"><a href="#Cookie生命控制" class="headerlink" title="Cookie生命控制"></a>Cookie生命控制</h3><p>​    Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁</p><ul><li><p>setMaxAge()</p><ul><li>正数：表示在指定的秒数后过期</li><li>负数；表示浏览器一关就删除，默认为-1</li><li>零：表示马上删除Cookie</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">lifeController</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置Cookie一小时之后被删除。无效</span>         <span class="token comment" spellcheck="true">//cookie.setMaxAge(0); // 马上删除</span>        <span class="token comment" spellcheck="true">//cookie.setMaxAge(-1);//浏览器一关Cookie就销毁 </span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="Cookie有效路径的设置"><a href="#Cookie有效路径的设置" class="headerlink" title="Cookie有效路径的设置"></a>Cookie有效路径的设置</h3><p>​    Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。 </p><p>​    path 属性是通过请求的地址来进行有效的过滤。</p><p>​      CookieA     path=/工程路径 </p><pre><code>  CookieB     path=/工程路径/abc</code></pre><p>请求地址如下：     <a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a> </p><p>​                                        CookieA 发送 </p><p>​                                        CookieB 不发送 </p><p>​                                <a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a> </p><p>​                                        CookieA 发送 </p><p>​                                        CookieB 发送 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">testPath</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"path1"</span><span class="token punctuation">,</span> <span class="token string">"path1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getContextPath() ===>>>>  得到工程路径</span>        cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/abc"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ===>>>>  /工程路径/abc</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"创建了一个带有Path路径的Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="免用户名登录"><a href="#免用户名登录" class="headerlink" title="免用户名登录"></a>免用户名登录</h3><p>login.jsp</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <form action="http://localhost:8080/10_cookie_session/loginServlet" method="get">        用户名：<input type="text" name="username" value="$&#123;cookie.username.value&#125;"> <br>        密码：<input type="password" name="password"> <br>        <input type="submit" value="登录">    </form></body></html></code></pre><p>LoginServlet程序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie cookie <span class="token operator">=</span> null<span class="token punctuation">;</span>        Cookie cookie1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"wzg168"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录 成功</span>            cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前Cookie一周内有效</span>            cookie1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前Cookie一周内有效</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Session会话"><a href="#Session会话" class="headerlink" title="Session会话"></a>Session会话</h2><ul><li>Session 是一个接口（HttpSession）。</li><li>Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。</li><li>每个客户端都有自己的一个 Session 会话。</li><li>Session 会话中，我们经常用来保存用户登录之后的信息。</li></ul><h3 id="Session创建和获取"><a href="#Session创建和获取" class="headerlink" title="Session创建和获取"></a>Session创建和获取</h3><p>request.getSession() </p><p>​        第一次调用是：创建 Session 会话     <strong>之后调用都是获取前面创建好的 Session 会话对象。</strong></p><p>isNew();    判断到底是不是刚创建出来的（新的） </p><p>​                        true    表示刚创建 </p><p>​                        false   表示获取之前创建</p><p>getId() ：得到 Session 的会话 id 值</p><p>每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是唯一的。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createOrGetSession</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建和获取Session会话对象</span>        HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断 当前Session会话，是否是新创建出来的</span>        <span class="token keyword">boolean</span> isNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Session会话的唯一标识 id</span>        String id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"得到的Session，它的id是："</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" &lt;br /> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这个Session是否是新创建的："</span> <span class="token operator">+</span> isNew <span class="token operator">+</span> <span class="token string">" &lt;br /> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Session域数据的存取"><a href="#Session域数据的存取" class="headerlink" title="Session域数据的存取"></a>Session域数据的存取</h3><pre class=" language-java"><code class="language-java">  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"已经往Session中保存了数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object attribute <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"从Session中获取出key1的数据是："</span> <span class="token operator">+</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Session生命周期"><a href="#Session生命周期" class="headerlink" title="Session生命周期"></a>Session生命周期</h3><p>​        public void setMaxInactiveInterval(int interval) 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session 就会被销毁。</p><p>​        值为正数的时候，设定 Session 的超时时长。 </p><p>​        负数表示永不超时（极少使用） </p><p>public int getMaxInactiveInterval()获取 Session 的超时时间 </p><p>public void invalidate() 让当前 Session 会话马上超时无效</p><p>​    Session 默认的超时时间长为 30 分钟。 </p><p>​        因为在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有的 Session 超时配置默认时长为：30 分钟。 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在web.xml里修改默认时长--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--也可以根据自己需要用 session.setMaxInactiveInterval(int interval)  单独设置超时时长。--></span></code></pre><p>【注意】  <strong>session的超时指的是，客户端两次请求的最大间隔时长</strong>，要是一直刷新一直刷新，永远也不会超时</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723231848.png"></p><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><h3 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h3><ul><li>Filter 过滤器它是 JavaWeb 的三大组件之一。</li><li>Filter 过滤器它是 JavaEE 的规范。也就是接口。</li><li>Filter 过滤器它的作用是：<strong>拦截请求</strong>，过滤响应。</li></ul><p>拦截请求常见的应用场景有： </p><ul><li><p>权限检查 </p></li><li><p>日记操作 </p></li><li><p>事务管理    ……等等</p></li></ul><h3 id="Filter的用途"><a href="#Filter的用途" class="headerlink" title="Filter的用途"></a>Filter的用途</h3><p>​    要求：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必 须是用户登录之后才允许访问。</p><p>​     </p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body><form action="http://localhost:8080/11_filter/loginServlet" method="get">    用户名：<input type="text" name="name">    密  码：<input type="password" name="password">    <input type="submit"></form></body></html></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * doFile()方法，专门用来拦截请求，可以做权限检查     * @param request     * @param response     * @param chain     * @throws IOException     * @throws ServletException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HttpServletRequest httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">;</span>        HttpSession session <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//servlet代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"whw"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.whw.filter.AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/admin/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.whw.servlet.LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/loginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="Filter的声明周期"><a href="#Filter的声明周期" class="headerlink" title="Filter的声明周期"></a>Filter的声明周期</h3><p>Filter的声明周期包含的几个方法：</p><ul><li>构造方法</li><li>init初始化方法</li></ul><p>第一二步在web工程启动的时候执行</p><ul><li>doFilter过滤方法</li><li>destory：停止web工程的时候，就会执行</li></ul><h3 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h3><p>Filter 过滤器的配置文件类</p><p><strong>Tomcat 每次创建 Filter 的时候</strong>，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息</p><p>作用：</p><ul><li>获取 Filter 的名称 ，也就是filter-name 的内容</li><li>获取在 Filter 中配置的 init-param 初始化参数</li><li>获取 ServletContext 对象</li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1、获取 Filter 的名称 filter-name 的内容</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter-name 的值是："</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2、获取在 web.xml 中配置的 init-param 初始化参数</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数 name 的值是："</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数 url 的值是："</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取 ServletContext 对象</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.whw.filter.AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>whw<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/admin/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="FilterChain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724212351.png"></p><h3 id="Filter的拦截路径"><a href="#Filter的拦截路径" class="headerlink" title="Filter的拦截路径"></a>Filter的拦截路径</h3><ul><li>精确匹配<ul><li> &lt;**url-pattern**&gt;/target.jsp&lt;/**url-pattern**&gt; </li><li>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></li></ul></li></ul><ul><li>目标匹配<ul><li>&lt;*<em>url-pattern**&gt;/admin/</em>&lt;/**url-pattern**&gt;<ul><li>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</li></ul></li></ul></li></ul><ul><li>后缀名匹配<ul><li>&lt;*<em>url-pattern**&gt;</em>.html&lt;/**url-pattern**&gt;<ul><li>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到</li></ul></li><li>&lt;*<em>url-pattern**&gt;</em>.jsp&lt;/**url-pattern**&gt;<ul><li>以上配置的路径，表示请求地址必须以.jsp结尾才会拦截到</li></ul></li></ul></li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h3><p>​        <strong>JSON</strong> (JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON 采用完全独立于语言的文本格式，而且很多语言都提供了对 json 的支持（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。 这样就使得 JSON 成为理想的数据交换格式。</p><pre><code> json 相较于XML是一种轻量级的数据交换格式。</code></pre><p>​    数据交换是指客户端和服务器之间业务数据的传递格式</p><h3 id="JSON的定义"><a href="#JSON的定义" class="headerlink" title="JSON的定义"></a>JSON的定义</h3><p>​        json 是由键值对组成，并且由花括号包围。每个键由引号引起来，键和值之间使用冒号进行分隔， 多组键值对之间进行逗号进行分隔。</p><h3 id="JSON在JavaScript中的使用"><a href="#JSON在JavaScript中的使用" class="headerlink" title="JSON在JavaScript中的使用"></a>JSON在JavaScript中的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>json的声明<span class="token operator">--</span><span class="token operator">></span><span class="token keyword">var</span> jsonObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token string">"key1"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>   <span class="token string">"key2"</span><span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span>   <span class="token string">"key3"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token string">"key4"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"arr"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token string">"key5"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token string">"key5_1"</span> <span class="token punctuation">:</span> <span class="token number">551</span><span class="token punctuation">,</span>   <span class="token string">"key5_2"</span> <span class="token punctuation">:</span> <span class="token string">"key5_2_value"</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   <span class="token string">"key6"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token string">"key6_1_1"</span><span class="token punctuation">:</span><span class="token number">6611</span><span class="token punctuation">,</span>   <span class="token string">"key6_1_2"</span><span class="token punctuation">:</span><span class="token string">"key6_1_2_value"</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token string">"key6_2_1"</span><span class="token punctuation">:</span><span class="token number">6621</span><span class="token punctuation">,</span>   <span class="token string">"key6_2_2"</span><span class="token punctuation">:</span><span class="token string">"key6_2_2_value"</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>json的访问<span class="token operator">--</span><span class="token operator">></span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// object  json就是一个对象</span>   <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//12</span>   <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span>   <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>key3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>key4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到数组[11,"arr",false]</span>   <span class="token comment" spellcheck="true">// json 中 数组值的遍历</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jasonObj<span class="token punctuation">.</span>key4<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>jasonObj<span class="token punctuation">.</span>key4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>key5<span class="token punctuation">.</span>key5_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//551</span>   <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>key5<span class="token punctuation">.</span>key5_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//key5_2_value</span>   <span class="token function">alert</span><span class="token punctuation">(</span> jsonObj<span class="token punctuation">.</span>key6 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到json数组</span>   <span class="token comment" spellcheck="true">// 取出来每一个元素都是json对象</span>   <span class="token keyword">var</span> jsonItem <span class="token operator">=</span> jsonObj<span class="token punctuation">.</span>key6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span> jsonItem<span class="token punctuation">.</span>key6_1_1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6611</span>   <span class="token function">alert</span><span class="token punctuation">(</span> jsonItem<span class="token punctuation">.</span>key6_1_2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//key6_1_2_value</span></code></pre><h3 id="json对象和字符串之间的转换"><a href="#json对象和字符串之间的转换" class="headerlink" title="json对象和字符串之间的转换"></a>json对象和字符串之间的转换</h3><p>json 的存在有两种形式。 </p><ul><li><p>对象的形式存在，我们叫它 json 对象。 </p></li><li><p>字符串的形式存在，我们叫它 json 字符串。 </p></li></ul><p>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。 </p><p>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。</p><ul><li>JSON.stringify()<ul><li>把json对象转换为json字符串</li></ul></li><li>JSON.parse()<ul><li>把json字符串转换成为json对象</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把json对象转换成为 json字符串</span><span class="token keyword">var</span> jsonObjString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 特别像 Java中对象的toString</span><span class="token function">alert</span><span class="token punctuation">(</span>jsonObjString<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 把json字符串。转换成为json对象</span><span class="token keyword">var</span> jsonObj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonObjString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>jsonObj2<span class="token punctuation">.</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 12</span><span class="token function">alert</span><span class="token punctuation">(</span>jsonObj2<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// abc</span></code></pre><h3 id="JSON在Java中的使用"><a href="#JSON在Java中的使用" class="headerlink" title="JSON在Java中的使用"></a>JSON在Java中的使用</h3><p>​    需要导入GSON.jar</p><p>javaBean类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//省略无参，有参构造器，get、set方法，toString方法</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>javaBean和json的互转</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"HH好帅!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Gson对象实例</span>        Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// toJson方法可以把java对象转换成为json字符串</span>        String personJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// fromJson把json字符串转换回Java对象</span>        <span class="token comment" spellcheck="true">// 第一个参数是json字符串</span>        <span class="token comment" spellcheck="true">// 第二个参数是转换回去的Java对象类型</span>        Person person1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>List 和json的互转</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"国哥"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"康师傅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 把List转换为json字符串</span>   String personListJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personList<span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>   List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Person<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>   Person person <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重点注意TypeToken类，它内部用反射就可以把json字符串转换为集合</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonListType</span> <span class="token keyword">extends</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Person<span class="token operator">>></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>map 和json的互转</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Person<span class="token operator">></span> personMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"国哥好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"康师傅也好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把 map 集合转换成为 json字符串</span>        String personMapJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMapJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Person<span class="token operator">></span> personMap2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personMapJsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Person<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMap2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> personMap2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="AJAX请求"><a href="#AJAX请求" class="headerlink" title="AJAX请求"></a>AJAX请求</h2><h3 id="什么是-AJAX请求"><a href="#什么是-AJAX请求" class="headerlink" title="什么是 AJAX请求"></a><strong>什么是</strong> AJAX请求</h3><p>​    AJAX 即“Asynchronous Javascript  And  XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 技术</p><p>​    AJAX 是一种浏览器<strong>通过 js 异步发起请求，局部更新页面</strong>的技术。Ajax 请求的局部更新，浏览器地址栏不会发生变化而且局部更新<strong>不会舍弃原来页面的内容</strong> </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>AjaxServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.whw.servlet.AjaxServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>AjaxServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/ajaxServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">javaScriptAjax</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ajax请求过来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"HH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// json格式的字符串</span>    Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String personJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="原生JavaScript实现AJAX"><a href="#原生JavaScript实现AJAX" class="headerlink" title="原生JavaScript实现AJAX"></a>原生JavaScript实现AJAX</h3><ul><li>原生JavaScript实现AJAX</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">// 在这里使用javaScript语言发起Ajax请求，访问服务器AjaxServlet中javaScriptAjax</span>   <span class="token keyword">function</span> <span class="token function">ajaxRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1、我们首先要创建XMLHttpRequest </span>   <span class="token keyword">var</span> xmlhttprequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2、调用open方法设置请求参数</span>   xmlhttprequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"http://localhost:8080/12_json_ajax_i18n/ajaxServlet?action=javaScriptAjax"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span>   xmlhttprequest<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttprequest<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttprequest<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"收到服务器返回的数据："</span> <span class="token operator">+</span> xmlhttprequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> jsonObj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xmlhttprequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把响应的数据显示在页面上</span>         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"编号："</span> <span class="token operator">+</span> jsonObj<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" , 姓名："</span> <span class="token operator">+</span> jsonObj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3、调用send方法发送请求</span>   xmlhttprequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="JQuery的AJAX请求"><a href="#JQuery的AJAX请求" class="headerlink" title="JQuery的AJAX请求"></a>JQuery的AJAX请求</h3><p> $.ajax方法</p><ul><li>url        请求的地址</li><li>type     请求的类型，GET  或者  POST</li><li>data     表示发送给服务器的数据<ul><li>格式一：name=value&amp;name=value</li><li>格式二：{key:value}</li></ul></li><li>success 请求成功，响应的回调函数</li><li>dataType   响应的数据类型<ul><li>常用的数据类型；<ul><li>text  表示纯文本</li><li>xml  表示xml数据</li><li>json  表示json对象   （常用！！）</li></ul></li></ul></li></ul><ul><li>Jquery实现AJAX</li></ul><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   url<span class="token punctuation">:</span><span class="token string">"http://localhost:8080/12_json_ajax_i18n/ajaxServlet"</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"action"</span><span class="token punctuation">:</span><span class="token string">"jQueryAjax"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   type<span class="token punctuation">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>   success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">" ajax 编号："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" , 姓名："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   dataType <span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>$.get 方法和$.post 方法</p><p>​        url             请求的 url 地址 </p><p>​        data          发送的数据 </p><p>​        callback    成功的回调函数 </p><p>​        type           返回的数据类型</p><ul><li>Jquery-ajax–get请求</li></ul><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/12_json_ajax_i18n/ajaxServlet"</span><span class="token punctuation">,</span><span class="token string">"action=jQueryGet"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">" get 编号："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" , 姓名："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        </p><ul><li>Jquery-ajax–post请求</li></ul><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/12_json_ajax_i18n/ajaxServlet"</span><span class="token punctuation">,</span><span class="token string">"action=jQueryPost"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">" post 编号："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" , 姓名："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>$.getJSON 方法</p><p>​    url                   请求的 url 地址 </p><p>​    data               发送给服务器的数</p><p>​    callback         成功的回调函数</p><ul><li> jQuery-ajax–getJson  请求</li></ul><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/12_json_ajax_i18n/ajaxServlet"</span><span class="token punctuation">,</span><span class="token string">"action=jQueryGetJSON"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">" getJSON 编号："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" , 姓名："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>表单序列化 serialize()</p><p>serialize()可以把表单中所有表单项的内容都获取到，并以 name=value&amp;name=value 的形式进行拼接。</p></li></ul><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/12_json_ajax_i18n/ajaxServlet"</span><span class="token punctuation">,</span><span class="token string">"action=jQuerySerialize&amp;"</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">" Serialize 编号："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" , 姓名："</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h2><h3 id="什么是i18n国际化"><a href="#什么是i18n国际化" class="headerlink" title="什么是i18n国际化"></a>什么是i18n国际化</h3><ul><li><p>​      国际化（Internationalization）指的是同一个网站可以支持多种不同的语言，以方便不同国家，不同语种的用户访问。</p></li><li><p>​      关于国际化我们想到的最简单的方案就是为不同的国家创建不同的网站，比如苹果公司，他的英文官网是： <a href="http://www.apple.com/">http://www.apple.com</a> 而中国官网是 <a href="http://www.apple.com/cn">http://www.apple.com/cn</a></p></li><li><p>​       苹果公司这种方案并不适合全部公司，而我们希望相同的一个网站，而不同人访问的时候可以根据用户所在的区域显示 不同的语言文字，而网站的布局样式等不发生改变。</p></li><li><p>​       于是就有了我们说的国际化，国际化总的来说就是同一个网站不同国家的人来访问可以显示出不同的语言。但实际上这 种需求并不强烈，一般真的有国际化需求的公司，主流采用的依然是苹果公司的那种方案，为不同的国家创建不同的页面。</p></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724234135.png"></p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="2021/07/19/Linux%E7%AC%94%E8%AE%B0/"/>
      <url>2021/07/19/Linux%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>==Linux学习阶段：==</p><p>​    第1阶段：linux环境下的基本操作命令，包括文件操作命令(rmmkdirchmod,chown)编辑工具使用（vivim）linux用户管理(useradduserdelusermod)等</p><p>​    第2阶段：linux的各种配置（环境变量配置，网络配置，服务配置）</p><p>​    第3阶段：linux下如何搭建对应语言的开发环境（大数据，JavaEE,Python等）</p><p>​    第4阶段：能编写shell脚本，对Linux服务器进行维护。</p><p>​    第5阶段：能进行安全设置，防止攻击，保障服务器正常运行，能对系统调优。</p><p>​    第6阶段：深入理解Linux系统（对内核有研究），熟练掌握大型网站应用架构组成、并熟悉各个环节的部署和维护方法</p><p>==学习方法：==</p><p>1.高效而愉快的学习</p><p>2.先建立一个整体框架，然后细节</p><p>3.不需要掌握所有的Linux指令，要学会查询手册和百度</p><p>4.先knowhow,再knowwhy</p><p>5.计算机是一门”做中学”的学科,不是会了再做，而是做了才会.</p><p>6.适当的囫囵吞枣</p><p>7.Linux不是编程，重点是实际操作，各种常用指令要玩熟记</p><h2 id="第一章-Linux入门"><a href="#第一章-Linux入门" class="headerlink" title="第一章 Linux入门"></a>第一章 Linux入门</h2><h3 id="1-1-Linux介绍"><a href="#1-1-Linux介绍" class="headerlink" title="1.1 Linux介绍"></a>1.1 Linux介绍</h3><p>Linux是一款操作系统，免费，开源，安全，高效，稳定，处理高并发非常强悍，现在很多企业级的项目都部署到Linux/Unix服务器运行</p><p>Linux创始人 —&gt;  linux 林纳斯</p><p>Linux吉祥物 —-&gt; 企鹅 Tux(晚礼服)</p><p>Linux版本(就是对Linux内核进行了包装)：</p><p>​      CentOSE    Redhat   Ubuntu   SUSE   红旗Linux</p><h2 id="第二章-Linux基础篇"><a href="#第二章-Linux基础篇" class="headerlink" title="第二章 Linux基础篇"></a>第二章 Linux基础篇</h2><p>安装VM和CentOS</p><h3 id="2-1-环境创建"><a href="#2-1-环境创建" class="headerlink" title="2.1 环境创建"></a>2.1 环境创建</h3><p>学习Linux需要一个环境，需要创建一个虚拟机，然后再虚拟机上安装一个Centos系统来学习</p><ul><li>安装virtual machine(百度教程)</li><li>再安装Linux(CentOS)(百度)</li></ul><h3 id="2-2-windows、VM、CentOS的关系"><a href="#2-2-windows、VM、CentOS的关系" class="headerlink" title="2.2 windows、VM、CentOS的关系"></a>2.2 windows、VM、CentOS的关系</h3><ul><li>通过VM软件来创建一个虚拟机空间</li><li>通过VM软件来在创建好的虚拟机空间上安装CentOS操作系统</li></ul><h3 id="2-3-CentOS安装中的注意点"><a href="#2-3-CentOS安装中的注意点" class="headerlink" title="2.3 CentOS安装中的注意点"></a>2.3 CentOS安装中的注意点</h3><p>==<strong>面试喜欢问</strong>==</p><ol><li><p>创建虚拟机空间</p><p>这里在配置网络连接是，有三种方式要注意：</p><p>①  桥连接：</p><pre><code>Linux可以和其他的系统通信，但是可能造成ip冲突</code></pre><p>② NAT(网络地址转换方式)：母机上会新生成一个ip地址，linux和新生成的ip地址关联，还可以访问外网，并且不会造成ip冲突</p><p>③主机模式：Linux就是一个独立的主机，不能访问外网</p></li></ol><p>设置密码的时候一定要是复杂的，用密码生成器   <a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></p><p>swap分区，当内存不够用时可以暂时的替代内存，不能分配太多，一般是分配的物理内存的1.5 - 2 倍之间</p><h3 id="2-4-CentOS的终端使用和联网"><a href="#2-4-CentOS的终端使用和联网" class="headerlink" title="2.4 CentOS的终端使用和联网"></a>2.4 CentOS的终端使用和联网</h3><p>1.终端的使用，点击鼠标右键，即可选择打开终端</p><p>2.配置网络</p><p>​       点击右上方的联网图标，选择启用eth0，即可成功连接网络</p><h3 id="2-5-VMTools安装"><a href="#2-5-VMTools安装" class="headerlink" title="2.5 VMTools安装"></a>2.5 VMTools安装</h3><p>功能：Windows与CentOS实现共享文件夹的效果</p><p>​        可以直接粘贴命令在windows和centos系统之间</p><p>​        可以设置windows和centos的共享文件夹 </p><p><strong>安装步骤</strong></p><p>1.进入centos</p><p>2.点击vm菜单的-&gt;installvmwaretools</p><p>3.centos会出现一个vm的安装包</p><p>4.点击右键解压,得到一个安装文件</p><p>5.进入该vm解压的目录，该文件在/root/桌面/vmware-tools-distrib/下</p><p>6.安装./vmware-install.pl</p><p>7.全部使用默认设置即可</p><p>8.需要reboot重新启动即可生效</p><p><strong>使用vmtools来设置windows和linux的共享文件夹</strong></p><p>1)菜单-&gt;虚拟机-&gt;设置-&gt;选项-&gt;共享文件夹-&gt;添加-&gt;在主机路径下添加windows下的文件路径即可,</p><p>2)windows和centos共享目录可以读写文件了，两边会同步更新</p><p>3)共享文件位置在centos的/mnt/hgfs/下</p><h2 id="第三章-Linux目录结构"><a href="#第三章-Linux目录结构" class="headerlink" title="第三章 Linux目录结构"></a>第三章 Linux目录结构</h2><h3 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h3><p>linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录</p><p>==<strong>在Linux世界里，一切皆文件</strong>==</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720054116.png"></p><h3 id="3-2-目录结构的具体介绍"><a href="#3-2-目录结构的具体介绍" class="headerlink" title="3.2 目录结构的具体介绍"></a>3.2 目录结构的具体介绍</h3><ul><li><p>/bin[<strong>重点</strong>]   ： 是Binary的缩写，这个目录存放这最经常使用的命令</p></li><li><p>/sbin  ： s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</p></li><li><p>/home：存放普通用户的主目录，在Linux中内阁用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p></li><li><p>/root[<strong>重点</strong>]：该目录为系统管理员，也称为超级权限者的用户主目录</p></li><li><p>/boot[<strong>重点</strong>]：存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p></li><li><p>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息，<strong>不要随意改动</strong></p></li><li><p>/srv：service的缩写，该目录存放一些服务启动后需要提取的数据，<strong>不要随意改动</strong></p></li><li><p>/sys：这是Linux2.6内核的一个很大变化，该目录下安装了2.6内核中新出现的一个文件系统，<strong>不要随意改动</strong></p></li><li><p>/tmp：这个目录是用来存放一些临时文件的.</p></li><li><p>/dev：类似于windows设备管理器，把所有的硬件用文件的形式存储</p></li><li><p>/media[<strong>重点</strong>]：Linux系统自动识别一些设备，例如U盘，光驱等，当识别后，Linux会把识别的设备挂载到这个目录下</p></li><li><p>/mnt[<strong>重点</strong>]：系统提供该目录是为了让用户临时挂载别文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，然后进入该目录就可以查看里面的内容了。      例如 d:/myshare</p></li><li><p>/opt：这是给主机<strong>额外的安装软件</strong>所摆放的目录，如安装ORACLE数据库就可以放到该目录下</p></li><li><p>/user/local[<strong>重点</strong>]：这是另外一个给主机<strong>额外安装软件的安装目录</strong>。一般是通过编译源码方式安装的程序。</p></li><li><p>/var[**重点]**：这个目录存放这在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下，包括各种日志文件。</p></li><li><p>/selinux[security-enhanced linux]360 ：SELinux是一种安全子系统，控制程序只能访问特定文件</p></li></ul><h3 id="3-3-Linux目录总结"><a href="#3-3-Linux目录总结" class="headerlink" title="3.3 Linux目录总结"></a>3.3 Linux目录总结</h3><ul><li>Linux的目录中有且只有一个根目录  /</li><li>Linux的各个目录存放的内容是规划好的，不能乱放文件。</li><li>Linux是以文件的形式管理设备，因此Linux系统，一切皆为文件</li><li>Linux的各个文件目录下存放什么内容，要有一个清楚的认识。</li><li>学习完后要有一颗Linux目录树</li></ul><h2 id="第四章-远程登录Linux系统"><a href="#第四章-远程登录Linux系统" class="headerlink" title="第四章 远程登录Linux系统"></a>第四章 远程登录Linux系统</h2><h3 id="4-1-为什么要远程登录Linux"><a href="#4-1-为什么要远程登录Linux" class="headerlink" title="4.1 为什么要远程登录Linux"></a>4.1 为什么要远程登录Linux</h3><p>公司再具体开发的时候，情况如下：</p><ul><li>Linux服务器是开发小组共享的</li><li>正式上线的项目时运行在公网的。</li><li>因此程序员需要远程登录到CentOS进行项目管理或者开发</li><li>远程登录客户端有Xshell5，Xftp5</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720063313.png"></p><h3 id="4-2-远程登录Linux-Xshell5"><a href="#4-2-远程登录Linux-Xshell5" class="headerlink" title="4.2 远程登录Linux-Xshell5"></a>4.2 远程登录Linux-Xshell5</h3><p>​    说明：Xshell是目前最好的远程登录到Linux操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。</p><p>​    Xshell[1]是一个强大的安全终端模拟软件，它支持SSH1,SSH2,以及MicrosoftWindows平台的TELNET协议。</p><p>​    Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</p><p>​    特别说明：如果希望安装好XShell5就可以远程访问Linux系统的话，需要有一个前提，就是Linux启用了SSHD服务，<strong>该服务会监听22号端口</strong></p><h3 id="4-3-安装XShell5并使用"><a href="#4-3-安装XShell5并使用" class="headerlink" title="4.3 安装XShell5并使用"></a>4.3 安装XShell5并使用</h3><h4 id="4-3-1-安装过程"><a href="#4-3-1-安装过程" class="headerlink" title="4.3.1 安装过程"></a>4.3.1 安装过程</h4><p>自己百度教程，傻瓜式安装</p><h4 id="4-3-2-关键配置"><a href="#4-3-2-关键配置" class="headerlink" title="4.3.2 关键配置"></a>4.3.2 关键配置</h4><p>联网环境下，在CentOS中的终端中 输入 ifconfig 获取IP地址</p><p>打开XShell5，按alt + o 弹出会话连接窗口，点击新建，名称和主机都选择CentOS的ip地址，协议为SSH，<strong>端口号一定要是22号</strong></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720070444.png"></p><p><strong>XShel5远程登录到Linux后，就可以使用指令来操作Linux系统</strong></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720070526.png"></p><h3 id="4-4远程上传下载文件Xftp5"><a href="#4-4远程上传下载文件Xftp5" class="headerlink" title="4.4远程上传下载文件Xftp5"></a>4.4远程上传下载文件Xftp5</h3><h4 id="4-4-1XFtp5软件介绍"><a href="#4-4-1XFtp5软件介绍" class="headerlink" title="4.4.1XFtp5软件介绍"></a>4.4.1XFtp5软件介绍</h4><p>​        是一个基于windows平台的功能强大的SFTP、FTP文件传输软件。使用了Xftp以后，windows用户能安全地在UNIX/Linux和WindowsPC之间传输文件</p><h4 id="4-4-2-XFtp5软件的安装"><a href="#4-4-2-XFtp5软件的安装" class="headerlink" title="4.4.2 XFtp5软件的安装"></a>4.4.2 XFtp5软件的安装</h4><p>百度教程</p><h4 id="4-4-3-Xftp5的配置和使用"><a href="#4-4-3-Xftp5的配置和使用" class="headerlink" title="4.4.3 Xftp5的配置和使用"></a>4.4.3 Xftp5的配置和使用</h4><p>打开XShell5，按alt + o 弹出会话连接窗口，点击新建，名称和主机都选择CentOS的ip地址，协议为SFTP，<strong>端口号一定要是22号</strong>，输入用户名密码点击连接即可</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720071725.png"></p><p><img src="%5Cimages%5CQQ%E6%88%AA%E5%9B%BE20210720072142.png" alt="QQ截图20210720072142"></p><h4 id="4-4-4解决XFTP5中文乱码的问题"><a href="#4-4-4解决XFTP5中文乱码的问题" class="headerlink" title="4.4.4解决XFTP5中文乱码的问题"></a>4.4.4解决XFTP5中文乱码的问题</h4><p>点击XShell5的   属性—&gt; 选项 —&gt;  编码改为utf-8</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720072517.png"></p><h2 id="第五章-vi-和-vim-编辑器"><a href="#第五章-vi-和-vim-编辑器" class="headerlink" title="第五章 vi 和 vim 编辑器"></a>第五章 vi 和 vim 编辑器</h2><h3 id="5-1vi-和-vim-的基本介绍"><a href="#5-1vi-和-vim-的基本介绍" class="headerlink" title="5.1vi 和 vim 的基本介绍"></a>5.1vi 和 vim 的基本介绍</h3><p>​        所有的 Linux 系统都会内建 vi 文本编辑器。</p><p>​        Vim 具有程序编辑的能力，可以看做是Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><h3 id="5-2vi-和-vim-的三种常见模式"><a href="#5-2vi-和-vim-的三种常见模式" class="headerlink" title="5.2vi 和 vim 的三种常见模式"></a>5.2vi 和 vim 的三种常见模式</h3><h4 id="5-2-1正常模式"><a href="#5-2-1正常模式" class="headerlink" title="5.2.1正常模式"></a>5.2.1正常模式</h4><p>​    在正常模式下，我们可以使用快捷键</p><p> 以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件数据。</p><h4 id="5-2-2插入模式-编辑模式"><a href="#5-2-2插入模式-编辑模式" class="headerlink" title="5.2.2插入模式/编辑模式"></a>5.2.2插入模式/编辑模式</h4><p>​    在模式下，程序员可以输入内容。</p><p>​    按下i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按i 即可</p><h4 id="5-2-3命令模式"><a href="#5-2-3命令模式" class="headerlink" title="5.2.3命令模式"></a>5.2.3命令模式</h4><p>​    在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的动作则是在此模式中达成的！</p><h3 id="5-3快速入门案例"><a href="#5-3快速入门案例" class="headerlink" title="5.3快速入门案例"></a>5.3快速入门案例</h3><p>使用 vim 开发一个 Hello.java 程序, 保存.步骤说明和演示</p><ul><li>在Xshell5中  输入 vim hello.java 进入编辑模式</li><li>在编辑模式中写内容  </li><li>按ESC 退出编辑模式 到 命令模式   </li><li>输入  :wq  保存并退出</li></ul><h3 id="5-4vi-和-vim-三种模式的相互转化"><a href="#5-4vi-和-vim-三种模式的相互转化" class="headerlink" title="5.4vi 和 vim 三种模式的相互转化"></a>5.4vi 和 vim 三种模式的相互转化</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720193838.png"></p><p>步骤：  在命令行下，  输入   vim xxx  进入正常模式 ，输入 i或者a  进入编辑模式， 按ESC退出编辑模式</p><p>​             又进入正常模式，输入 :  或者  /  进入命令模式，在命令行下输入 wq 表示保存并正常退出， 输入q 表示没有修改并退出     输入q!  表示 不保存并且强制退出 ， 或者按ESC退出命令模式</p><h3 id="5-5快捷键的使用"><a href="#5-5快捷键的使用" class="headerlink" title="5.5快捷键的使用"></a>5.5快捷键的使用</h3><ul><li><p>yy：拷贝当前行  , 数字n+yy ：拷贝光标所在行后面的n行，比如5yy，P ：在光标所在行下一行进行粘贴。</p></li><li><p>删除当前行 dd , 删除当前行向下的n 行 n+dd  比如  3dd   </p></li><li><p>在文件中查找某个单词  命 令行下输入   /关键字 ， 回车查找 , 输入 n 就是查找下一个。</p></li><li><p>设置文件的行号，取消文件的行号，命令行下 : set nu 和 :set nonu</p></li><li><p>正常模式下  输入G ，到文档最末行，输入 gg 到文档最首行</p></li><li><p>正常模式下，输入  u  为撤回</p></li><li><p>将光标移动到指定行</p><ul><li>显示行号   :set nu</li><li>输入 指定行的 行号</li><li>按快捷键 shift + g</li></ul></li></ul><p>如果需要其他快捷键自行百度</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720201438.png"></p><h2 id="第六章-开机、重启和用户操作"><a href="#第六章-开机、重启和用户操作" class="headerlink" title="第六章 开机、重启和用户操作"></a>第六章 开机、重启和用户操作</h2><h3 id="6-1关机-amp-重启命令"><a href="#6-1关机-amp-重启命令" class="headerlink" title="6.1关机&amp;重启命令"></a>6.1关机&amp;重启命令</h3><h4 id="6-1-1基本介绍"><a href="#6-1-1基本介绍" class="headerlink" title="6.1.1基本介绍"></a>6.1.1基本介绍</h4><p>shutdown:</p><ul><li>shutdown -h now  ： 表示立即关机</li><li>shutdown -h 1：表示1分钟后关机</li><li>shutdown -r now：立即重启</li></ul><p>halt</p><p>​    直接使用，表示停机指令，等价于关机</p><p>reboot：重启计算机</p><p>sync：把内存的数据同步到磁盘</p><p>==<strong>注意细节</strong>==： 当我们关机或者重启时，都应该先执行以下sync 指令，把内存的数据写入磁盘，防止数据丢失。</p><h3 id="6-2用户登录和注销"><a href="#6-2用户登录和注销" class="headerlink" title="6.2用户登录和注销"></a>6.2用户登录和注销</h3><h4 id="6-2-1基本介绍"><a href="#6-2-1基本介绍" class="headerlink" title="6.2.1基本介绍"></a>6.2.1基本介绍</h4><ol><li><p> 登录时尽量少用root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用 ”su - 用户名“ 命令来切换成系统管理员身份.</p></li><li><p>在Xshell5中的提示符下输入 logout 即可退出登录</p></li></ol><h3 id="6-3用户管理"><a href="#6-3用户管理" class="headerlink" title="6.3用户管理"></a>6.3用户管理</h3><h4 id="6-3-1基本介绍"><a href="#6-3-1基本介绍" class="headerlink" title="6.3.1基本介绍"></a>6.3.1基本介绍</h4><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721032527.png"></p><ul><li><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p></li><li><p>Linux 的用户需要至少要属于一个组</p></li></ul><h3 id="6-4添加用户"><a href="#6-4添加用户" class="headerlink" title="6.4添加用户"></a>6.4添加用户</h3><h4 id="6-4-1基本语法"><a href="#6-4-1基本语法" class="headerlink" title="6.4.1基本语法"></a>6.4.1基本语法</h4><p>useradd  [选项]   用户名</p><p>默认创建家目录名与用户名一样的目录，把此用户放入该目录下面</p><h4 id="6-4-2实例"><a href="#6-4-2实例" class="headerlink" title="6.4.2实例"></a>6.4.2实例</h4><ul><li>添加用户  xm</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721033058.png"></p><p>【补充: cd 表示change directory, 切换目录】</p><ul><li>useradd -d 指定目录 ：将用户添加到指定的目录中</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721033730.png"></p><h3 id="6-5给用户指定或者修改密码"><a href="#6-5给用户指定或者修改密码" class="headerlink" title="6.5给用户指定或者修改密码"></a>6.5给用户指定或者修改密码</h3><p>基本语法</p><p>passwd  用户名</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721034249.png"></p><p>工作中必须用复杂的密码，要不然会被人攻击</p><p>输入密码的时候界面是看不到的</p><h3 id="6-6删除用户"><a href="#6-6删除用户" class="headerlink" title="6.6删除用户"></a>6.6删除用户</h3><h4 id="6-6-1基本语法"><a href="#6-6-1基本语法" class="headerlink" title="6.6.1基本语法"></a>6.6.1基本语法</h4><p>userdel  用户名</p><h4 id="6-6-2应用案例"><a href="#6-6-2应用案例" class="headerlink" title="6.6.2应用案例"></a>6.6.2应用案例</h4><ul><li>删除用户xm，但是要保留家目录  ：  userdel  xm</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721034831.png"></p><ul><li>删除用户xh 以及用户主目录： userdel -r xh</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721034723.png"></p><p><strong>在删除用户时，我们一般不会将家目录删除。</strong></p><h3 id="6-7查询用户信息"><a href="#6-7查询用户信息" class="headerlink" title="6.7查询用户信息"></a>6.7查询用户信息</h3><p>基本语法：id 用户名</p><p>查询用户 root  和  sg </p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721035113.png"></p><h3 id="6-8切换用户"><a href="#6-8切换用户" class="headerlink" title="6.8切换用户"></a>6.8切换用户</h3><p>介绍：</p><p>​    在操作Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如root</p><p>语法：su – 切换用户名</p><p>  从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>  当需要返回到原来用户时，使用exit 指令</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721040657.png"></p><p>低级用户切换到root用户需要输入密码</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721040803.png"></p><p>whomi ：查看当前用户名</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721040925.png"></p><h3 id="6-9用户组"><a href="#6-9用户组" class="headerlink" title="6.9用户组"></a>6.9用户组</h3><p>类似于角色，系统可以对有共性的多个用户进行统一的管理。</p><h4 id="6-9-1增加组"><a href="#6-9-1增加组" class="headerlink" title="6.9.1增加组"></a>6.9.1增加组</h4><p>groupadd 组名</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721041336.png"></p><h4 id="6-9-2删除组"><a href="#6-9-2删除组" class="headerlink" title="6.9.2删除组"></a>6.9.2删除组</h4><p>语法：groupdel 组名</p><p><strong>案例</strong></p><p>增加一个用户 zwj, 直接将他指定到 wudang</p><p>#groupadd wudang</p><p>#useradd -g wudang zwj</p><p>#id zwj</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721041851.png"></p><h4 id="6-9-3修改用户的组"><a href="#6-9-3修改用户的组" class="headerlink" title="6.9.3修改用户的组"></a>6.9.3修改用户的组</h4><p>指令：usermod -g 用户组 用户名</p><p>案例：将zwj 用户修改到shaolin组</p><p>#groupadd shaolin</p><p>#usermod -g shaolin zwj</p><p>#id zwj</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721042545.png"></p><h3 id="6-10文件"><a href="#6-10文件" class="headerlink" title="6.10文件"></a>6.10文件</h3><p>这里的笔记有问题，因为版本和老师的不一样，找不到自己创建的组和用户的信息</p><p><strong>/etc/passwd 文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721043830.png"></p><p><strong>/etc/shadow 文件</strong></p><p>口令的配置文件</p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动<br>时间:失效时间:标志</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721043750.png"></p><p><strong>/etc/group 文件</strong></p><p>组(group)的配置文件，记录Linux 包含的组的信息<br>每行含义：组名:口令:组标识号:组内用户列表</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721043722.png"></p><h2 id="第七章-实用指令"><a href="#第七章-实用指令" class="headerlink" title="第七章 实用指令"></a>第七章 实用指令</h2><h3 id="7-1指定运行级别"><a href="#7-1指定运行级别" class="headerlink" title="7.1指定运行级别"></a>7.1指定运行级别</h3><p>运行级别说明：<br>0 ：关机<br>1 ：单用户【找回丢失密码】<br>2：多用户状态没有网络服务<br>3：多用户状态有网络服务<br>4：系统未使用保留给用户<br>5：图形界面<br>6：系统重启<br>常用运行级别是3 和5 ，要修改默认的运行级别可改文件<br>/etc/inittab 的  id:5:initdefault:这一行中的数字进入编辑模式改为对应的运行级别就行了</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721044416.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721045107.png"></p><h3 id="7-2-切换到指定运行级别的指令"><a href="#7-2-切换到指定运行级别的指令" class="headerlink" title="7.2 切换到指定运行级别的指令"></a>7.2 切换到指定运行级别的指令</h3><p>基本语法：init [012356]</p><p>实例：通过init 来切换不同的运行级别，比如动 5-&gt;3 ， 然后关机</p><p>​          </p><h4 id="7-2-1-面试题"><a href="#7-2-1-面试题" class="headerlink" title="7.2.1 面试题"></a>7.2.1 面试题</h4><p>如何找回root 密码，如果我们不小心，忘记root 密码，怎么找回。</p><p>思路：进入到单用户模式，然后修改 root 密码，因为单用户模式， root不需要密码就可以登录</p><p>开机 -&gt; 在引导时输入 回车键 -&gt;  看到一个界面输入 e  -&gt;  看到一个新的界面，选中第二行（编辑内核）在输入 e-&gt; 在这行最后输入空格1 ,再输入 回车键-&gt;再次输入b ,这时就会进入到单用户模式。这时，我们就进入到单用户模式，使用passwd 指令来修改root 密码。</p><h3 id="7-3-帮助指令"><a href="#7-3-帮助指令" class="headerlink" title="7.3 帮助指令"></a>7.3 帮助指令</h3><p>当我们对某个指令不熟悉时，我们可以使用Linux 提供的帮助指令来了解这个指令的使用方法。</p><h4 id="7-3-1-man-获得帮助信息"><a href="#7-3-1-man-获得帮助信息" class="headerlink" title="7.3.1 man 获得帮助信息"></a>7.3.1 man 获得帮助信息</h4><p>语法：man [命令或配置文件]（功能描述：获得帮助信息）比如   man  ls</p><p>（有问题问男人，哈哈哈）</p><h4 id="7-3-2-help指令"><a href="#7-3-2-help指令" class="headerlink" title="7.3.2 help指令"></a>7.3.2 help指令</h4><p>语法；help 命令 （功能描述：获得shell 内置命令的帮助信息）例如  help  cd</p><p>有不会的百度，快捷有效</p><h3 id="7-4文件目录类"><a href="#7-4文件目录类" class="headerlink" title="7.4文件目录类"></a>7.4文件目录类</h3><p>以下涉及到目录的都可以有<strong>相对路径和绝对路径</strong></p><ul><li><strong>pwd 指令</strong>：<ul><li>语法：pwd  </li><li>功能描述：显示当前工作目录的绝对路径</li></ul></li></ul><ul><li><strong>ls指令</strong><ul><li>语法： ls    [选项]     [目录或者文件]</li><li>功能：查看当前目录所有的内容信息，或者文件的详细信息</li><li>常用选项：<ul><li>-a：显示当前目录所有的文件和目录，包括隐藏的。</li><li>-l：以列表的方式显示信息</li><li>-h ：将文件大小转成人可以看懂的  比如  2M   3G</li></ul></li></ul></li></ul><ul><li><p><strong>cd 指令</strong></p><ul><li><p>基本语法：cd[参数] </p></li><li><p>功能描述：切换到指定目录(必须是绝对路径)</p></li><li><p>常用参数</p><ul><li>cd~  或者 cd ：回到自己的家目录</li><li>cd.. ：回到当前目录的上一级目录</li><li>绝对路径：从跟目录开始定位到要去的目录</li><li>相对路径：从当前目录开始定位到要去的目录</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：使用绝对路径切换到root目录</p><p>cd /root</p></li><li><p>案例2：使用相对路径到/root 目录</p><p>这里我们需要知道该用户目录在哪个目录下，才能写出这个指令，假设在 /home/whw</p><p>cd ../../</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721092714.png"></p></li></ul></li></ul></li></ul><ul><li><p><strong>mkdir指令</strong></p><ul><li><p>作用：mkdir 指令用于创建目录(make directory)</p></li><li><p>语法：mkdir [选项]  要创建的目录的绝对路径或者相对路径</p></li><li><p>常用选项：</p><ul><li> -p ： 创建多级目录</li></ul></li><li><p>案例：</p><ul><li><p>案例1：在 home  文件夹下创建一个 whw 目录</p><p>​     mkdir /home/whw</p><p>​     或者 在home 目录下  mkdir whw</p></li><li><p>案例2 ：创建多级目录  /home/animal/tiger</p><p>​    如果希望创建多级目录  带上 -p</p><p>​     mkdir -p /home/animal/tiger</p></li></ul></li></ul></li></ul><ul><li><strong>rmdir指令</strong><ul><li>介绍：rmdir 指令删除==<strong>空目录</strong>==</li><li>基本语法：rmdir [选项]  要删除的空目录</li><li>实例<ul><li>案例1：删除一个目录  /home/dog</li></ul></li><li>使用细节<ul><li>rmdir删除的是空目录，如果目录下有内容时无法删除！！！</li><li>rm  -rf :  删除非空目录<ul><li>用法：rm -rf  [要删除目录的绝对路径或者相对路径]</li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>touch 指令</strong></p><ul><li><p>作用：创建空文件</p></li><li><p>语法：touch 文件名称</p></li><li><p>应用实例：</p><ul><li><p>案例1：创建一个空文件 hi.txt</p><p>touch hi.txt</p></li><li><p>案例2：创建多个空文件 ok.txt   ok1.txt</p><p>touch  ok.txt  ok1.txt</p></li></ul></li></ul></li></ul><ul><li><p>==<strong>cp指令[重要]</strong>==</p><ul><li><p>作用：cp指令拷贝文件到指定目录</p></li><li><p>语法：cp [选项]   source(拷贝的东西)   dest(拷贝到的地方)</p></li><li><p>常用选项</p><ul><li>  -r  : 递归复制整个文件夹</li></ul></li><li><p>案例</p><ul><li><p>案例1：将 /home/ok,txt 拷贝到  /home/whw 目录下</p><p>   cp ok.txt /home/whw</p></li><li><p>案例2：递归复制整个文件夹</p><ul><li><p>举例2.1：将 /home/whw 整个whw文件夹拷贝到  /home/zwj 目录下(当前是在  /home  下)</p><p> cp  -r  whw/  zwj/</p><p> <strong>注意点</strong>：一定要留心当前的目录位置，然后要准确的定位源目录和目标目录</p></li><li><p>举例2.2：将 /home/whw 整个whw文件夹<strong>再次</strong>拷贝到  /home/zwj 目录下</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721101454.png"></p><p> \cp  -r  whw/  zwj/   </p><p> 该指令会强制覆盖原来的文件，不会再提示是否覆盖的信息</p></li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>rm指令</strong></p><ul><li><p>作用：删除文件或目录</p></li><li><p>语法：rm [选项]  要删除的文件或目录</p></li><li><p>常用选项</p><ul><li>-r ：递归删除整个文件夹</li><li>-f :   强制删除不提示</li></ul></li><li><p>实案例：</p><ul><li><p>案例1：将 /home/ok.txt 删除</p><p>在文件所在目录下输入    rm ok.txt</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721102332.png"></p></li><li><p>案例2：递归删除整个文件夹 /home/whw</p><p>rm -r -f  whw/</p><p>-r  和  -f  可以写成 -rf     —-&gt;    rm -rf whw/</p></li></ul></li></ul></li></ul><ul><li><p><strong>mv指令</strong></p><ul><li><p>作用：移动文件与目录   或者  重命名</p></li><li><p>基本语法</p><ul><li>mv oldNameFile newNameFile   ：重命名</li><li>mv /temp/moveFile /targetFolder  :  移动文件</li></ul></li><li><p>应用实例</p><ul><li>案例1：将 /home/hi.txt 文件 重新命名为 pig.txt</li></ul><p>​           mv hi.txt pig.txt</p><ul><li><p>案例2:   将 当前目录下的 pig.txt  文件 移动到 /root/ 目录下</p><p>  mv pig.txt  /root/</p></li></ul></li></ul></li></ul><ul><li><p><strong>cat指令</strong></p><ul><li><p>作用：查看文件内容，以==<strong>只读</strong>==的方式打开</p></li><li><p>基本语法：cat [选项] 要查看的文件</p></li><li><p>常用选项</p><ul><li>-n ： 显示符号</li></ul></li><li><p>应用实例</p><ul><li><p>案例1:  /etc/profile 文件内容，并显示符号   </p><p> cat -n /etc/profile</p></li></ul></li><li><p>使用细节：</p><ul><li>cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more</li><li>cat 文件名 | more     表示分页浏览  具体操作看下一个</li></ul></li></ul></li></ul><ul><li><p><strong>more指令</strong></p><ul><li><p>作用：more 指令是一个基于VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more<br>指令中内置了若干快捷键</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空格键(space)</td><td>代表向下翻一页</td></tr><tr><td>回车键(Enter)</td><td>代表向下一行</td></tr><tr><td>q</td><td>代表立刻离开more，不再显示该文件内容</td></tr><tr><td>Ctrl + f</td><td>向下翻滚一屏</td></tr><tr><td>Ctrl + b</td><td>返回上一屏</td></tr><tr><td>=</td><td>显示当前行号</td></tr><tr><td>f</td><td>输出文件名和当前行的行号</td></tr></tbody></table></li><li><p>基本语法：more 要查看的文件</p></li><li><p>操作说明：</p></li><li><p>应用实例</p><ul><li><p>案例1：采用more查看文件 /etc/profile</p><p>more   /etc/profile</p></li></ul></li></ul></li></ul><ul><li><p><strong>less指令</strong></p><ul><li><p>作用：</p><p>​      less 指令用来分屏查看文件内容，它的功能与more 指令类似，但是比more 指令更加强大，支持<br>各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示<br>需要加载内容，对于显示大型文件具有较高的效率。</p></li><li><p>语法：</p><p>​    less 要查看的文件</p></li><li><p>应用实例</p><ul><li>   实例1：采用less 查看一个大文件文件 /opt/金庸-射雕英雄传txt 精校版.txt</li></ul><pre><code>less  /opt/金庸-射雕英雄传txt 精校版.txt</code></pre></li></ul></li><li><p><strong>&gt; 指令   和   &gt;&gt; 指令</strong></p><ul><li><p>作用： &gt; 指令 :   输出重定向 ，会将原来的文件的内容覆盖</p><p>​          &gt;&gt; 指令 ： 追加， 不会覆盖原来文件的内容，而是追加到文件的尾部。</p></li><li><p>基本语法</p><ul><li><strong>ls -a &gt;文件</strong> <ul><li><p>示例：ls -a &gt; a.txt</p></li><li><p>功能描述：列表的内容写入文件a.txt 中，如果没有a.txt就创建，如果有就覆盖</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721113802.png"></p></li></ul></li></ul><ul><li><strong>ls -a &gt;&gt;文件</strong></li><li>实例 ： ls -a &gt;&gt; b.txt</li><li>功能描述：列表的内容追加到文件b.txt 的末尾，如果没有b.txt 就创建一个<img src="/images/QQ%E6%88%AA%E5%9B%BE20210721114042.png"></li></ul><ul><li><strong>cat 文件1 &gt; 文件2</strong></li><li>示例：cat /etc/profile &gt; c.txt </li><li>功能描述：将文件1 的内容覆盖到文件2<img src="/images/QQ%E6%88%AA%E5%9B%BE20210721114432.png"></li></ul><ul><li><p><strong>echo “内容”</strong></p><ul><li><p>示例：echo “内容” &gt;&gt; 文件名</p><ul><li><p>案例1：将 “hello world”  覆盖写入到  a.txt中</p><p>echo “hello world” &gt; a.txt</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721115532.png"></p></li><li><p>案例2：将  “hello world”  追加写入到  b.txt中</p><p>echo “hlllo wordl” &gt;&gt; b.txt</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721115137.png"></p></li></ul></li><li><p>功能描述：将 指定内容 添加到  指定文件中</p></li><li><p>案例：</p><ul><li><p>案例1：将 /home 目录下的文件列表 写入到 /home/info.txt 中</p><p> ls  -a  /home/   &gt;   /home/info.txt</p></li><li><p>案例2：将当前日历信息 追加到 /home/mycal 文件中 [提示 cal ]</p><p>cal &gt;&gt;  /home/mycal</p></li></ul></li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>echo 指令</strong></p><ul><li><p>作用：输出内容到控制台</p></li><li><p>语法： </p><ul><li>echo  [选项] [输出内容]</li></ul></li><li><p>应用实例：</p><ul><li><p>案例1：使用echo 指令输出环境变量,输出当前的环境路径</p><pre><code>  echo  $PATH</code></pre><p> 结果为：/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</p></li><li><p>案例2：使用echo 指令输出 hello,world!</p><pre><code> echo  hello</code></pre></li></ul></li></ul></li></ul><ul><li><p><strong>head 指令</strong></p><ul><li><p>作用：head 用于显示文件的<strong>开头部分内容</strong>，默认情况下head 指令显示文件的前10 行内容</p></li><li><p>语法： head   文件 </p></li><li><p>功能描述：</p><ul><li>head  文件：查看文件头10行内容</li><li>head -n  5   文件： 查看文件头5行内容，可以是任意数字</li></ul></li><li><p>应用实例：</p><ul><li><p>案例1：查看   /etc/profile   的前面5行代码</p><p>head -n  5   /etc/profile</p></li></ul></li></ul></li></ul><ul><li><p><strong>tail 指令</strong></p><ul><li><p>tail 用于输出文件中<strong>尾部的内容</strong>，默认情况下tail 指令显示文件的后10 行内容。</p></li><li><p>基本语法:</p><ul><li>tail   文件   ：产查看文件尾部10行内容</li><li>tail -n  5 文件： 查看文件尾部5行内容，可以是任意数字</li><li>tail -f    文件  ： 实时追踪该文档的所有更新，工作经常使用</li></ul></li><li><p>应用案例</p><ul><li><p>案例1：查看/etc/profile 最后5 行的代码</p><p>tail -n 5 /etc/profile</p></li><li><p>案例2: 实时监控 mydate.txt , 当文件有变化时， 实时更新其中的内容</p><p>tail  -f   mydate.txt</p></li></ul></li></ul></li></ul><ul><li><p><strong>ln 指令</strong></p><ul><li><p>软链接也叫符号链接，类似于windows 里的快捷方式，主要存放了链接其他文件的路径</p></li><li><p>语法：</p><p>​    ln -s [原文件或目录] [软链接名]</p></li><li><p>功能描述：</p><pre><code> 给原文件创建一个软连接</code></pre></li><li><p>应用实例</p><ul><li><p>案例1:   在/home 目录下创建一个软连接 linkToRoot，连接到 /root 目录</p><p>  in  -s  /root  LinkToRoot</p><p>再输入  cd   LinkToRoot/     会<strong>映射到</strong>   /root  目录下 ，但是它本身的位置是不变的，输入pwd还是显示在 /home 下</p></li><li><p>案例2 :  删除软连接 LinkToRoot</p><p>  rm -rf  LinkToRoot</p></li></ul></li></ul></li></ul><ul><li><p><strong>history 指令</strong></p><ul><li><p>查看已经执行过历史命令,也可以执行历史指令</p></li><li><p>语法：</p><p>   history </p></li><li><p>功能描述</p><p>  查看已经执行过的历史命令</p></li><li><p>案例</p><ul><li><p>案例1：显示最近使用过的10 个指令。</p><p>  history 10</p></li><li><p>案例2：执行历史编号为5的指令   只需要输入   !5    即可</p></li></ul></li></ul></li></ul><h3 id="7-5-时间日期类"><a href="#7-5-时间日期类" class="headerlink" title="7.5 时间日期类"></a>7.5 时间日期类</h3><ul><li>date 指令-显示当前日期<ul><li>基本语法 ：<ul><li>date    显示当前时间</li><li>date  “+ %Y”   显示当前年份</li><li>date  “+ %m”  显示当前月份</li><li>date  “+ %d”   显示当前是哪一天</li><li>date  “+ %Y-%m-%d  %H : %M : %S”  显示年月日时分秒</li></ul></li><li>案例<ul><li>案例1：显示当前时间信息     date </li><li>案例2 :  显示当前年月日       date  “+%Y”</li><li>案例3 ：显示年月日时分秒  date  “+ %Y-%m-%d  %H : %M : %S”</li></ul></li></ul></li></ul><ul><li><p><strong>date指令— 设置日期</strong></p><ul><li><p>基本语法：</p><p>  date   -s  子符串时间</p></li><li><p>应用实例</p><ul><li><p>案例1: 设置系统当前时间 ， 比如设置成 2018-10-10 11:22:22</p><p>  date -s “2021-7-21 11:22:22”    ==<strong>意外发现：Ctrl + Insert 复制内容</strong>==</p></li></ul></li></ul></li></ul><ul><li><p>cal 指令</p><ul><li><p>查看日历指令</p></li><li><p>语法：cal [选项]   </p></li><li><p>功能描述：</p><ul><li>不加选项，就显示本月日历</li><li>加选项  2020   就显示一整年的日历   也可以是2021  。。。。。</li></ul></li><li><p>应用实例</p><ul><li><p>案例1：显示当前日历     输入     cal     即可</p></li><li><p>案例2：显示2020 年日历</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721150157.png"></p></li></ul></li></ul></li></ul><h3 id="7-6-搜索查找类"><a href="#7-6-搜索查找类" class="headerlink" title="7.6 搜索查找类"></a>7.6 搜索查找类</h3><ul><li><p><strong>find 指令</strong></p><ul><li><p>作用：find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p></li><li><p>语法：</p><p>   find   [搜索范围]   [选项]</p></li><li><p>选项说明：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定文件名的查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名的所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件</td></tr></tbody></table></li><li><p>应用实例：</p><ul><li><p>案例1：按文件名：根据名称查找/home 目录下的hello.txt 文件</p><p>​            find  /home  -name  a.txt</p></li><li><p>案例2：按拥有者：查找/opt 目录下，用户名称为 root的文件</p><pre><code>       find /opt -user root</code></pre></li><li><p>案例3：查找整个linux 系统下大于20m 的文件（+n 表示大于， -n表示小于 ，n表示 等于）</p><p>​           find /  size  +20M</p></li><li><p>案例4： 查找所有目录下的所有以txt结尾的文件</p><p>​            find  /   -name  *.txt</p></li></ul></li></ul></li></ul><ul><li><p><strong>locate 指令</strong></p><ul><li><p>介绍：</p><p>​    locaate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate 时刻。</p></li><li><p>基本语法：</p><p>​    locate   搜索文件</p></li><li><p>特别说明:</p><p>​    由于locate指令基于数据库进行查询，所以第一次运行前，必须使用 ==<strong>updatedb</strong>== 指令创建locate数据库</p></li><li><p>应用实例</p><p>   案例1：请使用locate 指令快速定位 hello.txt 文件所在目录</p><p>​            首先    updatedb    </p><p>​            其次    locate a.txt</p><p> <img src="/images/QQ%E6%88%AA%E5%9B%BE20210721155306.png"></p><p>​    ==<strong>查找的是以   a.txt  结尾的文件</strong>==</p></li></ul></li></ul><ul><li><p><strong>grep 指令和 管道符号 |</strong></p><ul><li><p>作用：</p><p>​    grep 过滤查找 ， ==<strong>管道符 “|”</strong>==，表示将前一个命令的处理结果输出传递给后面的命令处理。</p></li><li><p>语法：</p><p>​    grep  [选项]  查找内容   源文件</p></li><li><p>常用选项</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-i</td><td>忽略字母大小写</td></tr></tbody></table></li><li><p>应用实例：</p><ul><li><p>案例1：请在 hello.txt 文件中，查找 “yes” (不区分大小写)所在行，并且显示行号</p><pre><code>     cat hello.txt  |  grep   -ni  yes  或者     gerp -ni  /home/hello.txt</code></pre></li></ul></li></ul></li></ul><p>​           <strong>重点关注 管道符  |</strong></p><h3 id="7-7-压缩和解压类"><a href="#7-7-压缩和解压类" class="headerlink" title="7.7 压缩和解压类"></a>7.7 压缩和解压类</h3><ul><li><p><strong>gzip/gunzip 指令</strong></p><ul><li><p>作用：</p><p>​    gzip 用于压缩文件， gunzip 用于解压文件</p></li><li><p>语法：</p><ul><li>gzip 文件  ：  压缩文件，只能将文件压缩为*.gz 文件</li><li>gunzip 文件.gz  ： 解压缩文件命令</li></ul></li><li><p>应用实例；</p><ul><li><p>案例1：将 /home 下的 hello.txt 文件进行压缩</p><p>​        gzip  /home/hello.txt</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721163348.png"></p></li><li><p>案例2： 将 /home 下的 hello.txt.gz 文件进行解压缩</p><p>​        gunzip /home/hello.txt.gz</p></li><li><p>案例3：将 /home 下的 a.txt 文件 和b.txt文件进行压缩</p><p>​        gzip  a.txt  b.txt</p></li></ul></li><li><p><strong>特别说明：</strong></p><p>​    <strong>使用  gzip  对文件进行压缩时，不会保留原来的文件</strong></p></li></ul></li></ul><ul><li><p><strong>zip/unzip 指令</strong></p><ul><li><p>作用：</p><ul><li>zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的</li></ul></li><li><p>语法：</p><ul><li>zip   [选项]   XXX . zip   将要压缩的内容   (XXX为压缩后的文件名 )<ul><li>功能描述： 压缩文件和目录</li></ul></li><li>unzip    [选项]  XXX . zip  <ul><li>功能描述：解压文件</li></ul></li></ul></li></ul><ul><li>zip 的常用选项<ul><li>-r  : 压缩目录 ，也是递归压缩</li></ul></li><li>unzip 的常用选项<ul><li>-d   解压后存放的目录   ：指定解压后文件的存放位置</li></ul></li></ul><ul><li><p>应用实例：</p><ul><li><p>案例1：将 /home 下的 所有文件压缩成 mypackage.zip</p><p>​        zip -r mypackage.zip /home/</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210721170029.png"></p></li></ul><ul><li><p>案例2：将 mypackge.zip 解压到 /opt/tmp 目录下</p><pre><code>     unzip -d /opt/tmp mypackage.zip</code></pre><p>  <img src="/images/QQ%E6%88%AA%E5%9B%BE20210721170227.png"></p></li></ul></li></ul></li><li><p><strong>tar 指令</strong></p><ul><li><p>作用：</p><p>​    tar指令是  <strong>打包指令</strong>，最后打包后的文件是  .tar.gz 的文件</p></li><li><p>语法：</p><p>​    tar [选项]   XXX.tar.gz   打包的内容</p></li><li><p>功能描述：打包目录，压缩后的文件格式 .tar.gz</p></li><li><p>选项说明：</p><ul><li><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生 .tar 打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解压 .tar 文件</td></tr></tbody></table></li></ul></li><li><p>应用实例</p><ul><li><p>案例1:压缩多个文件，将 /home/a1.txt 和 /home/a2.txt 压缩成 ab.tar.gz</p><pre><code>      tar -zcvf ab.tar.gz a.txt b.txt</code></pre></li><li><p>案例2: 将/home 的文件夹 压缩成 myhome.tar.gz</p><p>​        tar -zcvf myhome.tar.gz /home/</p></li><li><p>案例3: 将 a.tar.gz 解压到当前目录</p><p>​        tar -zxvf ab.tar.gz</p></li><li><p>案例4: 将myhome.tar.gz 解压到 /opt/ 目录下 </p><p>​        tar -zxvf myhome.tar.gz -C /opt/</p><p><strong>当指定解压到某个目录时，目录要存在</strong></p></li></ul></li></ul></li></ul><h2 id="第八章-组管理和权限管理"><a href="#第八章-组管理和权限管理" class="headerlink" title="第八章 组管理和权限管理"></a>第八章 组管理和权限管理</h2><p>在linux 中的每个用户必须属于一个组，不能独立于组外。在linux 中每个文件有所有者、所在组、其它组的概念。</p><ul><li>所有者</li><li>所在组</li><li> 其它组</li><li> 改变用户所在的组 </li></ul><h3 id="8-1-文件-目录-所有者"><a href="#8-1-文件-目录-所有者" class="headerlink" title="8.1 文件/目录 所有者"></a>8.1 文件/目录 所有者</h3><p>​    一般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者。</p><h4 id="8-1-1-查看文件的所有者"><a href="#8-1-1-查看文件的所有者" class="headerlink" title="8.1.1 查看文件的所有者"></a>8.1.1 查看文件的所有者</h4><ul><li><p>指令：ls -ahl</p></li><li><p>应用实例：</p><p>​    创建一个组police,再创建一个用户tom,将tom 放在police 组 ,然后使用 tom 来创建一个文件 ok.txt</p><ul><li> groupadd police</li><li>useradd -g plolice tom</li><li>passwd</li><li>使用 tom 用户登录</li><li>touch ok.txt</li><li>ls -ahl</li><li>显示 ok.txt 文件的 所有者是 tom</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722194349.png"></p><h4 id="8-1-2-修改文件所有者"><a href="#8-1-2-修改文件所有者" class="headerlink" title="8.1.2 修改文件所有者"></a>8.1.2 修改文件所有者</h4><ul><li><p>指令: chown 用户名 文件名</p></li><li><p>应用案例：</p><ul><li>使用root 创建一个文件apple.txt ，然后将其所有者修改成 tom</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722194850.png"></p></li></ul><h3 id="8-2-组的创建"><a href="#8-2-组的创建" class="headerlink" title="8.2 组的创建"></a>8.2 组的创建</h3><ul><li>基本指令：<ul><li>groupadd  组名</li></ul></li><li>应用实例选择本地图片<ul><li>创建一个组, ,monster，创建一个用户 fox ，并放入到 monster 组中</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210722195352.png"></p><h3 id="8-3-文件-目录-所在组"><a href="#8-3-文件-目录-所在组" class="headerlink" title="8.3 文件/目录 所在组"></a>8.3 文件/目录 所在组</h3><p>当某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在的组。</p><h4 id="8-3-1-查看文件所在的组"><a href="#8-3-1-查看文件所在的组" class="headerlink" title="8.3.1 查看文件所在的组"></a>8.3.1 查看文件所在的组</h4><ul><li>指令：ls -ahl</li></ul><h4 id="8-3-2-修改文件所在的组"><a href="#8-3-2-修改文件所在的组" class="headerlink" title="8.3.2 修改文件所在的组"></a>8.3.2 修改文件所在的组</h4><ul><li><p>指令：chgrp 组名 文件名</p></li><li><p>应用实例：</p><p>  使用root 用户创建文件 orange.txt ,看看当前这个文件属于哪个组，然后将这个文件所在组，修改到 police 组</p><p>​    <img src="/images/QQ%E6%88%AA%E5%9B%BE20210722200017.png"></p></li></ul><h3 id="8-4-其他组"><a href="#8-4-其他组" class="headerlink" title="8.4 其他组"></a>8.4 其他组</h3><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组.</p><h3 id="8-5-改变用户所在组"><a href="#8-5-改变用户所在组" class="headerlink" title="8.5 改变用户所在组"></a>8.5 改变用户所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的<strong>用root 的管理权限</strong>可以改变某个用户所在的组。</p><h4 id="8-5-1-改变用户所在组"><a href="#8-5-1-改变用户所在组" class="headerlink" title="8.5.1 改变用户所在组"></a>8.5.1 改变用户所在组</h4><ul><li><p>指令： usermod -g 组名 用户名</p></li><li><p>应用实例  ：</p><p>​      创建一个土匪组（bandit）将 tom 这个用户从原来所在的police 组，修改到 bandit(土匪) 组</p><p>​      <img src="/images/QQ%E6%88%AA%E5%9B%BE20210722200748.png"></p></li></ul><h3 id="8-6-权限的介绍"><a href="#8-6-权限的介绍" class="headerlink" title="8.6 权限的介绍"></a>8.6 权限的介绍</h3><p>==<strong>很重要，记住</strong>==</p><p>ls -l 中显示的内容如下：</p><p>​        -  rw-  r-  -r–. 1 tom police 34 7月  22 20:32 ok.txt</p><p>​    0-9位的说明</p><ul><li><p>第0位：确定文件的类型</p><ul><li>-   表示普通文件</li><li>d :  表示文件所有者权限 rw</li><li>l  ：软链接(相当于windows下的快捷方式，上面有笔记)</li><li>c ：字符设备【鼠标，键盘等】</li><li>b ：块文件，硬盘</li></ul></li><li><p>第1-3位：确定该文件的所有者拥有该文件的权限</p><ul><li>rw ：表示可读可写</li></ul></li><li><p>第4-6位：表示文件所在组的用户的权限</p><ul><li>r–: 表示只有读的权限</li></ul></li><li><p>第7-9位；表示文件其他组的用户的权限</p><ul><li>r–: 表示只有读的权限</li></ul></li><li><p>第十位：</p><p>  如果是文件，表示硬链接的数，如果是目录，则表示该目录的子目录个数</p></li></ul><p>​     【补充】硬链接：</p><p>​            硬链接指文件名与索引节点号（即inode号）的链接，索引节点号（inode号）可以对应一个或多个文件名，并且这些文件名可以在同一或不同目录。</p><ul><li><p>tom：代表文件所有者</p></li><li><p>police：代表文件所在组</p></li><li><p>34 ：代表文件的大小为 34k，如果是目录，则显示4096</p></li><li><p>7月  22 20:32   ：代表文件最后修改时间</p></li><li><p>ok.txt   文件名</p></li></ul><h3 id="8-7-rwx-权限详解"><a href="#8-7-rwx-权限详解" class="headerlink" title="8.7 rwx 权限详解"></a>8.7 rwx 权限详解</h3><h4 id="8-7-1-作用在文件上"><a href="#8-7-1-作用在文件上" class="headerlink" title="8.7.1 作用在文件上"></a>8.7.1 作用在文件上</h4><ul><li>[ r ]代表可读(read): 可以读取,查看</li><li>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</li><li>[ x ]代表可执行(execute):可以被执行</li></ul><h4 id="8-7-2-rwx-作用到目录"><a href="#8-7-2-rwx-作用到目录" class="headerlink" title="8.7.2 rwx 作用到目录"></a>8.7.2 rwx 作用到目录</h4><ul><li>[ r ]代表可读(read): 可以读取，ls 查看目录内容</li><li>[ w ]代表可写(write): 可以修改,还可以在目录内创建+删除+重命名目录</li><li>[ x ]代表可执行(execute):可以进入该目录</li></ul><p>【补充：】rwx也可用数字来表示： r=4,w=2,x=1 因此rwx=4+2+1=7</p><h3 id="8-9-修改权限"><a href="#8-9-修改权限" class="headerlink" title="8.9 修改权限"></a>8.9 修改权限</h3><ul><li><p>基本说明：</p><p>​    通过chmod 指令，可以修改文件或者目录的权限</p></li></ul><h4 id="8-9-1-、-、-变更权限"><a href="#8-9-1-、-、-变更权限" class="headerlink" title="8.9.1 + 、-、= 变更权限"></a>8.9.1 + 、-、= 变更权限</h4><p>u: 所有者    g:所有组    o:其他人    a:所有人(u、g、o 的总和)</p><ul><li>chmod u=rwx,g=rx,o=x 文件目录名</li><li> chmod o+w 文件目录名</li><li> chmod a-x 文件目录名</li></ul><p>示例:</p><ul><li><p>案例1：给abc 文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。</p><p>  chmod u=rwx,g=rx,o=rx abc</p></li><li><p>案例2：给abc 文件的所有者除去执行的权限，增加组写的权限</p><p> chmod u-x,g+w abc</p></li><li><p>案例3：给abc 文件的所有用户添加读的权限</p><p> chmod u+r abc</p></li></ul><h4 id="8-9-2-数字变更权限"><a href="#8-9-2-数字变更权限" class="headerlink" title="8.9.2 数字变更权限"></a>8.9.2 数字变更权限</h4><p>规则：r=4 w=2 x=1 ,rwx=4+2+1=7<br>chmod u=rwx,g=rx,o=x 文件目录名   相当于 chmod 751 文件目录名</p><p>示例</p><ul><li><p>将 /home/abc.txt 文件的权限修改成 rwxr-xr-x, 使用给数字的方式实现</p><p> chmod 755 /home/abc.txt</p></li></ul><h4 id="8-9-3-修改文件所有者-chown"><a href="#8-9-3-修改文件所有者-chown" class="headerlink" title="8.9.3 修改文件所有者-chown"></a>8.9.3 修改文件所有者-chown</h4><ul><li><p>介绍</p><ul><li>chown newowner file 改变文件的所有者</li><li>chown newowner:newgroup file 改变用户的所有者和所有组</li><li>-R 如果是目录 则使其下所有子文件或目录递归生效</li></ul></li><li><p>案例</p><ul><li><p>案例1：请将 /home/abc .txt 文件的所有者修改成 tom</p><p>  chown tom /home/abc.txt</p></li><li><p>案例2：请将 /home/kkk 目录下所有的文件和目录的所有者都修改成tom</p><p>   应该使用root 操作</p><p>   chown -R tom kkk/</p></li></ul></li></ul><h4 id="8-9-4-修改文件所在组-chgrp"><a href="#8-9-4-修改文件所在组-chgrp" class="headerlink" title="8.9.4 修改文件所在组-chgrp"></a>8.9.4 修改文件所在组-chgrp</h4><ul><li><p>介绍：chgrp newgroup file 改变文件的所有组</p></li><li><p>案例</p><ul><li><p>案例1：请将 /home/abc .txt 文件的所在组修改成 bandit (土匪）</p><pre><code>       chgrp bandit /home/abc.txt</code></pre></li><li><p>案例2：请将 /home/kkk 目录下所有的文件和目录的所在组都修改成 bandit(土匪)</p><p>​            chgrp -R bandit /home/kkk</p></li></ul></li></ul><h3 id="案例：警察和土匪游戏-重看视频，没懂"><a href="#案例：警察和土匪游戏-重看视频，没懂" class="headerlink" title="案例：警察和土匪游戏(重看视频，没懂)"></a>案例：警察和土匪游戏(重看视频，没懂)</h3><p>police，bandit</p><p>jack，jerry 是警察</p><p>xh，xq是土匪</p><ul><li><p>创建组</p><ul><li>groupadd police</li><li>groupadd bandit</li></ul></li><li><p>创建用户</p></li><li><p>jack 创建一个文件，自己可以读写，本组人可以读，其它组没人任何权限</p></li><li><p>jack 修改该文件，让其它组人可以读, 本组人可以读写</p></li><li><p>xh 投靠 警察，看看是否可以读写.</p></li></ul><h2 id="第九章-crond任务调度"><a href="#第九章-crond任务调度" class="headerlink" title="第九章 crond任务调度"></a>第九章 crond任务调度</h2><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723103346.png"></p><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><ul><li>任务调度:  是指系统在某个时间执行的特定的命令或程序。</li><li>任务调度分类:<ul><li>系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</li><li>个别用户工作：个别用户可能希望执行某些程序，比如对mysql 数据库的备份。</li></ul></li><li>语法：<ul><li>crontab [选项]</li></ul></li><li>常用选项 <ul><li>-e  :  编辑crontab定时任务</li><li>-l ：查询crontab任务</li><li>-r  : 删除当前用户所有的crontab任务</li></ul></li></ul><h3 id="9-2-入门"><a href="#9-2-入门" class="headerlink" title="9.2 入门"></a>9.2 入门</h3><h4 id="9-2-1-要求"><a href="#9-2-1-要求" class="headerlink" title="9.2.1 要求"></a>9.2.1 要求</h4><ul><li>设置任务调度文件：/etc/crontab</li><li>设置个人任务调度。执行crontab –e 命令。crontab –e 代表直接将任务加入  crontab 中</li><li>接着输入任务到调度文件，如：*/1 * * * * ls –l /etc/ &gt; /tmp/to.txt，意思说每小时的每分钟执行ls –l /etc/ &gt; /tmp/to.txt 命令</li></ul><h4 id="9-2-2-步骤"><a href="#9-2-2-步骤" class="headerlink" title="9.2.2 步骤"></a>9.2.2 步骤</h4><ul><li>crontab -e</li><li>*/1 * * * * ls -l /etc&gt;&gt; /tmp/to.txt</li><li>当保存退出后就程序。</li><li>在每一分钟都会自动的调用 ls -l /etc &gt;&gt; /tmp/to.txt</li></ul><h4 id="9-2-3-参数说明"><a href="#9-2-3-参数说明" class="headerlink" title="9.2.3 参数说明"></a>9.2.3 参数说明</h4><ul><li><p>5个占位符</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个 *</td><td>一小时中的第几分钟</td><td>0-59</td></tr><tr><td>第一个 *</td><td>一天中的第几小时</td><td>0-23</td></tr><tr><td>第一个 *</td><td>一月中的第几天</td><td>1-31</td></tr><tr><td>第一个 *</td><td>一年中的第几月</td><td>1-12</td></tr><tr><td>第一个 *</td><td>一周中的星期几</td><td>0-7(0和7都代表周日)</td></tr></tbody></table></li><li><p>特殊符号</p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间，比如第一个 *  就代表一个小时中每分钟执行一次的意思</td></tr><tr><td>，</td><td>代表不连续的时间，比如“0 8,12,16 * * *”,代表在每天的8点，12点，16点都执行一次命令</td></tr><tr><td>-</td><td>代表连续的时间范围。比如 “ 0 5 * * 1-6”，代表在周一到周六的凌晨5点执行命令</td></tr><tr><td>*/n</td><td>代表内阁多久执行一次，比如 “ */10 * * * *” ，代表每个10分钟执行一次</td></tr></tbody></table></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723102441.png"></p><h3 id="9-3-任务调度的案例"><a href="#9-3-任务调度的案例" class="headerlink" title="9.3 任务调度的案例"></a>9.3 任务调度的案例</h3><ul><li><p>案例1：每隔 1 分钟，就将当前的日期信息，追加到 /tmp/mydate 文件中</p><ul><li><p>先编写一个文件  /home/mytask.sh</p><p>  touch /home/mytask.sh</p></li><li><p>mytask.sh 中添加 date &gt;&gt;  /tmp/mydate</p></li><li><p>给mytask1.sh 一个可执行权限，==<strong>这个是前提条件</strong>==</p><p> chmod 744 /home/mytask1.sh</p></li><li><p>crontab -e    并输入   */1 * * * *  /home/mytask1.sh</p></li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723103412.png"></p><ul><li><p>案例 2：每隔 1 分钟， 将当前日期和日历都追加到 /home/mycal 文件中</p><ul><li><p>先编写一个文件 /home/mytask2.sh</p><p> touch mytask2.sh</p></li><li><p>mytask2.sh 中添加</p><ul><li>date &gt;&gt; /tmp/mycal</li><li>cal &gt;&gt; /tmp/mycla</li></ul></li><li><p>给mytask1.sh 一个可以执行权限</p><p> chmod 744 /home/mytask2.sh</p></li><li><p>crontab -e</p></li><li><p>*/ * * * * /home/mytask2.sh</p></li></ul></li><li><p>每天凌晨 2:00 将 mysql 数据库 testdb ，备份到文件mydb.bak中</p><ul><li>先编写一个文件 /home/mytask3.sh</li><li>给mytask3.sh 一个可以执行权限<ul><li>/usr/local/mysql/bin/mysqldump -u root -proot testdb &gt; /tmp/mydb.ba</li></ul></li><li>chmod 744 /home/mytask3.sh</li><li>crontab -e</li><li>0 2 * * * /home/mytask3.sh</li></ul></li></ul><h3 id="9-4-crond-相关指令"><a href="#9-4-crond-相关指令" class="headerlink" title="9.4 crond 相关指令"></a>9.4 crond 相关指令</h3><ul><li>crontab -r  ： 终止任务调度。</li><li>crontab –l：列出当前有那些任务调度</li><li>service crond restart [重启任务调度</li></ul><h2 id="第十章-Linux-磁盘分区、挂载"><a href="#第十章-Linux-磁盘分区、挂载" class="headerlink" title="第十章 Linux 磁盘分区、挂载"></a>第十章 Linux 磁盘分区、挂载</h2><h3 id="10-1-分区基础知识"><a href="#10-1-分区基础知识" class="headerlink" title="10.1 分区基础知识"></a>10.1 分区基础知识</h3><h4 id="10-1-1-分区的方式："><a href="#10-1-1-分区的方式：" class="headerlink" title="10.1.1 分区的方式："></a>10.1.1 分区的方式：</h4><ul><li>mbr分区<ul><li>最多支持四个主分区</li><li>.系统只能安装在主分区</li><li>.扩展分区要占一个主分区</li><li>MBR 最大只支持2TB，但拥有最好的兼容性</li></ul></li><li>gtp分区  （这个比mbr好）<ul><li>支持无限多个主分区(但是操作系统会限制，windows下最多128个分区)</li><li>最大支持18EB 的大容量（1EB=1024 PB，1PB=1024 TB ）</li><li>windows7 64 位以后支持gtp</li></ul></li></ul><h4 id="10-1-2-windows下磁盘分区"><a href="#10-1-2-windows下磁盘分区" class="headerlink" title="10.1.2 windows下磁盘分区"></a>10.1.2 windows下磁盘分区</h4><p>Disk 下 有主分区 和扩展分区，扩展分区里面可以有多个逻辑分区</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723112923.png"></p><h3 id="10-2-Linux-分区"><a href="#10-2-Linux-分区" class="headerlink" title="10.2 Linux 分区"></a>10.2 Linux 分区</h3><h4 id="10-2-1-原理介绍"><a href="#10-2-1-原理介绍" class="headerlink" title="10.2.1 原理介绍"></a>10.2.1 原理介绍</h4><ul><li><p>​    对于Linux 来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构， Linux 中每个分区都是用来组成整个文件系统的一部分。</p></li><li><p>​    Linux 采用了一种叫“==<strong>载入</strong>==”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p></li></ul><p>​     <img src="/images/QQ%E6%88%AA%E5%9B%BE20210723113720.png"></p><h4 id="10-2-2-硬盘说明"><a href="#10-2-2-硬盘说明" class="headerlink" title="10.2.2 硬盘说明"></a>10.2.2 硬盘说明</h4><ul><li><p>IDE 硬盘：</p><ul><li>驱动器标识符为“hdx<del>”,其中“hd”表明分区所在设备的类型，这里是指IDE 硬盘了。“x”为盘号（a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）,“</del>”代表分区，前四个分区用数字1 到4 表示，它们是主分区或扩展分区，从5 开始就是逻辑分区。例，hda3 表示为第一个IDE 硬盘上的第三个主分区或扩展分区,hdb2 表示为第二个IDE 硬盘上的第二个主分区或扩展分区。</li></ul></li><li><p>SCSI硬盘：</p><ul><li>标识为“sdx~”，SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE 硬盘的表示方法一样。</li></ul></li></ul><h4 id="10-2-3-lsblk-指令"><a href="#10-2-3-lsblk-指令" class="headerlink" title="10.2.3 lsblk 指令"></a>10.2.3 lsblk 指令</h4><ul><li>作用：查看当前系统的分区情况</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723115911.png"></p><h3 id="10-3-挂载的案例"><a href="#10-3-挂载的案例" class="headerlink" title="10.3 挂载的案例"></a>10.3 挂载的案例</h3><p>   给Linux 系统增加一个2G的新硬盘sdb1，并且挂载到  /home/newdisk</p><h4 id="10-3-1-增加一块硬盘"><a href="#10-3-1-增加一块硬盘" class="headerlink" title="10.3.1 增加一块硬盘"></a>10.3.1 增加一块硬盘</h4><ul><li><p>虚拟机添加硬盘</p></li><li><p>分区     fidsk /dev/sdb</p></li><li><p>格式化  mkfs  -t ext4 /dev/sdb1</p></li><li><p>挂载   先创建一个 /home/newdisk ，挂载 mount /dev/sdb1   /home/newdisk</p></li><li><p>设置可以自动挂载（永久挂载，当重启系统时，任然可以挂载到 /home/newdisk）</p></li><li><p>编辑  /etc/fstab</p><p>vim /etc/fstab</p></li><li><p>添加一行</p><p>/dev/sdb1                      /home/newdisk                ext4        defaults        0   0</p></li></ul><h4 id="10-3-2-步骤"><a href="#10-3-2-步骤" class="headerlink" title="10.3.2 步骤"></a>10.3.2 步骤</h4><ul><li><p>步骤1：在【虚拟机】菜单中，选择【设置】，然后设备列表里【添加】硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，至到完成。然后重启系统（才能识别）！</p></li><li><p>步骤 2：虚拟机增加硬盘</p><ul><li><p>分区命令 fidisk /dev/sdb</p></li><li><p>开始对    /sdb分区</p></li><li><p>然后按提示输入下面指令</p><p>•m 显示命令列表<br>•p 显示磁盘分区 同 fdisk –l<br>•n 新增分区<br>•d 删除分区<br>•w 写入并退出</p></li></ul></li><li><p>步骤 3：虚拟机增加硬盘</p><ul><li>格式化磁盘<ul><li>分区命令  ：   mkfs -t ext4 /dev/sdb1  (其中ext4是分区类型)</li></ul></li></ul></li><li><p>步骤4:虚拟机增加硬盘</p><ul><li><p>==<strong>挂载</strong>==：将一个分区与一个目录联系起来</p><ul><li><p>指令：mount  设备名称  挂载目录  </p><p>例如：mount   /dev/sdb1   /newdisk</p></li></ul></li><li><p>取消挂载：设备名称 或者 挂载目录   (首先回到home下)</p><ul><li>umount   /dev/sdb1  </li></ul></li></ul></li><li><p>步骤5 ：虚拟机增加硬盘</p><ul><li><p>永久挂载：通过修改/etc/fstab 实现挂载，在最后一行添加 ：</p><p> /dev/sdb1                      /home/newdisk                ext4        defaults        0   0</p></li><li><p>添加完成后 执行     mount –a 即刻生效</p></li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723132225.png"></p><h3 id="10-4-磁盘情况查询"><a href="#10-4-磁盘情况查询" class="headerlink" title="10.4 磁盘情况查询"></a>10.4 磁盘情况查询</h3><h4 id="10-4-1-查询系统整体磁盘使用情况"><a href="#10-4-1-查询系统整体磁盘使用情况" class="headerlink" title="10.4.1 查询系统整体磁盘使用情况"></a>10.4.1 查询系统整体磁盘使用情况</h4><ul><li>基本语法：<ul><li>df   -h</li></ul></li><li>实例：<ul><li>查询系统整体磁盘使用情况</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723132744.png"></p><h4 id="10-4-2-查询指定目录的磁-盘占用情况"><a href="#10-4-2-查询指定目录的磁-盘占用情况" class="headerlink" title="10.4.2  查询指定目录的磁 盘占用情况"></a>10.4.2  查询指定目录的磁 盘占用情况</h4><ul><li><p>语法：</p><ul><li><p>du -h   /目录</p><p> 查询指定目录的磁盘占用情况，默认为当前目录</p><p>-a 含文件</p><p>-c 列出明细的同时，增加汇总值</p><p>-h 带计量单位</p><p>-s 指定目录占用大小汇总</p><p>–max-depth=1 子目录深度</p></li></ul></li><li><p>应用实例</p><ul><li><p>查询 /opt 目录的磁盘占用情况，深度为1</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723133420.png"></p></li></ul></li></ul><h4 id="10-4-3-磁盘情况-工作实用指令"><a href="#10-4-3-磁盘情况-工作实用指令" class="headerlink" title="10.4.3 磁盘情况-工作实用指令"></a>10.4.3 磁盘情况-工作实用指令</h4><p>统计/home 文件夹下文件的个数</p><ul><li><p>ls -l /home | grep “^-“ | wc -l        (  wc:  统计个数)</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723133856.png"></p></li></ul><p>统计/home 文件夹下目录的个数</p><ul><li><p>ls -l /home | grep “^d” | wc -l  </p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723134150.png"></p></li></ul><p>统计   /home 文件夹下文件的个数，包括子文件夹里的</p><ul><li>ls -lR /home | grep “^-“ | wc -l  </li></ul><p>​    </p><p>​     <img src="/images/QQ%E6%88%AA%E5%9B%BE20210723134454.png"></p><p>统计文件夹下目录的个数，包括子文件夹里的</p><ul><li><p>ls -lR /home | grep “^d” | wc -l  </p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723134255.png"></p></li></ul><p> 以树状显示目录结构</p><ul><li>yum install tree</li></ul><h2 id="第十一章-网络配置"><a href="#第十一章-网络配置" class="headerlink" title="第十一章  网络配置"></a>第十一章  网络配置</h2><h3 id="11-1-Linux-网络配置原理图-含虚拟机"><a href="#11-1-Linux-网络配置原理图-含虚拟机" class="headerlink" title="11.1 Linux 网络配置原理图(含虚拟机)"></a>11.1 Linux 网络配置原理图(含虚拟机)</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723163516.png"></p><h3 id="11-2-查看网络-IP-和网关"><a href="#11-2-查看网络-IP-和网关" class="headerlink" title="11.2 查看网络 IP 和网关"></a>11.2 查看网络 IP 和网关</h3><h4 id="11-2-1-查看虚拟网络编辑器"><a href="#11-2-1-查看虚拟网络编辑器" class="headerlink" title="11.2.1 查看虚拟网络编辑器"></a>11.2.1 查看虚拟网络编辑器</h4><p>【编辑】 —–&gt;  【虚拟网络编辑器】</p><h4 id="11-2-2-修改-ip-地址-修改虚拟网络的-ip"><a href="#11-2-2-修改-ip-地址-修改虚拟网络的-ip" class="headerlink" title="11.2.2 修改 ip 地址(修改虚拟网络的 ip)"></a>11.2.2 修改 ip 地址(修改虚拟网络的 ip)</h4><p>【编辑】 —–&gt;  【虚拟网络编辑器】 —-&gt;【更改设置】 在里面选要改的ip地址即可</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723163918.png"></p><h4 id="11-2-3-查看-windows-环境的中-VMnet8-网络配置-ipconfig-指令"><a href="#11-2-3-查看-windows-环境的中-VMnet8-网络配置-ipconfig-指令" class="headerlink" title="11.2.3 查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)"></a>11.2.3 查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)</h4><ul><li>使用ipconfig 查看</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723164341.png"></p><h3 id="11-3-ping-测试主机之间网络连通"><a href="#11-3-ping-测试主机之间网络连通" class="headerlink" title="11.3 ping 测试主机之间网络连通"></a>11.3 ping 测试主机之间网络连通</h3><h4 id="11-3-1-基本语法"><a href="#11-3-1-基本语法" class="headerlink" title="11.3.1 基本语法"></a>11.3.1 基本语法</h4><p>​        ping 目的主机 （功能描述：测试当前服务器是否可以连接目的主机）</p><h4 id="11-3-2-应用实例"><a href="#11-3-2-应用实例" class="headerlink" title="11.3.2 应用实例"></a>11.3.2 应用实例</h4><p>​        测试当前服务器是否可以连接百度<br>​        [root@hadoop100 桌面]# ping <a href="http://www.baidu.com/">www.baidu.com</a></p><h3 id="11-4-linux-网络环境配置"><a href="#11-4-linux-网络环境配置" class="headerlink" title="11.4 linux 网络环境配置"></a>11.4 linux 网络环境配置</h3><h4 id="11-4-1-第一种方法-自动获取"><a href="#11-4-1-第一种方法-自动获取" class="headerlink" title="11.4.1 第一种方法(自动获取)"></a>11.4.1 第一种方法(自动获取)</h4><p>【系统】 —- 【首选项】 —–  【网络连接】  —- 勾选自动连接</p><p>​        缺点: linux 启动后会自动获取IP,缺点是每次自动获取的ip 地址可能不一样。这个不适用于做服<br>务器，因为我们的服务器的 ip 需要时固定的。</p><h4 id="11-4-2-第二种方法-指定固定的-ip"><a href="#11-4-2-第二种方法-指定固定的-ip" class="headerlink" title="11.4.2 第二种方法(指定固定的 ip"></a>11.4.2 第二种方法(指定固定的 ip</h4><p>​    直 接 修 改 配 置 文 件 来 指 定 IP, 并 可 以 连 接 到 外 网 ( 程 序 员 推 荐 ) ， 编 辑 vi /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>​    要求：将ip 地址配置的静态的，ip 地址为192.168.184.130</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723165135.png"></p><pre><code>    **修改后，一定要 重启服务    service network restart**</code></pre><h2 id="第十二章-进程管理"><a href="#第十二章-进程管理" class="headerlink" title="第十二章 进程管理"></a>第十二章 进程管理</h2><h3 id="12-1-进程的基本介绍"><a href="#12-1-进程的基本介绍" class="headerlink" title="12.1 进程的基本介绍"></a>12.1 进程的基本介绍</h3><ul><li>在LINUX 中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID 号。</li><li>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www 服务器。</li><li>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束</li></ul><h3 id="12-2-显示系统执行的进程"><a href="#12-2-显示系统执行的进程" class="headerlink" title="12.2 显示系统执行的进程"></a>12.2 显示系统执行的进程</h3><h4 id="12-2-1-查看进程"><a href="#12-2-1-查看进程" class="headerlink" title="12.2.1 查看进程"></a>12.2.1 查看进程</h4><p>​    查看进程使用的指令是 ps ,一般来说使用的参数是 ps -aux</p><p>​    ps  -a   显示当前终端的所有进程信息</p><p>​    ps  -u 以用户的格式显示进程信息</p><p>​    ps  -x 显示后台进程运行的参数</p><p>   <img src="/images/QQ%E6%88%AA%E5%9B%BE20210723175838.png"></p><p>​        </p><ul><li><p>ps显示的信息选项</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>USER</td><td>用户名</td></tr><tr><td>PID</td><td>进程ID</td></tr><tr><td>%CPU</td><td>占用的CPU</td></tr><tr><td>%MEM</td><td>占用的内存</td></tr><tr><td>VSZ</td><td>使用的虚拟内存</td></tr><tr><td>RSS</td><td>使用物理内存情况</td></tr><tr><td>TTY</td><td>进程的状态  s:休眠    r:运行</td></tr><tr><td>STAT</td><td>启动时间</td></tr><tr><td>START</td><td>占用CPU总时间</td></tr><tr><td>TIME</td><td>启动时间</td></tr><tr><td>COMMAND</td><td>进程执行时的命令行</td></tr></tbody></table></li></ul><h4 id="12-2-2-ps-指令详解"><a href="#12-2-2-ps-指令详解" class="headerlink" title="12.2.2 ps 指令详解"></a>12.2.2 ps 指令详解</h4><ul><li>指令：ps –aux|grep xxx ，比如看看有没有sshd 服务<br>指令说明<br> •System V 展示风格<br> •USER：用户名称<br> •PID：进程号<br> •%CPU：进程占用CPU 的百分比<br> •%MEM：进程占用物理内存的百分比<br> •VSZ：进程占用的虚拟内存大小（单位：KB）<br> •RSS：进程占用的物理内存大小（单位：KB）<br> •TT：终端名称,缩写 .<br> •STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先<pre><code>          级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</code></pre> •STARTED：进程的启动时间<br> •TIME：CPU 时间，即进程使用CPU 的总时间<br> •COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</li></ul><ul><li><p>应用实例：</p><p> <strong>以全格式显示当前所有的进程，查看进程的父进程。</strong></p><p>ps -ef 是以全格式显示当前所有的进程</p><pre><code>•-e 显示所有进程。-f 全格式。•ps -ef|grep xxx•是BSD 风格•UID：用户ID•PID：进程ID**•PPID：父进程ID**•C：CPU 用于计算执行优先级的因子。数值越大，表明进程是CPU 密集型运算，执行优先级会降低；数值越                    小，表明进程是I/O 密集型运算，执行优先级会提高•STIME：进程启动的时间•TTY：完整的终端名称•TIME：CPU 时间•CMD：启动进程所用的命令和参数</code></pre></li></ul><h3 id="12-3-终止进程-kill-和-killall"><a href="#12-3-终止进程-kill-和-killall" class="headerlink" title="12.3 终止进程 kill 和 killall"></a>12.3 终止进程 kill 和 killall</h3><h4 id="12-3-1-介绍"><a href="#12-3-1-介绍" class="headerlink" title="12.3.1 介绍:"></a>12.3.1 介绍:</h4><p>​    若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。<br>使用kill 命令来完成此项任务。</p><h4 id="12-3-2-基本语法："><a href="#12-3-2-基本语法：" class="headerlink" title="12.3.2 基本语法："></a>12.3.2 基本语法：</h4><ul><li> kill   [选项] 进程号</li><li>功能描述：通过进程号杀死进程</li><li>killall   进程名称<ul><li>功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</li></ul></li></ul><h4 id="12-3-3-常用选项："><a href="#12-3-3-常用选项：" class="headerlink" title="12.3.3 常用选项："></a>12.3.3 常用选项：</h4><p>​        -9 :表示强迫进程立即停止</p><h4 id="12-3-4-最佳实践："><a href="#12-3-4-最佳实践：" class="headerlink" title="12.3.4 最佳实践："></a>12.3.4 最佳实践：</h4><ul><li><p>案例1：踢掉某个非法登录用户</p><ul><li>通过  ps -aux | grep sshd   找到非法登录用户的 PID</li><li>再用   kill  PID  杀死即可</li></ul></li><li><p>案例2: 终止多个gedit 编辑器 【killall , 通过进程名称来终止进程</p><ul><li>killall gedit</li></ul></li><li><p>案例3：强制杀掉一个终端</p><ul><li>kill -9  要杀掉的终端的PID</li></ul></li></ul><h3 id="12-4-查看进程树-pstree"><a href="#12-4-查看进程树-pstree" class="headerlink" title="12.4 查看进程树 pstree"></a>12.4 查看进程树 pstree</h3><h3 id="12-4-1-基本语法："><a href="#12-4-1-基本语法：" class="headerlink" title="12.4.1 基本语法："></a>12.4.1 基本语法：</h3><p>​        pstree [选项] ,可以更加直观的来看进程信息</p><h4 id="12-4-2-常用选项："><a href="#12-4-2-常用选项：" class="headerlink" title="12.4.2 常用选项："></a>12.4.2 常用选项：</h4><p>​        -p :显示进程的PID<br>​        -u :显示进程的所属用户</p><h4 id="12-4-3-应用实例："><a href="#12-4-3-应用实例：" class="headerlink" title="12.4.3 应用实例："></a>12.4.3 应用实例：</h4><ul><li><p>案例1：请你树状的形式显示进程的pid</p><ul><li>pstree -p</li></ul></li><li><p>案例2：请你树状的形式进程的用户id</p><ul><li>pstree -u </li></ul></li></ul><h3 id="12-5-服务-Service-管理"><a href="#12-5-服务-Service-管理" class="headerlink" title="12.5 服务(Service)管理"></a>12.5 服务(Service)管理</h3><h4 id="12-5-1-介绍"><a href="#12-5-1-介绍" class="headerlink" title="12.5.1 介绍:"></a>12.5.1 介绍:</h4><p>​        服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql , sshd 防火墙等)，因此我们又称为<strong>守护进程</strong>，是Linux 中非常重要的知识点。</p><h4 id="12-5-2-service-管理指令："><a href="#12-5-2-service-管理指令：" class="headerlink" title="12.5.2 service 管理指令："></a>12.5.2 service 管理指令：</h4><p>service 服务名 [start | stop | restart | reload | status]<br>    在CentOS7.0 后 不再使用service ,而是 <strong>systemctl</strong></p><p><strong>12.5.3 使用案例：</strong></p><ul><li><p>案例1：查看当前防火墙的状况，关闭防火墙和重启防火墙</p><ul><li><p>service iptables states</p></li><li><p>service iptables stop</p></li><li><p>service iptables status</p></li><li><p>service iptables start</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210723195237.png"></p></li></ul></li></ul><h4 id="12-5-4-细节："><a href="#12-5-4-细节：" class="headerlink" title="12.5.4 细节："></a>12.5.4 细节：</h4><ul><li>关闭或者启用防火墙后，立即生效。[telnet 测试 某个端口即可]</li><li>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</li><li>如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig 指令</li></ul><h4 id="12-5-5-查看服务"><a href="#12-5-5-查看服务" class="headerlink" title="12.5.5 查看服务:"></a>12.5.5 查看服务:</h4><ul><li><p>方式1：使用setup -&gt; 系统服务 就可以看到。</p><p>【补充】进入setup模式后用 tab 键可选择取消和确定</p></li><li><p>方式2: ls -l /etc/init.d/   </p></li></ul><h4 id="12-5-6-服务运行级别"><a href="#12-5-6-服务运行级别" class="headerlink" title="12.5.6 服务运行级别"></a>12.5.6 服务运行级别</h4><p>服务的运行级别(runlevel):</p><p>查看或者修改默认级别： vi /etc/inittab</p><p>Linux 系统有7 种运行级别(runlevel)：常用的是级别3 和5<br>    •运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>    •运行级别1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆<br>    •运行级别2：多用户状态(没有NFS)，不支持网络<br>    •运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>    •运行级别4：系统未使用，保留<br>    •运行级别5：X11 控制台，登陆后进入图形GUI 模式<br>    •运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><h4 id="12-5-8-chkconfig-指令"><a href="#12-5-8-chkconfig-指令" class="headerlink" title="12.5.8 chkconfig 指令"></a>12.5.8 chkconfig 指令</h4><ul><li><p>介绍</p><ul><li>通过 chkconfig 命令可以给每个服务的各个运行级别设置自启动/关闭</li></ul></li><li><p>查看服务的基本语法：</p><ul><li> chkconfig   –list | grep sshd</li><li>chkconfig 服务名 –list</li><li>指定服务在 5 这个级别  自启动/不要自启动   chkconfig –level 5 服务名 on/off</li></ul></li></ul><h4 id="12-5-9-应用实例："><a href="#12-5-9-应用实例：" class="headerlink" title="12.5.9 应用实例："></a>12.5.9 应用实例：</h4><ul><li>案例1： 请显示当前系统所有服务的各个运行级别的运行状态。<br>bash&gt; chkconfig –list</li><li>案例2 ：请查看sshd 服务的运行状态。<br>bash&gt; service sshd status</li><li>案例3： 将sshd 服务在运行级别5 下设置为不自动启动。<br>bash&gt; chkconfig –level 5 sshd off</li><li>案例4： 当运行级别为5 时，关闭防火墙。<br>bash&gt; chkconfig –level 5 iptables off</li><li>案例5： 在所有运行级别下，关闭防火墙<br>bash&gt; chkconfig iptables off</li><li>案例6： 在所有运行级别下，开启防火墙<br>bash&gt; chkconfig iptables on</li></ul><p><strong>chkconfig 重新设置服务后自启动或关闭，需要重启机器reboot 才能生效.</strong></p><h3 id="12-6-动态监控进程"><a href="#12-6-动态监控进程" class="headerlink" title="12.6 动态监控进程"></a>12.6 动态监控进程</h3><p>​    top 与ps 命令很相似。它们都用来显示正在执行的进程。Top 与ps 最大的不同之处，在于top 在执行一段时间可以更新正在运行的的进程</p><p>   <strong>用途是查看负载</strong></p><h4 id="12-6-2-基本语法："><a href="#12-6-2-基本语法：" class="headerlink" title="12.6.2 基本语法："></a>12.6.2 基本语法：</h4><ul><li>top [选项]</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d</td><td>指定top命令每隔几秒更新，默认是在3秒，在top命令的交互模式当中可以执行此命令</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵尸进程</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>p</td><td>以CPU使用率排序，默认是此选项</td></tr><tr><td>M</td><td>以内存使用率排序</td></tr><tr><td>N</td><td>以PID降序排列</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><h4 id="12-6-4-应用实例："><a href="#12-6-4-应用实例：" class="headerlink" title="12.6.4 应用实例："></a>12.6.4 应用实例：</h4><ul><li><p>案例 1   监视特定用户</p><p>​    top：输入此命令，按回车键，查看执行的进程。<br>​    u：然后输入“u”回车，再输入用户名，即可</p></li></ul><ul><li>案例2：终止指定的进程。</li></ul><p>​           top：输入此命令，按回车键，查看执行的进程。<br>​           k：然后输入“k”回车，再输入要结束的进程ID 号</p><ul><li><p>案例3:  指定系统状态更新的时间(每隔10 秒自动更新， 默认是3 秒)：</p><p>  top -d 10</p></li></ul><h4 id="12-6-5-查看系统网络情况-netstat-重要"><a href="#12-6-5-查看系统网络情况-netstat-重要" class="headerlink" title="12.6.5 查看系统网络情况 netstat(重要)"></a>12.6.5 查看系统网络情况 netstat(重要)</h4><ul><li>基本语法<pre><code>        netstat [选项]   （一般会   netstat -anp 这样写）</code></pre></li><li>选项说明<ul><li>-an     按一定顺序排列输出</li><li>-p       显示哪个进程在调用</li></ul></li></ul><ul><li>应用实例<ul><li>查看系统所有的网络服务<ul><li>netstat -anp    或者 netstat -anp   |  more </li></ul></li><li>请查看服务名为 sshd 的服务的信息。<ul><li>netstat -anp | grep sshd</li></ul></li></ul></li></ul><h2 id="第十三章-RPM-和-YUM"><a href="#第十三章-RPM-和-YUM" class="headerlink" title="第十三章 RPM 和 YUM"></a>第十三章 RPM 和 YUM</h2><h3 id="13-1-rpm-包的管理"><a href="#13-1-rpm-包的管理" class="headerlink" title="13.1 rpm 包的管理"></a>13.1 rpm 包的管理</h3><h4 id="13-1-1-介绍："><a href="#13-1-1-介绍：" class="headerlink" title="13.1.1 介绍："></a>13.1.1 介绍：</h4><p>​        RPM是一种用于互联网下载包的打包及安装工具，它包含在某些Linux 分发版中。它生成具有.RPM扩展名的文件。RPM 是RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat 的标志，但理念是通用的。Linux 的分发版本都有采用（suse,redhat, centos 等等），可以算是公认的行业标准了</p><h4 id="13-1-2-rpm-包的简单查询指令："><a href="#13-1-2-rpm-包的简单查询指令：" class="headerlink" title="13.1.2 rpm 包的简单查询指令："></a>13.1.2 rpm 包的简单查询指令：</h4><ul><li><p>查询已安装的rpm 列表     rpm –qa|grep xx     (注意是q   不是g)</p></li><li><p>请查询看一下，当前的Linux 有没有安装 firefox .</p><ul><li><p>rpm -qa | grep firefox</p></li><li><p>查询结果为  ： firefox -45.0.1-1  el6.centos.x86_64</p><p>​    名称:firefox<br>​    版本号：45.0.1-1</p><p>​    适用操作系统: el6.centos.x86_64 ,表示centos6.x 的64 位系统,如果是i686、i386 表示32 位系统，noarch 表示通用。</p></li></ul></li></ul><h4 id="13-1-4-rpm-包的其它查询指令："><a href="#13-1-4-rpm-包的其它查询指令：" class="headerlink" title="13.1.4 rpm 包的其它查询指令："></a>13.1.4 rpm 包的其它查询指令：</h4><p>​           rpm -qa :查询所安装的所有rpm 软件包<br>​           rpm -qa | more     查询所安装的所有rpm 软件包并且分页显示<br>​           rpm -qa | grep Xxx   ：查看Xxx包的信息</p><p>​           rpm -q 软件包名 :查询软件包是否安装</p><p>​           rpm -qi 软件包名 ：查询软件包信息</p><p>​            pm -ql 软件包名 :查询软件包中的文件</p><p>​            rpm -qf 文件绝对路径 查询文件所属的软件包</p><h4 id="13-1-5-卸载-rpm-包："><a href="#13-1-5-卸载-rpm-包：" class="headerlink" title="13.1.5 卸载 rpm 包："></a>13.1.5 卸载 rpm 包：</h4><ul><li>基本语法：  rpm -e  RPM包的名称</li><li>应用案例<ul><li>案例1 ：删除firefox 软件包<ul><li>rpm -e firefox</li></ul></li></ul></li><li>使用细节：<ul><li>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息，比如<ul><li>rpm -e foo    会提示：<br>removing these packages would break dependencies:foo is needed by bar-1.0-</li></ul></li><li>​      如果我们就是要删除 foo 这个rpm 包，可以增加参数 <strong>–nodeps</strong> ,就可以强制删除，但是一般<br>不推荐这样做，因为依赖于该软件包的程序可能无法运行<ul><li>rpm -e  –nodeps foo</li></ul></li></ul></li></ul><h4 id="13-1-6-安装-rpm-包："><a href="#13-1-6-安装-rpm-包：" class="headerlink" title="13.1.6 安装 rpm 包："></a>13.1.6 安装 rpm 包：</h4><ul><li><p>语法：    rpm -ivh  RPM包全路径名称</p></li><li><p>参数说明</p><ul><li>i=install 安装</li><li>v=verbose 提示</li><li>h=hash 进度条</li></ul></li><li><p>应用实例：演示安装firefox 浏览器</p><ul><li><p>步骤1 ：先找到firefox 的安装rpm 包,需要挂载上我们安装centos 的iso 文件，然后到/media/下去找rpm 包</p><p>【虚拟机】 —–  【设置】  —–  【CD/DVD】  —–  【使用ISO映像文件】  选择   .iso  文件即可</p></li><li><p>步骤2 ： 拷贝到 /opt下     cp /media/CentOS_6.8_Final/Packages/firefox-45.0.1-1.el6.centos.x86_64.rpm                            /opt</p></li></ul></li></ul><h3 id="13-2-yum"><a href="#13-2-yum" class="headerlink" title="13.2 yum"></a>13.2 yum</h3><h4 id="13-2-1-介绍："><a href="#13-2-1-介绍：" class="headerlink" title="13.2.1 介绍："></a>13.2.1 介绍：</h4><p>​      Yum 是一个Shell 前端软件包管理器。基于RPM 包管理，能够从指定的服务器自动下载RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。使用yum 的前提是可以联网。</p><h4 id="13-2-2-yum-的基本指令"><a href="#13-2-2-yum-的基本指令" class="headerlink" title="13.2.2 yum 的基本指令"></a>13.2.2 yum 的基本指令</h4><ul><li>查询yum 服务器是否有需要安装的软件<ul><li>yum list|grep xx 软件列表</li></ul></li><li>安装指定的yum 包<ul><li>yum install xxx 下载安装</li></ul></li></ul><h4 id="13-2-3-yum-应用实例："><a href="#13-2-3-yum-应用实例：" class="headerlink" title="13.2.3 yum 应用实例："></a>13.2.3 yum 应用实例：</h4><ul><li>案例：请使用yum 的方式来安装firefox<ul><li> 先查看一下 firefox rpm 在yum 服务器有没有</li><li>yum list | grep firefox</li><li>安装<ul><li>yum install firefox   <strong>会安装最新版本的软件</strong></li></ul></li></ul></li></ul><h2 id="第十四章-Linux之JavaEE"><a href="#第十四章-Linux之JavaEE" class="headerlink" title="第十四章 Linux之JavaEE"></a>第十四章 Linux之JavaEE</h2><p>如果需要在Linux 下进行JavaEE 的开发，我们需要安装如下软件：</p><ul><li>mysql</li><li>jdk</li><li>eclipse</li><li>apache-tomcat</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724120722.png"></p><h3 id="14-1-安装-JDK"><a href="#14-1-安装-JDK" class="headerlink" title="14.1 安装 JDK"></a>14.1 安装 JDK</h3><h4 id="14-1-1-安装步骤"><a href="#14-1-1-安装步骤" class="headerlink" title="14.1.1 安装步骤"></a>14.1.1 安装步骤</h4><ul><li>先将软件通过xftp5 上传到 /opt 下</li><li>解压缩到 /opt</li><li>配置环境变量的配置文件vim /etc/profile<ul><li>JAVA_HOME=/opt/jdk1.7.0_79</li><li>PATH=/opt/jdk1.7.0_79/bin:$PATH</li><li>export JAVA_HOME PATH</li></ul></li><li>需要注销用户，环境变量才能生效。</li><li>在任何目录下就可以使用java 和 javac</li></ul><h4 id="14-1-2-测试是否安装成功"><a href="#14-1-2-测试是否安装成功" class="headerlink" title="14.1.2 测试是否安装成功"></a>14.1.2 测试是否安装成功</h4><p>编写一个简单的Hello.java 输出”hello,world!</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724124314.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724124329.png"></p><h3 id="14-2-安装-tomcat"><a href="#14-2-安装-tomcat" class="headerlink" title="14.2 安装 tomcat"></a>14.2 安装 tomcat</h3><h4 id="14-3-1-步骤"><a href="#14-3-1-步骤" class="headerlink" title="14.3.1 步骤 :"></a>14.3.1 步骤 :</h4><ul><li><p>解压缩到   /opt</p></li><li><p>启动tomcat ./startup.sh    先进入到tomcat 的 bin 目录  使用Linux 本地的浏览器 <a href="http://localhost:8080/">http://localhost:8080</a> 是可以访问到tomcat的</p></li><li><p>开放端口 8080 ,这样外网才能访问到tomcat</p><p>firewall-cmd –permanent –zone=public –add-port=8080/tcp</p></li><li><p>重启防火墙</p></li><li><p>进入   /opt/apache-tomcat-7.0.70 /bin      输入   ./startup.sh，外网就可访问 <a href="http://localhost:8080/">http://localhost:8080</a></p></li></ul><h3 id="14-3-安装-eclipse"><a href="#14-3-安装-eclipse" class="headerlink" title="14.3 安装 eclipse"></a>14.3 安装 eclipse</h3><p>步骤</p><ul><li>解压缩到/opt<ul><li> tar -zxvf eclipse-jee-mars-2-linux-gtk-x86_64.tar.gz </li></ul></li><li>启动eclipse，配置jre 和server<ul><li>启动方式： 进入到 eclipse 解压后的文件夹，然后执行 ./eclipse 即可</li></ul></li><li>编写jsp 页面,并测试成功!</li></ul><h3 id="14-5-mysql-的安装和配置"><a href="#14-5-mysql-的安装和配置" class="headerlink" title="14.5 mysql 的安装和配置"></a>14.5 mysql 的安装和配置</h3><p>自己看教程</p><h2 id="第十五章-Linux之大数据之Shell编程"><a href="#第十五章-Linux之大数据之Shell编程" class="headerlink" title="第十五章 Linux之大数据之Shell编程"></a>第十五章 Linux之大数据之Shell编程</h2><h3 id="15-1-为什么要学shell编程"><a href="#15-1-为什么要学shell编程" class="headerlink" title="15.1 为什么要学shell编程"></a>15.1 为什么要学shell编程</h3><ul><li>Linux 运维工程师在进行服务器集群管理时，需要编写Shell 程序来进行服务器管理。</li><li>对于JavaEE 和Python 程序员来说，工作的需要，你的老大会要求你编写一些Shell 脚本进行程<br>序或者是服务器的维护，比如编写一个定时备份数据库的脚本。</li><li>对于大数据程序员来说，需要编写Shell 程序来管理集群。</li></ul><h3 id="15-2-什么是Shell"><a href="#15-2-什么是Shell" class="headerlink" title="15.2 什么是Shell"></a>15.2 什么是Shell</h3><p>​    Shell 是一个命令行解释器，它为用户提供了一个向Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用Shell 来启动、挂起、停止甚至是编写一些程序.</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724161856.png"></p><h3 id="15-3-Shell-脚本的执行方式"><a href="#15-3-Shell-脚本的执行方式" class="headerlink" title="15.3 Shell 脚本的执行方式"></a>15.3 Shell 脚本的执行方式</h3><h4 id="15-3-1-脚本格式"><a href="#15-3-1-脚本格式" class="headerlink" title="15.3.1 脚本格式"></a>15.3.1 脚本格式</h4><ul><li> 脚本以#!/bin/bash 开头</li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashecho "hello,world!"</code></pre><h4 id="15-3-2-执行"><a href="#15-3-2-执行" class="headerlink" title="15.3.2 执行"></a>15.3.2 执行</h4><ul><li><p>方式一：脚本需要有可执行权限</p><ul><li>chmod 744 myShell.sh</li><li>./myShell.sh  （可写相对路径，也可以是绝对路径）</li></ul></li><li><p>方式二：不推荐</p><ul><li>sh    ./myShell.sh</li></ul></li></ul><h3 id="15-4-shell-的变量"><a href="#15-4-shell-的变量" class="headerlink" title="15.4 shell 的变量"></a>15.4 shell 的变量</h3><h4 id="15-4-1-Shell-的变量的介绍"><a href="#15-4-1-Shell-的变量的介绍" class="headerlink" title="15.4.1 Shell 的变量的介绍"></a>15.4.1 Shell 的变量的介绍</h4><ul><li><p>Linux Shell 中的变量分为，<strong>系统变量</strong>和用户<strong>自定义变量</strong>。</p></li><li><p>系统变量</p><pre class=" language-shell"><code class="language-shell">echo "PATH=$PATH"echo "USER=$USER"</code></pre></li><li><p>显示当前shell 中所有变量：set</p></li></ul><h4 id="15-4-2-shell-变量的定义"><a href="#15-4-2-shell-变量的定义" class="headerlink" title="15.4.2 shell 变量的定义"></a>15.4.2 shell 变量的定义</h4><ul><li><p>语法</p><ul><li>定义变量： 变量 = 值</li><li>撤销变量：unset 变量</li><li>声明静态变量：readonly 变量，==<strong>注意不能unset</strong>==</li></ul></li><li><p>案例</p><ul><li><p>案例1 ：定义变量A并删除</p><ul><li><pre class=" language-shell"><code class="language-shell">A=100 #定义变量echo "A=$A"unset A #删除变量echo "A=$A"</code></pre></li></ul></li><li><p>案例2 ：声明静态的变量B=2，不能unset</p><ul><li><pre class=" language-shell"><code class="language-shell">12- readonly A=9913- echo "A=$A"14- unset A15- echo "A=$A"结果为：A=99./myShell.sh: 第 14 行:unset: A: 无法反设定: 只读 variableA=99</code></pre></li></ul></li><li><p>案例3：可把变量提升为全局环境变量，可供其他shell 程序使用</p></li></ul></li></ul><h4 id="15-4-3-定义变量的规则"><a href="#15-4-3-定义变量的规则" class="headerlink" title="15.4.3 定义变量的规则"></a>15.4.3 定义变量的规则</h4><ul><li>变量名可由字母、数组、下划线组成，但是不能由数组开头</li><li>==<strong>等号两侧不能有空格</strong>==</li><li>变量名称一般<strong>习惯为大写</strong></li></ul><h4 id="15-4-4-将命令的返回值赋给变量（-重点-）"><a href="#15-4-4-将命令的返回值赋给变量（-重点-）" class="headerlink" title="15.4.4  将命令的返回值赋给变量（==重点==）"></a>15.4.4  将命令的返回值赋给变量（==重点==）</h4><ul><li>A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A</li><li>A=$(ls -la) 等价于反引号  <strong>推荐使用</strong></li></ul><h3 id="15-5-设置环境变量"><a href="#15-5-设置环境变量" class="headerlink" title="15.5 设置环境变量"></a>15.5 设置环境变量</h3><h4 id="15-5-1-基本语法"><a href="#15-5-1-基本语法" class="headerlink" title="15.5.1 基本语法"></a>15.5.1 基本语法</h4><ul><li>export 变量名=变量值<ul><li>功能描述：将shell变量输出为环境变量</li></ul></li><li>source 匹配文件<ul><li>功能描述：让修改后的配置信息立即生效</li></ul></li><li>echo $变量名<ul><li>功能描述：查询环境变量的值</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210724170120.png"></p><h4 id="15-5-2-快速入门"><a href="#15-5-2-快速入门" class="headerlink" title="15.5.2 快速入门"></a>15.5.2 快速入门</h4><ul><li><p>在/etc/profile 文件中定义TOMCAT_HOME 环境变量</p><ul><li><pre class=" language-shell"><code class="language-shell">#定义一个环境变量export TOMCAT_HOME=/opt/tomcat</code></pre></li></ul></li></ul><ul><li><p>使环境变量生效</p><ul><li><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre></li></ul></li></ul><ul><li><p>查看环境变量TOMCAT_HOME 的值</p><ul><li><pre class=" language-shell"><code class="language-shell">echo "TOMCAT_HOME=$TOMCAT_HOME" :<<!  !   #多行注释的写法</code></pre></li></ul><p>【补充：多行注释     :&lt;&lt;!      !】</p></li></ul><h3 id="15-6-位置参数变量"><a href="#15-6-位置参数变量" class="headerlink" title="15.6 位置参数变量"></a>15.6 位置参数变量</h3><h4 id="15-6-1-介绍"><a href="#15-6-1-介绍" class="headerlink" title="15.6.1 介绍"></a>15.6.1 介绍</h4><p>​        当我们执行一个shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量，比如 ： ./myshell.sh 100 200 , 这个就是一个执行shell 的命令行，可以在myshell 脚本中获取到参数信息。</p><h4 id="15-6-2-基本语法"><a href="#15-6-2-基本语法" class="headerlink" title="15.6.2 基本语法"></a>15.6.2 基本语法</h4><ul><li>$n <ul><li>功能描述：<ul><li>n 为数字，$0 代表命令本身，$1-$9 代表第一到第九个参数，十以上的参数需要用大括号包含，如${10}</li></ul></li></ul></li><li>$* <ul><li>功能描述：<ul><li>这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体</li></ul></li></ul></li><li>$@<ul><li>功能描述：<ul><li>这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待</li></ul></li></ul></li><li>$#<ul><li>功能描述：<ul><li>这个变量代表命令行中所有参数的个数</li></ul></li></ul></li></ul><h4 id="15-6-3-案例"><a href="#15-6-3-案例" class="headerlink" title="15.6.3 案例"></a>15.6.3 案例</h4><ul><li><p>编写一个shell 脚本 positionPara.sh ， 在脚本中获取到命令行的各个参数信息</p><pre class=" language-shell"><code class="language-shell">#shell代码为：#!/bin/bashecho "$0 $1 $2" echo "$*"echo "$@"echo "参数个数=$#"</code></pre></li></ul><p>#结果为：<br>./positionParam.sh 36 45  #  ./positionParam.sh  就是 $0<br>36 45<br>36 45<br>参数个数=2<br>     ```</p><h3 id="15-7-预定义变量"><a href="#15-7-预定义变量" class="headerlink" title="15.7 预定义变量"></a>15.7 预定义变量</h3><h4 id="15-7-1-基本介绍"><a href="#15-7-1-基本介绍" class="headerlink" title="15.7.1 基本介绍"></a>15.7.1 基本介绍</h4><p>​           预定义变量是shell 设计者事先已经定义好的变量，可以直接在shell 脚本中使用</p><h4 id="15-7-2-基本语法"><a href="#15-7-2-基本语法" class="headerlink" title="15.7.2 基本语法"></a>15.7.2 基本语法</h4><ul><li><p>$$</p><ul><li>功能描述：<ul><li>当前进程的进程号（PID）</li></ul></li></ul></li><li><p>$!</p><ul><li>功能描述<ul><li>后台运行的最后一个进程的进程号</li></ul></li></ul></li></ul><ul><li>$? <ul><li>功能描述<ul><li>最后一次执行的命令的返回状态。如果这个变量的值为0，则证明上一个命令执行不正确</li></ul></li></ul></li></ul><h4 id="15-7-3-应用实例"><a href="#15-7-3-应用实例" class="headerlink" title="15.7.3 应用实例"></a>15.7.3 应用实例</h4><ul><li>在一个shell 脚本中简单使用一下预定义变量</li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashecho "当前的进程号为：$$"#以后台的方式运行myShell.sh./myShell.sh &echo "最后的进程号为：$!"echo "执行的值=$?" </code></pre><h3 id="15-8-运算符"><a href="#15-8-运算符" class="headerlink" title="15.8 运算符"></a>15.8 运算符</h3><h4 id="15-8-1-基本介绍"><a href="#15-8-1-基本介绍" class="headerlink" title="15.8.1 基本介绍"></a>15.8.1 基本介绍</h4><p>​    学习如何在shell 中进行各种运算操作。</p><h4 id="15-8-2-基本语法"><a href="#15-8-2-基本语法" class="headerlink" title="15.8.2 基本语法"></a>15.8.2 基本语法</h4><ul><li><p>“$((运算式))”或“$[运算式]”</p></li><li><p>expr m + n    注意==<strong>expr 运算符间要有空格</strong>==</p></li><li><p>expr m - n</p></li><li><p>expr *, /, % 乘，除，取余</p></li></ul><h4 id="15-8-3-应用实例"><a href="#15-8-3-应用实例" class="headerlink" title="15.8.3 应用实例"></a>15.8.3 应用实例</h4><ul><li><p>案例1：计算（2+3）X4 的值</p><ul><li>$((运算式))</li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashRESULT1=$(((2+3)*4))echo "RESULT1=$RESULT1"</code></pre><ul><li>$[运算式]    ——推荐使用，因为简便</li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashRESULT2=$[(2+3)*4]echo "RESULT2=$RESULT2"</code></pre><ul><li>expr </li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashTEMP=`expr 2 + 3`RESULT3=`expr $TEMP \* 4`echo "RESULT3=$RESULT3"</code></pre></li><li><p>案例2：请求出命令行的两个参数[整数]的和</p></li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashRESULT4=$[$1+$2]echo "RESULT4=$RESULT4"#运行./demo.sh 34 56结果为  RESULT4=90"</code></pre><h3 id="15-9-条件判断"><a href="#15-9-条件判断" class="headerlink" title="15.9 条件判断"></a>15.9 条件判断</h3><h4 id="15-9-1-语法"><a href="#15-9-1-语法" class="headerlink" title="15.9.1 语法"></a>15.9.1 语法</h4><ul><li>[ condition ] (注意condition前后要有空格)</li><li>非空返回true，可以和  $!  搭配使用</li></ul><h4 id="15-9-2-常用判断条件"><a href="#15-9-2-常用判断条件" class="headerlink" title="15.9.2 常用判断条件"></a>15.9.2 常用判断条件</h4><ul><li><p>两个整数的比较</p><ul><li>= 字符串比较</li><li>-lt  小于</li><li>-le 小于等于</li><li>-gt  大于</li><li>-ge 大于等于</li><li>-ne 不等于</li><li>-eq 等于</li></ul></li><li><p>按照文件权限进行判断</p><ul><li>-r 有读的权限</li><li>-w 有写的权限</li><li>-x 有执行的权限</li></ul></li><li><p>按照文件类型进行判断</p><ul><li>-f 文件存在并且是一个常规的文件</li><li>-e 文件存在</li><li>-d 文件存在并且是一个目录</li></ul></li></ul><h4 id="15-9-3-应用实例"><a href="#15-9-3-应用实例" class="headerlink" title="15.9.3 应用实例"></a>15.9.3 应用实例</h4><ul><li><p>案例1：”ok”是否等于”ok</p><ul><li><pre class=" language-shell"><code class="language-shell">if [ "ok" == "ok" ]then        echo "equal"fi</code></pre></li></ul></li><li><p>案例2 ：23 是否大于等于22</p><ul><li><pre class=" language-shell"><code class="language-shell">if [ 23 -gt 22 ]then         echo "大于"fi</code></pre></li></ul></li><li><p>案例3：/root/install.log 目录中的文件是否存在</p><ul><li><pre class=" language-shell"><code class="language-shell">if [ -e /root/shell/aaa.txt ]then        echo "存在"fi</code></pre></li></ul></li></ul><h3 id="15-10-流程控制"><a href="#15-10-流程控制" class="headerlink" title="15.10  流程控制"></a>15.10  流程控制</h3><p>顺序结构、分支结构、循环结构。</p><h4 id="15-10-1-if-判断"><a href="#15-10-1-if-判断" class="headerlink" title="15.10.1 if 判断"></a>15.10.1 if 判断</h4><ul><li><p>语法：</p><ul><li><p>if  [  条件判断式  ];    then</p><p>​            程序</p><p>fi</p><p>或者</p><p>if  [  条件判断式  ]</p><p>then</p><p>​        程序</p><p>elif [ 条件判断式 ]</p><p>then</p><p>​        程序</p><p>fi</p></li></ul></li></ul><ul><li>注意事项：<ul><li>[ 条件判断式 ]，中括号和条件判断式之间必须有空格</li><li>推荐使用第二种方式，第一种还得加分号</li></ul></li></ul><ul><li>应用实例<ul><li>请编写一个shell 程序，如果输入的参数，大于等于60，则输出 “及格了”，如果小于60,则输出 “不及格”</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">if [ $1 -ge 60 ]then        echo "及格了"elif [ $1 -lt 60 ]then        echo "不及格"fi</code></pre><h4 id="15-10-2-case-语句"><a href="#15-10-2-case-语句" class="headerlink" title="15.10.2 case 语句"></a>15.10.2 case 语句</h4><ul><li><p>基本语法</p><ul><li><p>case  $变量名 in</p><p>“值1”）</p><p>​        如果变量的值等于1，则执行程序1</p><p>​        ;;</p><p>“值2”）</p><p>​        如果变量的值等于2，则执行程序1</p><p>​        ;;</p><p>…省略其他分值…</p><p>*)</p><p>​        如果变量的值都不是以上的值，则执行此程序</p><p>​        ;;</p><p>esac</p></li></ul></li></ul><ul><li>案例1：当命令行参数是 1 时，输出 “周一”, 是2 时，就输出”周二”， 其它情况输出 “other”</li></ul><pre class=" language-shell"><code class="language-shell">case $1 in"1")        echo "周一";;"2")        echo "周二";;*)        echo "other";;esac</code></pre><h4 id="15-10-3-for-循环"><a href="#15-10-3-for-循环" class="headerlink" title="15.10.3 for 循环"></a>15.10.3 for 循环</h4><ul><li><p>基本语法1：</p><ul><li>for 变量 in 值1 值2 值3…</li></ul><p>​        do</p><p>​           程序</p><p>​        done</p></li></ul><ul><li>应用实例<ul><li>案例1：打印命令行输入的参数 【会使用到$* ，$@】</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">for i in "$*"do        echo "the num is $i"doneecho "=============="./ judge.sh 4 6 2执行输出为：the num is 4 6 2------------------------------------------------------------------------------------for i in "$@"do        echo "the num is $i"doneecho "=============="./ judge.sh 4 6 2执行输出为：the num is 4the num is 6the num is 2</code></pre><ul><li><p>基本语法2：</p><ul><li>for (( 初始值;循环控制条件;变量变化 ))</li></ul><p>​        do<br>​            程序<br>​        done</p></li></ul><ul><li><p>应用实例</p><ul><li>案例1：从1 加到100 的值输出显示</li></ul><pre class=" language-shell"><code class="language-shell">SUM=0for((i=1;i<=100;i++))do        SUM=$[$SUM+$i]doneecho "SUM= $SUM"</code></pre></li></ul><h4 id="15-10-4-while-循环"><a href="#15-10-4-while-循环" class="headerlink" title="15.10.4 while 循环"></a>15.10.4 while 循环</h4><ul><li><p>语法</p><p>while  [   条件判断式   ]</p><p>do</p><p>​    程序</p><p>done</p></li></ul><ul><li>应用实例<ul><li>案例1：从命令行输入一个数n，统计从 1+..+ n 的值是多少？</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">SUM=0i=0while [ $i -le  $1 ]do        SUM=$[$SUM+$i]        i=$[$i+1]doneecho "SUM= $SUM"</code></pre><h3 id="15-11read-读取控制台输入"><a href="#15-11read-读取控制台输入" class="headerlink" title="15.11read 读取控制台输入"></a>15.11read 读取控制台输入</h3><ul><li>基本语法</li></ul><p>​             read(选项)(参数)</p><ul><li>选项：<ul><li>-p ：指定读取值时的提示符</li><li>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输出，就不在等待了。</li></ul></li><li>参数：<ul><li>变量：指定读取值的变量名</li></ul></li></ul><ul><li>应用实例<ul><li>案例1 ：读取控制台输入一个num 值</li><li>案例2：读取控制台输入一个num 值，在10 秒内输入。</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bashread -p "请输入一个数num1=" NUM1echo "你输入的值是num1=$NUM1"read -t 10 -p "请输入一个数num1=" NUM2echo "你输入的值是num1=$NUM2"</code></pre><h3 id="15-12函数"><a href="#15-12函数" class="headerlink" title="15.12函数"></a>15.12函数</h3><h4 id="15-12-1-函数介绍"><a href="#15-12-1-函数介绍" class="headerlink" title="15.12.1 函数介绍"></a>15.12.1 函数介绍</h4><p>​        shell 编程和其它编程语言一样，有系统函数，也可以自定义函数。系统函数中，这里就介绍两个。</p><h4 id="15-12-2-系统函数"><a href="#15-12-2-系统函数" class="headerlink" title="15.12.2 系统函数"></a>15.12.2 系统函数</h4><ul><li>basename 语法<ul><li>basename [pathname] [suffix]<ul><li>功能：返回完整路径最后 / 的部分，常用于获取文件名</li></ul></li><li>basename [string] [suffix] <ul><li>功能：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</li></ul></li><li>suffix 为后缀，如果suffix 被指定了，basename 会将pathname 或string 中的suffix 去掉。</li></ul></li></ul><ul><li>dirname 语法：<ul><li>dirname 文件绝对路径<ul><li>功能：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）</li></ul></li></ul></li></ul><h4 id="15-12-3-应用实例"><a href="#15-12-3-应用实例" class="headerlink" title="15.12.3 应用实例"></a>15.12.3 应用实例</h4><ul><li>案例1 ：请返回 /home/aaa/test.txt 的 “test.txt” 部分<ul><li>basename   /home/aaa/test.txt</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210725085010.png"></p><ul><li>案例2：请返回 /home/aaa/test.txt 的 /home/aaa<ul><li>dirname   /home/aaa/test.txt</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210725085047.png"></p><h4 id="15-12-4-自定义函数"><a href="#15-12-4-自定义函数" class="headerlink" title="15.12.4 自定义函数"></a>15.12.4 自定义函数</h4><ul><li><p>语法</p><ul><li><p>[ function ] funname[()]<br>{</p><p>​    Action;<br>​    [return int;]<br>}</p></li></ul></li><li><p>调用：直接写函数名：funname [值]</p></li><li><p>应用实例</p><ul><li>案例1：计算输入两个参数的和（read）， getSum</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bash#定义函数function getSum()&#123;        SUM=$[$n1+$n2]        echo "和是=$SUM"&#125;read -p "请输入第一个数：" n1read -p "请输入第二个数：" n2#调用函数getSum $n1 $n2</code></pre><h3 id="15-13-Shell编程的综合案例"><a href="#15-13-Shell编程的综合案例" class="headerlink" title="15.13 Shell编程的综合案例"></a>15.13 Shell编程的综合案例</h3><p>需求分析</p><ul><li>每天凌晨 2:10 备份 数据库 whwDB 到 /data/backup/db</li><li>备份开始和备份结束能够给出相应的提示信息</li><li>备份后的文件要求以备份时间为文件名，并打包成 .tar.gz 的形式，比如   2021-07-25_0437258.tar.gz</li><li>在备份的同时，检查是否有10 天前备份的数据库文件，如果有就将其删除。</li></ul><p>编写一个Shell脚本</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#先完成数据库的定时备份。#定义备份的路径BACKUP=/data/backup/db#获取当前的时间作为文件名DATETIME=$(date +%Y_%m_%d_%H%M%S)#输出变量调试#echo $&#123;DATETIME&#125;echo "开始备份"echo "备份的路径为: $BACKUP/$DATETIME.tar.gz"            #主机       HOST=localhost#用户名     DB_USER=root DB_PWD=172161              #要备份的数据库名 DATABASE=whwDB#创建备份的路径#如果备份的文件夹存在，就直接使用，否则就创建[ !  -d "$BACKUP/$DATETIME" ] && mkdir -p "$BACKUP/$DATETIME"    #执行mysql的备份数据库的指令mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PWD&#125; --host=$HOST $DATABASE | gzip > $BACKUP/$DATETIME/$DATETIME.sql.gz    #打包备份文件cd $BACKUPtar -zcvf $DATETIME.tar.gz $DATETIME#删除临时目录rm -rf $BACKUP/$DATETIME#删除10天前的备份文件find $BACKUP -mtime +10 -name "*.tar.gz" -exec rm -rf &#123;&#125; \;echo "=========备份文件成功========"执行：[root@localhost sbin]# ./mysql_db_backup.sh 开始备份备份的路径为: /data/backup/db/2021_07_25_101333.tar.gzWarning: Using a password on the command line interface can be insecure.2021_07_25_101333/2021_07_25_101333/2021_07_25_101333.sql.gz=========备份文件成功========</code></pre><pre class=" language-shell"><code class="language-shell">#最后加到crontab中10 2 * * * /usr/sbin/mysql_db_backup.sh</code></pre><h2 id="第十六章-Linux之Python"><a href="#第十六章-Linux之Python" class="headerlink" title="第十六章 Linux之Python"></a>第十六章 Linux之Python</h2><h3 id="16-1-Ubuntu-的介绍"><a href="#16-1-Ubuntu-的介绍" class="headerlink" title="16.1 Ubuntu 的介绍"></a>16.1 Ubuntu 的介绍</h3><p>​        Ubuntu（乌班图）是一个以桌面应用为主的开源GNU/Linux 操作系统，Ubuntu是基于GNU/Linux，支持x86、amd64（即x64）和ppc 架构，由全球化的专业开发团队（Canonical Ltd）打造的。</p><p>​        专业的Python 开发者一般会选择 Ubuntu 这款Linux 系统作为生产平台.</p><pre><code>    Ubuntu 和 Centos 都是基于 GNU/Linux 内核的，因此基本使用和Centos 是几乎一样的，它们的各种指令可以通用，在以后学习和使用Ubuntu的过程中，会发现各种操作指令在前面学习CentOS都使用过。只是界面和预安装的软件有所差别。</code></pre><p><strong>注意：</strong></p><p>​        安装ubuntu 成功后，都是普通用户权限，并没有最高root 权限，如果需要使用root 权限的时候，通常都会在命令前面加上 sudo 。有的时候感觉很麻烦。我们一般使用su命令来直接切换到root用户的，但是如果没有给root设置初始密码，就会抛出 su :Authentication failure 这样的问题。所以，我们只要给root 用户设置一个初始密码就好了。</p><h3 id="16-2-给-root-用户设置密码并使用"><a href="#16-2-给-root-用户设置密码并使用" class="headerlink" title="16.2 给 root 用户设置密码并使用"></a>16.2 给 root 用户设置密码并使用</h3><ul><li> 输入 sudo passwd 命令，输入一般用户密码并设定root 用户密码。</li><li>设定root 密码成功后，输入 su 命令，并输入刚才设定的root 密码，就可以切换成root 了。提示符$代表一般用户，提示符#代表root 用户</li><li>输入 exit 命令，退出root 并返回一般用户</li><li>以后就可以使用root 用户了</li></ul><h3 id="16-3-Ubuntu-下开发-Python"><a href="#16-3-Ubuntu-下开发-Python" class="headerlink" title="16.3 Ubuntu 下开发 Python"></a>16.3 Ubuntu 下开发 Python</h3><p>安装好Ubuntu 后，默认就已经安装好Python 的开发环境 Python3</p><h4 id="16-3-1-在-Ubuntu-下开发一个-Python-程序"><a href="#16-3-1-在-Ubuntu-下开发一个-Python-程序" class="headerlink" title="16.3.1  在 Ubuntu 下开发一个 Python 程序"></a>16.3.1  在 Ubuntu 下开发一个 Python 程序</h4><p>vim hello.py [编写hello.py]</p><p>如果Ubuntu 没有vim 我们可以根据提示信息安装一个vim   sudo  apt-get install vim</p><h2 id="第十七章-apt-软件管理和远程登录"><a href="#第十七章-apt-软件管理和远程登录" class="headerlink" title="第十七章  apt 软件管理和远程登录"></a>第十七章  apt 软件管理和远程登录</h2><h3 id="19-1-apt-介绍"><a href="#19-1-apt-介绍" class="headerlink" title="19.1 apt 介绍"></a>19.1 apt 介绍</h3><p>apt 是Advanced Packaging Tool 的简称，是一款安装包管理工具。在Ubuntu 下，我们可以使用apt命令可用于软件包的安装、删除、清理等，类似于Windows 中的软件管理工具。</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210725134351.png"></p><h3 id="17-2-Ubuntu-软件操作的相关命令"><a href="#17-2-Ubuntu-软件操作的相关命令" class="headerlink" title="17.2 Ubuntu 软件操作的相关命令"></a>17.2 Ubuntu 软件操作的相关命令</h3><ul><li>sudo apt-get update 更新源</li><li>sudo apt-get install package 安装包</li><li>sudo apt-get remove package 删除包</li><li>sudo apt-cache search package 搜索软件包</li><li>sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等</li><li>sudo apt-get install package –reinstall 重新安装包</li><li>sudo apt-get -f install 修复安装</li><li>sudo apt-get remove package –purge 删除包，包括配置文件等</li><li>sudo apt-get build-dep package 安装相关的编译环境</li><li>sudo apt-get upgrade 更新已安装的包</li><li>sudo apt-get dist-upgrade 升级系统</li><li>sudo apt-cache depends package 了解使用该包依赖那些包</li><li>sudo apt-cache rdepends package 查看该包被哪些包依赖</li><li>sudo apt-get source package 下载该包的源代码</li></ul><h3 id="17-3-更新-Ubuntu-软件下载地址"><a href="#17-3-更新-Ubuntu-软件下载地址" class="headerlink" title="17.3 更新 Ubuntu 软件下载地址"></a>17.3 更新 Ubuntu 软件下载地址</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210725134707.png"></p><h4 id="17-3-1-寻找国内镜像源"><a href="#17-3-1-寻找国内镜像源" class="headerlink" title="17.3.1 寻找国内镜像源"></a>17.3.1 寻找国内镜像源</h4><p>​    <a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a>    所谓的镜像源：可以理解为提供下载软件的地方，比如Android 手机上可以<br>下载软件的安卓市场；iOS 手机上可以下载软件的AppStor</p><ul><li>备份 Ubuntu 默认的源地址<ul><li> sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</li></ul></li><li>更新源服务器列表<ul><li>su root</li><li>echo “” &gt; sources.list</li><li>apt-get updates</li></ul></li></ul><h3 id="17-4-Ubuntu-软件安装，卸载的最佳实践"><a href="#17-4-Ubuntu-软件安装，卸载的最佳实践" class="headerlink" title="17.4 Ubuntu 软件安装，卸载的最佳实践"></a>17.4 Ubuntu 软件安装，卸载的最佳实践</h3><ul><li>案例：使用 apt 完成安装和卸载 vim 软件，并查询 vim 软件的信息<ul><li>su root</li><li>apt-get remove vim</li><li>sudo apt-get install vim</li><li>sudo apt-cache show vim  （查看安装软件的详细信息）</li></ul></li></ul><h3 id="17-5-使用-ssh-远程登录-Ubuntu"><a href="#17-5-使用-ssh-远程登录-Ubuntu" class="headerlink" title="17.5 使用 ssh 远程登录 Ubuntu"></a>17.5 使用 ssh 远程登录 Ubuntu</h3><h4 id="17-6-1-安装-SSH-和启用"><a href="#17-6-1-安装-SSH-和启用" class="headerlink" title="17.6.1 安装 SSH 和启用"></a>17.6.1 安装 SSH 和启用</h4><p>sudo apt-get install openssh-server</p><p>​    执行上面指令后，在当前这台Linux 上就安装了SSH 服务端和客户端。</p><p>service sshd restart</p><p>​    执行上面的指令，就启动了 sshd 服务。会监听22端口</p><h4 id="17-6-2-在-Windows-使用-XShell5-XFTP5-登录-Ubuntu"><a href="#17-6-2-在-Windows-使用-XShell5-XFTP5-登录-Ubuntu" class="headerlink" title="17.6.2 在 Windows 使用 XShell5/XFTP5 登录 Ubuntu"></a>17.6.2 在 Windows 使用 XShell5/XFTP5 登录 Ubuntu</h4><p>前面我们已经安装了XShell5，直接使用即可。<br>注意：使用whw用户登录，需要的时候再 su - 切换成root 用户</p><h4 id="17-6-3-从-linux-系统客户机远程登陆-linux-系统服务机"><a href="#17-6-3-从-linux-系统客户机远程登陆-linux-系统服务机" class="headerlink" title="17.6.3 从 linux 系统客户机远程登陆 linux 系统服务机"></a>17.6.3 从 linux 系统客户机远程登陆 linux 系统服务机</h4><p>   首先，我们需要在linux 的系统客户机也要安装openssh-server</p><ul><li><p>基本语法</p><ul><li>ssh  用户名 @IP<ul><li>例如：ssh <a href="mailto:&#x77;&#104;&#119;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x31;&#x33;&#48;&#46;&#49;&#51;&#x30;">&#x77;&#104;&#119;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x31;&#x33;&#48;&#46;&#49;&#51;&#x30;</a>，使用ssh 访问，如访问出现错误。可查看是否有该文件～/.ssh/known_ssh 尝试删除该文件解决</li></ul></li></ul></li><li><p>退出</p><ul><li>退出命令：exit 或者logout</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC复习</title>
      <link href="2021/07/19/JDBC%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/07/19/JDBC%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC复习"><a href="#JDBC复习" class="headerlink" title="JDBC复习"></a>JDBC复习</h1><h2 id="第一章：JDBC概述"><a href="#第一章：JDBC概述" class="headerlink" title="第一章：JDBC概述"></a>第一章：JDBC概述</h2><h3 id="1-1-数据持久化"><a href="#1-1-数据持久化" class="headerlink" title="1.1 数据持久化"></a>1.1 数据持久化</h3><ul><li>持久化(Persistence)：==<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>==。大多数情况下，特别是企业级应用，==<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>==上加以“固化”，而持久化的实现过程大多通过各种关系数据库来完成。</li><li>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、xml数据文件中。</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719170751.png"></p><h3 id="1-2-java中的数据存储技术"><a href="#1-2-java中的数据存储技术" class="headerlink" title="1.2 java中的数据存储技术"></a>1.2 java中的数据存储技术</h3><ul><li><p>在java中，数据库存取技术可分为如下几类</p><ul><li><strong>JDBC</strong>直接访问数据库</li><li>JDO(Java Data Object)技术</li><li><strong>第三方O/R工具</strong>，如mybatis等</li></ul></li><li><p>JDBC是java访问数据库的基石，框架只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</p></li><li><p>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</p></li><li><p>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p></li><li><p>如果没有JDBC，java程序则直接访问数据库</p></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719171833.png"></p><ul><li>有了JDBC，Java程序以JDBC为桥梁访问数据库</li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719171737.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719171853.png"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4  JDBC体系结构"></a>1.4  JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的AP</strong>I：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p>JDBC是oracle公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</p></blockquote><blockquote><p>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</p></blockquote><p>核心思想：==<strong>面向接口编程</strong>==</p><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719173623.png"></p><p>​        开始  —&gt; 导入java.sql包   —&gt; 加载并注册驱动  —&gt;创建Connection对象  —&gt;创建Statement对象  —&gt;执行sql语句</p><p>  —&gt;关闭连接</p><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 java.sql.Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul><p>添加依赖或者导入相关包</p></li></ul><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。</p></li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719183745.png"></p><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719183944.png"></p><ul><li><p><strong>几种常用数据库的 JDBC URL</strong></p></li><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/test</li><li>jdbc:mysql://localhost:3306/test**?useUnicode=true&amp;characterEncoding=utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/test?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:test</li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Driver实现类</span>        Driver driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*          jdbc:mysql : 协议               localhost : ip地址            3306 : 默认mysql的端口号            test : 名为test的数据库          */</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将用户名和密码封装在Properties中</span>        Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"172161"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p> 说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 方式二：对方式一的迭代：在如下的程序中不出现第三方的API，使得程序具有更好的可移植性*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.获取Driver实现类对象，使用反射实现</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.提供要连接的数据库</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.提供连接需要的用户名密码</span>        Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"172161"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取连接</span>        Connection connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 方式三：使用DriverManager替换Driver     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获取Driver实现类的对象</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.提供要连接的数据库</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8"</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"172161"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.注册驱动</span>        DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取连接</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 方式四：可以只是加载驱动，不用显示的注册驱动     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.提供另外三个连接的基本信息：</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8"</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"172161"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.加载Driver</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mysql这一步也可以省略,其他的不可以</span>        <span class="token comment" spellcheck="true">//相较于方式三，可以省略如下的操作：</span><span class="token comment" spellcheck="true">//        Driver driver = (Driver) clazz.newInstance();</span><span class="token comment" spellcheck="true">//        //注册驱动</span><span class="token comment" spellcheck="true">//        DriverManager.registerDriver(driver);</span>        <span class="token comment" spellcheck="true">//为什么可以省略</span>        <span class="token comment" spellcheck="true">/*         * 在mysql的Driver实现类中，声明了如下的操作：         *         * static&amp;#123;         *       try&amp;#123;         *           java.sql.DriverManager.registerDriver(new Driver());         *       &amp;#125;catch (SQLException)&amp;#123;         *           throw new RuntimeException("Can't register driver!");         *       &amp;#125;         * &amp;#125;         *         */</span>        <span class="token comment" spellcheck="true">//3.获取连接</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>说明：不必显示的注册驱动了，因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册，包括加载MySQL的Driver也是可以省略的，因为导入的jar包中的META-INF下的service里面有驱动的文件，自动加载了</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**方式五(final版)：将数据库连接需要的4个基本信息声明在配置文件中，通过读取配置文件的方式，获取连接     * 好处     * 1.实现数据与代码的分离。实现了解耦     * 2.如果需要修改配置文件信息，可以避免程序重新打包。     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取连接</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#键值对中间不要加空格</span><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">172161</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p></blockquote><p><strong>使用配置文件的好处</strong>：</p><ul><li>实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码</li><li>如果一个工程中只要修改配置信息，则只需要把工程中的配置文件修改了就可以，就省去了重写编译的过程</li></ul><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li>数据库连接被用于向数据库服务器发送命令和SQL语句，并接受数据库服务器返回的结果，其实一个数据库连接就是一个Socket连接</li><li>在java.sql包中有三个接口分别定义了对数据库调用的不同方式：<ul><li>Statement：用于执行静态SQL语句并返回所生成的结果的对象</li><li>PrepatedStatement：SQL语句被编译并存储在此对象中，可以使用此对象多次高效的执行该语句</li><li>CallableStatement：用于执行SQL存储过程</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719203251.png"></p><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">excuteUpdate</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>：执行更新操作INSERT、UPDATE、DELETEResultSet <span class="token function">executeQuery</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>：执行查询操作SELECT</code></pre><ul><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatementTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用Statement的弊端：需要拼写SQL语句，并且存在SQL注入的问题</span>    <span class="token comment" spellcheck="true">//如何避免SQL注入：只要用PreparedStatement(从Statement扩展而来)取代Statement</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SELECT user,password FROM user_table WHERE user = '1' or ' AND password = ' =1 or '1' = '1 '</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT user,password FROM user_table WHERE user = '"</span><span class="token operator">+</span> user<span class="token operator">+</span><span class="token string">"' AND password = '"</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>        User returnUser <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>returnUser <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名不存在或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用Statement实现对数据表的查询操作</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        T t <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1.加载配置文件</span>            InputStream is <span class="token operator">=</span> StatementTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.读取配置信息</span>            String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// //1. 获取列的名称</span>                    <span class="token comment" spellcheck="true">// String columnName = rsmd.getColumnName(i+1);</span>                    <span class="token comment" spellcheck="true">// 1. 获取列的别名</span>                    String columnName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 2. 根据列名获取对应数据表中的数据</span>                    Object columnVal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 3. 将数据表中得到的数据，封装进对象</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210719204107.png"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</li><li><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></li><li>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li>代码的可读性和可维护性。</li><li><strong>PreparedStatement 能最大可能提高性能：</strong><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li><li>上述内容在批处理的时候尤为明显</li></ul></li><li>PreparedStatement 可以防止 SQL 注入 </li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement添加一条记录"><a href="#3-3-4-使用PreparedStatement添加一条记录" class="headerlink" title="3.3.4 使用PreparedStatement添加一条记录"></a>3.3.4 使用PreparedStatement添加一条记录</h4><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 向customers表中添加一条记录</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1.读取配置文件中的4个基本信息</span>            InputStream is <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.预编译SQL语句，返回PreparedStatement的实例</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth)values(?,?,?)"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ?:占位符</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5.填充占位符</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"哪吒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"nezha@gmailqq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1000-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 6.执行操作</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 7.资源的关闭</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-5-使用PreparedStatement实现通用的增、删、改操作"><a href="#3-3-5-使用PreparedStatement实现通用的增、删、改操作" class="headerlink" title="3.3.5 使用PreparedStatement实现通用的增、删、改操作"></a>3.3.5 使用PreparedStatement实现通用的增、删、改操作</h4><p><strong>jdbc工具类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取数据库的连接     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.读取配置文件中的4个基本信息</span>        InputStream is <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.获取连接</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 关闭连接和Statement的操作     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span>Statement preparedStatement<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7.资源的关闭</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通用增删改</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 通用的增删改操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sql中占位符的个数与可变形参的长度相同！</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement prepareStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1.获取数据库的连接</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.预编译SQL语句，返回PreparedStatement的实例</span>            prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.填充占位符</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                prepareStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小心参数声明错误！</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 4.执行</span>            <span class="token comment" spellcheck="true">/*                 * prepareStatement.execute();                 * 如果执行的是查询操作，有返回结果，则此方法返回true;                 * 如果是增删改操作，没有返回结果，则此方法返回false;                 */</span>            prepareStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// prepareStetement.executeUpdate();这个有int的返回值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5.资源的关闭</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> prepareStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-5-使用PreparedStatement实现通用查询操作"><a href="#3-3-5-使用PreparedStatement实现通用查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现通用查询操作"></a>3.3.5 使用PreparedStatement实现通用查询操作</h4><p>Order表的通用查询</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderForQuery</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 针对于表的字段名与类的属性名不相同的情况：     * 1. 必须声明SQL时，使用类的属性名来命名字段的别名     * 2. 使用ResultSetMetaData时，需要使用getColumnLabel()来替换getColumnName(),     * 获取列的别名。     * 说明：如果SQL中没有给字段起别名，getColumnLabel()获取的就是列名     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOrderForQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//这里from 后的 order 表名 一定要加'' ,因为order是关键字</span>        String sql <span class="token operator">=</span> <span class="token string">"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id &lt; ?"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Order<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">orderForQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Order order <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">orderForQuery</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行，获取结果集</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取结果集的元数据</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Order<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取每个列的列值:通过ResultSet</span>                    Object columnValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//通过ResultSetMetaData</span>                    <span class="token comment" spellcheck="true">//获取列的列名：getColumnName() --不推荐使用</span>                    <span class="token comment" spellcheck="true">//获取列的别名：getColumnLabel()</span><span class="token comment" spellcheck="true">//                    String columnName = rsmd.getColumnName(i + 1);</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//通过反射，将对象指定名columnName的属性赋值为指定的值columnValue</span>                    Field field <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>针对不同表的通用查询</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 针对于不同的表的通用的查询操作，返回表中的多条记录     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getForList</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement prepareStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                prepareStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> prepareStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据：ResultSetMetaData</span>            ResultSetMetaData resultSetMetaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过ResultSetMetaData获取结果集的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> resultSetMetaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建集合对象</span>            ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                T t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 处理结果集一行数据中的每一个列:给t对象指定的属性赋值</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取列值</span>                    Object columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取每个列的列名</span>                    <span class="token comment" spellcheck="true">// String columnName = resultSetMetaData.getColumnName(i + 1);</span>                    String columnLabel <span class="token operator">=</span> resultSetMetaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 给t对象指定的columnName属性，赋值为columnValue。通过反射</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> prepareStatement<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p> 除了解决Statement的拼串、SQL问题之外，PreparedStatement还有哪些好处呢？</p><ul><li>PreparedStatement操作Blob的数据，而Statement做不到。</li><li>PreparedStatement可以实现更高效的批量操作。</li></ul><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li>boolean next()</li><li>getString()</li><li>getXxx()</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720090640.png"></p><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称  ,一般不用</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名，大多数会用这个</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p></li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720091235.png"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720091437.png"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性，字段和属性尽可能一致</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值，从而实现通用的查询方法</li></ul></li></ul><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</li><li>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</li><li>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</li></ul><table><thead><tr><th>类型</th><th>大小(单位:字节)</th></tr></thead><tbody><tr><td>TinyBlob</td><td>最大 255</td></tr><tr><td>Bolb</td><td>最大 65K</td></tr><tr><td>MediumBlob</td><td>最大 16M</td></tr><tr><td>LongBlob</td><td>最大 4G</td></tr></tbody></table><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//向数据表customers中插入Blob类型的字段</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BlobTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth,photo)values(?,?,?,?)"</span><span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"王瀚文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"whw@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"2000-04-12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-3-查询数据表中的Blob类型字段"><a href="#4-3-查询数据表中的Blob类型字段" class="headerlink" title="4.3 查询数据表中的Blob类型字段"></a>4.3 查询数据表中的Blob类型字段</h3><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//查询数据表customers中Blob类型的字段</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        InputStream binaryStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth,photo from customers where id = ?"</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date birth <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"birth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birth<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>                Blob photo <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                binaryStream <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/2.webp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> binaryStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binaryStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                binaryStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-4-修改数据表中的Blob类型字段"><a href="#4-4-修改数据表中的Blob类型字段" class="headerlink" title="4.4 修改数据表中的Blob类型字段"></a>4.4 修改数据表中的Blob类型字段</h3><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql <span class="token operator">=</span> <span class="token string">"update customers set photo = ? where id = ?"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 填充占位符</span><span class="token comment" spellcheck="true">// 操作Blob类型的变量</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"coffee.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> fis<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> goods<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Statement st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name) values('name_' + "</span><span class="token operator">+</span> i <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-2-实现层次二：使用PreparedStatemen"><a href="#5-2-2-实现层次二：使用PreparedStatemen" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatemen"></a>5.2.2 实现层次二：使用PreparedStatemen</h4><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)value(?)"</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//82340</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 修改1： 使用 addBatch() / executeBatch() / clearBatch() * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 *          ?rewriteBatchedStatements=true 写在配置文件的url后面 * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar *  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1."攒"sql</span>                ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2.执行batch</span>                    ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3.清空batch</span>                    ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20000条   2842</span>                                                               <span class="token comment" spellcheck="true">//1000000条 12735</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//批量插入的方式四：设置连接不允许自动提交数据</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置不允许自动提交数据</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1."攒"sql</span>                ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//2.执行batch</span>                    ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3.清空batch</span>                    ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//提交数据</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20000:83340 -- 565</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">//1000000:16086 -- 5114</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都**被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的，成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li><li>关闭客户端可会自动提交</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>保证事务之间的DML操作是同一个连接</li><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li><li>.恢复每次DML操作的自动提交功能</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJDBCTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.获取数据库连接</span>        conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.开启事务</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.进行数据库操作</span>        String sql1 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance - 100 where user = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql1<span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟网络异常</span>        <span class="token comment" spellcheck="true">//System.out.println(10 / 0);</span>        String sql2 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance + 100 where user = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql2<span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.若没有异常，则提交事务</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.若有异常，则回滚事务</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.恢复每次DML操作的自动提交功能</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭连接</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>其中，对数据库操作的方法为：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用事务以后的通用的增删改操作（version 2.0）</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection conn <span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span>        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.填充占位符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.执行sql语句</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.关闭资源</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意为null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。==<strong>类比线程</strong>==</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新并提交</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li>数据库提供的4种事务隔离级别：</li></ul><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>READ UNCOMMITTED(读未提交数据)</td><td>允许事务读取未被其他事务提交的变更，脏读、不可重复读和幻读的问题都会出现</td></tr><tr><td>READ COMMITED(读已提交数据)</td><td>只允许事务读取已经被其他事务提交的变更，可以避免脏读，但是不可重复读和幻读问题任然可能出现</td></tr><tr><td>PRPEATABLE READ(可重复读)</td><td>确保事务第一次读取值后，再次获取值还是和第一次一样，在此期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读的问题任然存在</td></tr><tr><td>SERIALIZABLE(串形化)</td><td>确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作，所有并发问题都可以避免，但性能十分低下</td></tr></tbody></table><ul><li>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</li></ul><ul><li>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</li><li>查看当前的隔离级别: </li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span></code></pre><ul><li>设置当前 mySQL 连接的隔离级别:  </li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span>  <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span></code></pre><ul><li>设置数据库系统的全局的隔离级别:</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span></code></pre><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li></ul><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * DAO: data(base) access object * 封装了针对于数据表的通用的操作 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDAO</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通用的增删改操作---version 2.0 （考虑上事务）</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sql中占位符的个数与可变形参的长度相同！</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1.预编译sql语句，返回PreparedStatement的实例</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.填充占位符</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小心参数声明错误！！</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.执行</span>            <span class="token keyword">return</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.资源的关闭</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通用的查询操作，用于返回数据表中的一条记录（version 2.0：考虑上事务）</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getInstance</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据 :ResultSetMetaData</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过ResultSetMetaData获取结果集中的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                T t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 处理结果集一行数据中的每一个列</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取列值</span>                    Object columValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取每个列的列名</span>                    <span class="token comment" spellcheck="true">// String columnName = rsmd.getColumnName(i + 1);</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通用的查询操作，用于返回数据表中的多条记录构成的集合（version 2.0：考虑上事务）</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getForList</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据 :ResultSetMetaData</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过ResultSetMetaData获取结果集中的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建集合对象</span>            ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                T t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 处理结果集一行数据中的每一个列:给t对象指定的属性赋值</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取列值</span>                    Object columValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取每个列的列名</span>                    <span class="token comment" spellcheck="true">// String columnName = rsmd.getColumnName(i + 1);</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用于查询特殊值的通用的方法</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> E <span class="token function">getValue</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="【CustomerDAO-java】"><a href="#【CustomerDAO-java】" class="headerlink" title="【CustomerDAO.java】"></a>【CustomerDAO.java】</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 此接口用于规范针对于customers表的常用操作 * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerDAO</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将customer对象添加到数据库中</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span>Customer customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//针对指定的id，删除表中的一条记录</span>    <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//针对于内存中的customer对象，去修改数据表中指定的记录</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span>Customer customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据指定id查询对应的Customers对象</span>    Customer <span class="token function">getCustomerById</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询表中的所有记录构成的集合</span>    List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回数据表中的数据的条目数</span>    <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回数据表中最大的生日</span>    Date <span class="token function">getMaxBirth</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="【CustomerDAOImpl-java】"><a href="#【CustomerDAOImpl-java】" class="headerlink" title="【CustomerDAOImpl.java】"></a>【CustomerDAOImpl.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerDAOImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDAO</span> <span class="token keyword">implements</span> <span class="token class-name">CustomerDAO</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> Customer customer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth) values(?,?,?)"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from customers where id = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> Customer customer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"update customers set name = ?,email = ?,birth = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customer<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Customer <span class="token function">getCustomerById</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>        Customer customer <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">getForList</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from customers"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Date <span class="token function">getMaxBirth</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select max(birth) from customers"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="【CustomerDAOImplTest-java】"><a href="#【CustomerDAOImplTest-java】" class="headerlink" title="【CustomerDAOImplTest.java】"></a>【CustomerDAOImplTest.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerDAOImplTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> CustomerDAOImpl dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerDAOImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @throws Exception      */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"王瀚文"</span><span class="token punctuation">,</span><span class="token string">"whw@qq.com"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>1248762356L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        dao<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateConnectionCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Customer cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"贝多芬"</span><span class="token punctuation">,</span><span class="token string">"beiduofen@126.com"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>453465656L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> cust<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCustomerById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Customer cust <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">getCustomerById</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Long count <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表中的记录数为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMaxBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Date maxBirth <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">getMaxBirth</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大的生日为："</span> <span class="token operator">+</span> maxBirth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li>在使用开发基于数据库的web程序是，传统的模式基本使按以下步骤：<ul><li><strong>在主程序(如servlet、beans)中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li>这种模式开发，存在问题：<ul><li>普通的JDBC数据库连接使用DriverManager来获取，每次向数据库建立连接的时候都要将Connection加载到内存中，在验证用户名和密码(得话费0.05 ~ 1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的链接资源并没有得到很好的重复利用</strong>。若同时有几百人甚至上千人在线，频繁的进行数据库操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开</strong>。斗则，如果程序出现异常而未能关闭，将会导致数据库系统中内存泄漏，最终将导致重启数据库</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾忌的分配出去，如果连接过多，也可能导致内存泄漏，服务器崩溃</li></ul></li></ul><p>==<strong>补充：何为java内存泄漏</strong>==</p><pre class=" language-java"><code class="language-java">    在java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点<span class="token operator">:</span>           <span class="token number">1</span><span class="token punctuation">.</span>对象是可达的​           <span class="token number">2</span><span class="token punctuation">.</span>对象是无用的，即程序以后不会再使用这些对象。​          如果对象满足这两个条件，这些对象就可以判定为java中的内存泄漏，这些对象不会被GC所回收，然而它们却占用内存。 简单来说，内存泄漏的原因就是：保留下来却永远不再使用的对象引用。</code></pre><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li>为解决传统开发中的数据库连接问题，可以曹勇数据库连接池技术。</li><li><strong>数据库连接池的思想</strong>：就是为数据库建立一个“缓冲池”。预先在缓冲池放入一定数量的连接，当需要建立数据库连接时，只需要从 “ 缓冲池 “ 中取出一个，使用完毕之后再放回去</li><li>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。</li><li>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否能被使用连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</li></ul><p>==<strong>数据库连接池技术会在 JUC 中会详细梳理</strong>==</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720144053.png"></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210720144107.png"></p><ul><li><p>数据库连接池技术的优点</p><ul><li><p><strong>资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p></li><li><p><strong>更快的反应速度</strong></p></li></ul><p>​           数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><ul><li><p><strong>新的资源分配手段</strong></p><p>   对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p></li><li><p><strong>统一的连接管理，避免数据类连接泄漏</strong></p><p>​    在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄漏</p></li></ul></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li><p>JDBC的数据连接池使用javax.sql.DaaSource来表示，DataSource只是一个接口，该接口通常由服务器(Weblofic、WebSphere、Tomcat)提供实现，也有些开源组织提供实现：</p><ul><li>DBCP是Apache提供的数据连接池，tomcat服务器知道dbcp数据库连接池，速度相对c3p0快，但因为自身存在bug，Hibernate3已经不再提供支持</li><li>C3P0是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用</li><li>Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点</li><li>BoneCP是一个开源的组织提供的数据库连接池，速度快</li><li>Druid是阿里巴巴提供的数据库连接池，据说是集DBCP,C3P0,Proxool优点集一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li><p>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</p></li><li><p><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></p></li><li><p>特别注意：</p><ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3P0Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取c3p0数据库连接池</span>        ComboPooledDataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpds<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"172161"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过设置相关的参数，对数据库连接池进行管理：</span>        <span class="token comment" spellcheck="true">//设置初始时数据库连接池中的连接数</span>        cpds<span class="token punctuation">.</span><span class="token function">setInitialPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁c3p0数据库连接池</span><span class="token comment" spellcheck="true">//        DataSources.destroy( cpds );</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>获取连接方式二</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetConnection1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ComboPooledDataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"helloC3P0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">&lt;?xml</span> <span class="token attr-value">version="1.0" encoding="UTF-8"?></span>&lt;c3p0-config><span class="token attr-name">    &lt;named-config</span> <span class="token attr-value">name="helloc3p0"></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">获取连接的4个基本信息 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="user">root&lt;/property></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="password">abc123&lt;/property></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="jdbcUrl">jdbc:mysql:///test&lt;/property></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="driverClass">com.mysql.jdbc.Driver&lt;/property></span>        <span class="token attr-name">        &lt;!--</span> <span class="token attr-value">涉及到数据库连接池的管理的相关属性的设置 --></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="acquireIncrement">5&lt;/property></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">初始化数据库连接池时连接的数量 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="initialPoolSize">5&lt;/property></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">数据库连接池中的最小的数据库连接数 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="minPoolSize">5&lt;/property></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">数据库连接池中的最大的数据库连接数 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="maxPoolSize">10&lt;/property></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">C3P0 数据库连接池可以维护的 Statement 的个数 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="maxStatements">20&lt;/property></span><span class="token attr-name">        &lt;!--</span> <span class="token attr-value">每个连接同时可以使用的 Statement 对象的个数 --></span><span class="token attr-name">        &lt;property</span> <span class="token attr-value">name="maxStatementsPerConnection">5&lt;/property></span>    &lt;/named-config>&lt;/c3p0-config></code></pre><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建了DBCP的数据库连接池</span>        BasicDataSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置基本信息</span>        source<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"172161"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//还可以设置其他涉及数据库连接池管理的相关属性：</span>        source<span class="token punctuation">.</span><span class="token function">setInitialSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setMaxActive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//。。。</span>        Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>获取连接方式二：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetConnection1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式1：</span><span class="token comment" spellcheck="true">//        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("dbcp.properties");</span>        <span class="token comment" spellcheck="true">//方式2：</span>        FileInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/dbcp.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataSource source <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">172161</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment" spellcheck="true">#.....</span></code></pre><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataSource source <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">172161</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">maxActive</span><span class="token punctuation">=</span><span class="token attr-value">10</span></code></pre><p>详细配置参数：</p><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li></ul><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li></ul><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试插入</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth)values(?,?,?)"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> insertCount <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token string">"www"</span><span class="token punctuation">,</span> <span class="token string">"www@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"2000-03-23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了"</span> <span class="token operator">+</span>insertCount <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"delete from customers where id &lt; ?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试查询</span>    <span class="token comment" spellcheck="true">/**     * BeanHander:是ResultSetHandler接口的实现类，用于封装表中的一条记录。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection3 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection3 <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>            BeanHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Customer customer <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection3<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection3<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * BeanListHandler:是ResultSetHandler接口的实现类，用于封装表中的多条记录构成的集合。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id &lt; ?"</span><span class="token punctuation">;</span>            BeanListHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> listHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> listHandler<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * MapHander:是ResultSetHandler接口的实现类，对应表中的一条记录。     * 将字段及相应字段的值作为map中的key和value     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>            MapHandler mapHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> mapHandler<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * MapListHander:是ResultSetHandler接口的实现类，对应表中的多条记录。     * 将字段及相应字段的值作为map中的key和value。将这些map添加到List中     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id &lt; ?"</span><span class="token punctuation">;</span>            MapListHandler mapListHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapListHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> mapListHandler<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * ScalarHandler:用于查询特殊值     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from customers"</span><span class="token punctuation">;</span>                        ScalarHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Long count <span class="token operator">=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>自定义ResultSetHandler实现类</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 自定义ResultSetHandler的实现类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id &lt; ?"</span><span class="token punctuation">;</span>                        ResultSetHandler<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Customer<span class="token operator">>></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultSetHandler</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Customer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">handle</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Date data <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"birth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> list<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource1</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL复习笔记</title>
      <link href="2021/07/10/MySQL%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/07/10/MySQL%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL复习笔记"><a href="#MySQL复习笔记" class="headerlink" title="MySQL复习笔记"></a>MySQL复习笔记</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h3><p>1.可以持久化数据到本地</p><p>2.结构化查询</p><h3 id="数据库的常见概念"><a href="#数据库的常见概念" class="headerlink" title="数据库的常见概念"></a>数据库的常见概念</h3><p>1.DB：数据库，存储数据的容器</p><p>2.DBMS: 数据库管理系统，又称为数据库软件或者数据库产品，用于创建或管理DB</p><p>3.SQL：结构化查询语言，用于和数据库通信的语言</p><h3 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h3><p>1.数据存放到表中，然后再放到库中</p><p>2.一个库中可以有多张表，每张表具有唯一的表名来标识自己</p><p>3.表中有一个或多个列，列又称为  ‘‘字段’‘  ，相当于java中的属性</p><p>4.表中的每一行数据相当于java中的对象</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL的优点"><a href="#MySQL的优点" class="headerlink" title="MySQL的优点"></a>MySQL的优点</h3><p>1、开源、免费、成本低<br>2、性能高、移植性也好<br>3、体积小，便于安装</p><h3 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h3><p>方式一：通过命令行<br>    net start 服务名<br>    net stop 服务名<br>方式二：计算机——右击——管理——服务</p><h3 id="MySQL服务的登录和退出"><a href="#MySQL服务的登录和退出" class="headerlink" title="MySQL服务的登录和退出"></a>MySQL服务的登录和退出</h3><p>登录：mysql 【-h主机名 -P端口号】 -u用户名  -p密码</p><p>退出：exit或ctrl+C</p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><pre class=" language-mysql"><code class="language-mysql">USE employees; #在操作某个表之前，建议写这个select 查询列表 from 表名</code></pre><p>特点：</p><p>  1、查询列表可以是：表中字段、常量值、表达式、函数</p><p>  2、查询的结果是一个虚拟的表格</p><pre class=" language-mysql"><code class="language-mysql">#显示employees的表结构DESC employees;#查询单个字段：SELECT last_name From employees;#查询多个字段:SELECT last_name,salary,email From employees;#查询表中所有字段SELECT * From employees;#查询常量值SELECT 100;SELECT 'john';#注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要#表达式查询SELECT 100 % 98;#查询函数SELECT VERSION();#起别名/*  1.便于理解  2.如果要查询的字段有重名的情况，使用别名区分开来    注意：如果别名中有特殊字符，比如空格、_等，需要用 “” ，还有如果别名中需要大写字母，也得用 “” 括起来。*/#方式一：使用asSELECT 100 % 98 AS 结果;SELECT last_name AS 姓,first_name AS 名 FROM employees;#方式二： 使用空格SELECT last_name 姓, first_name 名 FROM employees;#去重SELECT DISTINCT department_id FROM employees;/*   +号的作用 : 仅仅表示运算符      两个操作数都是数值型，则做加法运算      只要其中一个为字符型，试图将字符型转换为数值型            如果转换成功，则继续加法运算            如果失败，则将字符型数值转换为0。      只要其中一方为null，则结果肯定为null。*/SELECT 100 + 90;  #190SELECT '123' + 90; #213SELECT 'John' + 90; #90 SECLET 90 + NULL; #NULL#拼接字符: null和任何的字符拼接结果都是nullSELECT CONCAT('a','b','c') AS 结果;#必须的加 ‘’ SELECT CONCAT(last_name,first_name) AS 姓名 FROM employees;/*  IFNULL:   功能：判断某字段或表达式是否为null，如果为null 返回指定的值，否则返回原本的值*/SELECT IFNULL(commission_pct,0) AS 奖金率 FROM employees;/*  isnull函数  功能：判断某字段或表达式是否为null，如果是，则返回1，否则返回0*/SELECT ISNULL(commission_pct) FROM employees; </code></pre><p><strong>以上着重注意 NULL 的使用规则</strong></p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre class=" language-mysql"><code class="language-mysql">/*    select  查询列表  from 表名 where 筛选条件;    执行步骤为： from、where、select    分类：一、按条件表达式筛选     条件运算符： >  <  =  != 或者 <> 都表示不等于  >=  <=     = 运算符不能判断null值二、按逻辑表达式筛选     逻辑运算符： &&  || !(非) 分别对应 and or not     三、模糊查询     like 、 between and、 in、 is null 、is not null        like的特点:           一般和通配符搭配使用，可以判断字符型和数值型            通配符：               % 任意多个字符,包含0个字符               _ 任意单个字符                    IN的含义：判断某字段的值是否属于in列表中的某一项         特点：             ①使用in提高语句简洁度            ②in列表的值类型必须一致或兼容            ③in列表中不支持通配符*/#查询工资>12000的员工信息SELECT * FROM employees WHERE salary > 12000;#查询部门编号不等于90号的员工名和部门编号SELECT last_name,department_id FROM employees WHERE department_id <> 90#查询工资z在10000到20000之间的员工名、工资以及奖金SELECT last_name,salary,commission_pct FROM employeesWHERE salary >= 10000 AND salary <= 20000;#查询部门编号不是在90到110之间，或者工资高于15000的员工信息SELECT * FROM employeesWHERE NOT(department_id >= 90 AND department_id <= 110) OR salary >15000; #查询员工名中包含字符a的员工信息，注意模糊查询的条件必须要加 ''# %为通配符SELECT * FROM employees WHERE last_name LIKE '%a%';#查询员工名中第三个字符为n，第五个字符l的员工名和工资select last_name, salaryFROM employees WHERE last_name LIKE '__n_l%';#查询员工名中第二个字符为_的员工名  ESCAPE规定转义字符，默认为\SELECT last_name FROM employees WHERE last_name LIKE '_$_%' ESCAPE '$';#查询员工编号在100到120之间的员工信息,包含临界值，BETWEEN只能是前小后大SELECT * FROM employees WHERE employee_id BETWEEN 100 AND 120;#查询员工编号不在100到120之间的员工信息SELECT * FROM employees WHERE employee_id NOT BETWEEN 100 AND 120;#查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号SELECT last_name, job_idFROM employees WHERE job_id IN ('IT_PORT','AD_VP','AD_PRES');#查询没有奖金的员工名和奖金率SELECT last_name, commission_pct FROM employees WHERE commission_pct IS NULL#或者SELECT last_name, commission_pct FROM employees WHERE commission_pct <=> NULL#查询有奖金的员工名和奖金率SELECT last_name, commission_pct FROM employees WHERE commission_pct IS NOT NULL#is null 和 <=> 的比较#IS NULL:仅仅可以判断NULL值，可读性较高，建议使用#<=>    :既可以判断NULL值，又可以判断普通的数值，可读性较低</code></pre><p><strong>着重注意模糊查询</strong></p><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><pre class=" language-mysql"><code class="language-mysql">#语法：select 查询列表from 表名【where  筛选条件】order by 排序的字段或表达式 【asc|desc】;特点：1、asc代表的是升序，默认是升序，可以不写   desc代表的是降序2、order by子句可以支持 单个字段、别名、表达式、函数、多个字段3、order by子句在查询语句的最后面，除了limit子句执行顺序  from、where、select、order by#查询员工信息，要求工资从高到低排序SELECT * FROM employees ORDER BY salary DESC;#查询部门编号>=90的员工信息，并按员工编号降序 SELECT * FROM employees WHERE department_id >= 90  ORDER BY hiredate #查询员 工信息 按年薪降序  按别名排序 SELECT * , salary*12*(1+IFNULL(commission_pct,0)) 年薪 FROM  employees  ORDER BY 年薪 DESC #查询员工名，并且按名字的长度降序  按函数排序 SELECT LENGTH(last_name) ,last_name salary FROM employees ORDER BY LENGTH(last_name) DESC #查询员工信息，要求先按工资降序，再按employee_id升序  按多个字段排序 SELECT * FROM employees ORDER BY salary ASC ,employee_id DESC</code></pre><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><pre class=" language-mysql"><code class="language-mysql">概念：类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名好处：1、隐藏了实现细节  2、提高代码的重用性    调用：select 函数名(实参列表) 【from 表】;特点：    ①叫什么（函数名）    ②干什么（函数功能）    分类：    1、单行函数        如 concat、length、ifnull等    2、分组函数      功能：做统计使用，又称为统计函数、聚合函数、组函数    </code></pre><h4 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h4><pre class=" language-mysql"><code class="language-mysql">常见函数：    一、单行函数    字符函数：    length:获取字节个数(utf-8一个汉字代表3个字节,gbk为2个字节)    concat:拼接字符    upper、lower    substr、instr、trim、upper、lower、lpad、rpad、replace        数学函数：    round、ceil、floor、truncate、mod、rand：获取随机数[0,1)        日期函数：    now、curdate、curtime、year、month、monthname、day、hour    minute、second、str_to_date、date_format、DATEDIFF(返回日期相差天数)        其他函数：    version、database 、user、MD5('王瀚文'):返回该字符的加密形式        控制函数    if     case        #单行函数#1.length 获取参数值的字节个数SELECT LENGTH('john');SELECT LENGTH('张三丰hahaha');#15SHOW VARIABLES LIKE '%char%';  #显示所使用的字符集#2.concat 拼接字符串SELECT CONCAT(last_name,'_',first_name) 姓名 FROM employees;#3.upper、lowerSELECT UPPER('john');SELECT LOWER('joHn');#示例：将姓变大写，名变小写，然后拼接SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;#4.substr、substring#注意：索引从1开始#截取从指定索引处后面所有字符SELECT SUBSTR('李莫愁爱上了陆展元',7)  out_put;#截取从指定索引处指定字符长度的字符SELECT SUBSTR('李莫愁爱上了陆展元',1,3) out_put;#案例：姓中首字符大写，其他字符小写然后用_拼接，显示出来SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),'_',LOWER(SUBSTR(last_name,2)))  out_putFROM employees;#5.instr 返回子串第一次出现的索引，如果找不到返回0SELECT INSTR('杨不殷六侠悔爱上了殷六侠','殷八侠') AS out_put;#6.trim 去除前后的字符SELECT LENGTH(TRIM('    张翠山    ')) AS out_put; #9SELECT TRIM('a' FROM 'aaaaa张aaaaaaaa翠山aaaaa')  AS out_put; #张aaaaaaaa翠山  ，注意中间是FROM#7.lpad 用指定的字符实现左填充指定长度SELECT LPAD('殷素素',10,'*') AS out_put;#8.rpad 用指定的字符实现右填充指定长度SELECT RPAD('殷素素',12,'ab') AS out_put;#9.replace 替换全部匹配的SELECT REPLACE('周芷若周芷若张无忌爱上了周芷若','周芷若','赵敏') AS out_put;#数学函数#round四舍五入SELECT ROUND(-1.55);#-2SELECT ROUND(1.567,2);#1.57#ceil 向上取整,返回>=该参数的最小整数SELECT CEIL(-1.02);#2#floor 向下取整，返回<=该参数的最大整数SELECT FLOOR(-9.99);#-10#truncate 截断SELECT TRUNCATE(1.69999,1);#取余，结果的符号和被除数一样/*取余公式：mod(a,b) ：  a-a/b*b示例：mod(-10,-3):-10- (-10)/(-3)*（-3）=-1*/SELECT MOD(10,-3);SELECT 10%3;#三、日期函数#now 返回当前系统日期+时间SELECT NOW();#curdate 返回当前系统日期，不包含时间SELECT CURDATE();#curtime 返回当前时间，不包含日期SELECT CURTIME();#可以获取指定的部分，年、月、日、小时、分钟、秒SELECT YEAR(NOW()) 年;SELECT YEAR('1998-1-1') 年;SELECT MONTH(NOW()) 月;SELECT MONTHNAME(NOW()) 月;#str_to_date 将字符通过指定的格式转换成日期SELECT STR_TO_DATE('1998-3-2','%Y-%c-%d') AS out_put;#查询入职日期为1992-4-3的员工信息SELECT * FROM employees WHERE hiredate = '1992-4-3';或者SELECT * FROM employees WHERE hiredate = STR_TO_DATE('4-3-1992','%c-%d-%Y');STR_TO_DATE('4-3-1992','%c-%d-%Y') == '1992-4-3'#date_format 将日期转换成字符SELECT DATE_FORMAT(NOW(),'%y年%m月%d日') AS out_put;#查询有奖金的员工名和入职日期(xx月/xx日 xx年)SELECT last_name,DATE_FORMAT(hiredate,'%m月/%d日 %y年') 入职日期FROM employeesWHERE commission_pct IS NOT NULL;#查询两个日期的相差天数SELECT DATEDIFF('2021-7-12','2000-04-12');#四、其他函数SELECT VERSION();SELECT DATABASE();SELECT USER();#五、流程控制函数#1.if函数： 实现if else 的效果，类似于三元运算符#  if(条件表达式，表达式1，表达式2)：如果条件表达式成立，返回表达式1，否则返回表达式2SELECT IF(10<5,'大','小');SELECT last_name,commission_pct,IF(commission_pct IS NULL,'没奖金，呵呵','有奖金，嘻嘻') 备注FROM employees;#2.case函数的使用一： switch case 的效果/*java中switch(变量或表达式)&#123;    case 常量1：语句1;break;    ...    default:语句n;break;&#125;mysql中case 要判断的字段或表达式(如果是字段不能写别名，只能写它本身的字段名)when 常量1 then 要显示的值1或语句1;when 常量2 then 要显示的值2或语句2;...else 要显示的值n或语句n;end*//*案例：查询员工的工资，要求部门号=30，显示的工资为1.1倍部门号=40，显示的工资为1.2倍部门号=50，显示的工资为1.3倍其他部门，显示的工资为原工资*/SELECT salary 原始工资,department_id,CASE department_idWHEN 30 THEN salary*1.1WHEN 40 THEN salary*1.2WHEN 50 THEN salary*1.3ELSE salaryEND AS 新工资FROM employees;#3.case 函数的使用二：类似于 多重if#case后的语句相当于一个字段，要与前面的字段之间有逗号，否则报错/*java中：if(条件1)&#123;    语句1；&#125;else if(条件2)&#123;    语句2；&#125;...else&#123;    语句n;&#125;mysql中：case when 条件1 then 要显示的值1或语句1when 条件2 then 要显示的值2或语句2。。。else 要显示的值n或语句nend*/#案例：查询员工的工资的情况如果工资>20000,显示A级别如果工资>15000,显示B级别如果工资>10000，显示C级别否则，显示D级别SELECT salary,CASE WHEN salary>20000 THEN 'A'WHEN salary>15000 THEN 'B'WHEN salary>10000 THEN 'C'ELSE 'D'END AS 工资级别FROM employees;</code></pre><p><strong>重点关注取余运算的公式和case函数</strong></p><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><pre class=" language-mysql"><code class="language-mysql">/*功能：    用作统计使用，又称为聚合函数或统计函数或组函数    分类： sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算非空的值的个数 特点：1、sum、avg一般用于处理数值型   max、min、count可以处理任何类型2、以上分组函数都忽略null值3、可以和distinct搭配实现去重的运算4、count函数的单独介绍一般使用count(*)用作统计行数5、和分组函数一同查询的字段要求是group by后的字段*/#1、简单 的使用SELECT SUM(salary) FROM employees;SELECT AVG(salary) FROM employeesSELECT MAX(salary) FROM employeesSELECT MIN(salary) FROM employeesSELECT COUNT(salary) FROM employees#2、参数支持哪些类型SELECT MAX(last_name),MIN(last_name) FROM employees;SELECT MAX(hiredate),MIN(hiredate) FROM employees;SELECT COUNT(commission_pct) FROM employees;SELECT COUNT(last_name) FROM employees;#3、忽略null值SELECT COUNT(commission_pct) FROM employees;SELECT commission_pct FROM employees;#4、和distinct搭配SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;#5、count函数的详细介绍#只要一行中有一列不为null，就统计SELECT COUNT(*) FROM employees;#在每一行的前面加一个1，统计1的个数，count括号里的值可以是任意的常数SELECT COUNT(1) FROM employees;#查询部门编号为90的员工个数SELECT COUNT(*)  FROM employees WHERE department_id = 90效率：MYISAM存储引擎下 ，COUNT(*)的效率高，因为其内部有计数器，能直接返回个数INNODB存储引擎下，COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些</code></pre><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><pre class=" language-mysql"><code class="language-mysql">/*语法：  select 查询列表  from 表 【where 筛选条件】  group by 分组的字段 【order by 排序的字段】;特点：1、和分组函数一同查询的字段必须是group by后出现的字段2、筛选分为两类：分组前筛选(where)和分组后筛选(having)           针对的表                  位置               连接的关键字分组前筛选    原始表                   group by前         where    分组后筛选    group by后的结果集     group by后            having一般来讲，能用分组前筛选的，尽量使用分组前筛选，提高效率3、分组可以按单个字段也可以按多个字段(多个字段之间用逗号隔开，没有顺序要求)4、可以搭配着排序使用(放在整个分组查询的最后)*/#1.简单的分组#案例1：查询每个工种的员工平均工资SELECT AVG(salary),job_id FROM employeesGROUP BY job_id;#案例2：查询每个位置的部门个数SELECT COUNT(*),location_id FROM departmentsGROUP BY location_id#2、可以实现分组前的筛选#案例1：查询邮箱中包含a字符的 每个部门的最高工资SELECT MAX(salary),department_id FROM employeesWHERE email LIKE '%a%' GROUP BY department_id#案例2：查询有奖金的每个领导手下员工的平均工资 SELECT MAX(salary),manager_id FROM employeesWHERE commission_pct IS NOT NULL GROUP BY manager_id#3、分组后筛选#案例1：查询哪个部门的员工个数>5SELECT COUNT(*), department_idFROM employeesGROUP BY department_idHAVING COUNT(*) > 5#案例2：每个工种有奖金的员工的最高工资>12000的工种编号和最高工资SELECT MAX(salary), job_id  FROM employeesWHERE commission_pct IS NOT NULL GROUP BY job_idHAVING MAX(salary) > 12000#案例3：领导编号>102的每个领导手下的最低工资大于5000的领导编号和最低工资SELECT MIN(salary), manager_id FROM employeesWHERE manager_id > 102 GROUP BY manager_id HAVING MIN(salary) > 5000#按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数 >5 的有哪些SELECT COUNT(*) c ,LENGTH(last_name) len_name  FROM employeesGROUP BY len_name  HAVING  c > 5#4.按多个字段分组#案例：查询每个工种每个部门的最低工资,并按平均工资降序SELECT AVG(salary),department_id,job_idFROM employeesGROUP BY department_id,job_idORDER BY AVG(salary) DESC;</code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="sql92语法"><a href="#sql92语法" class="headerlink" title="sql92语法"></a>sql92语法</h4><pre class=" language-mysql"><code class="language-mysql">/*含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询笛卡尔乘积现象：表1 有m行，表2有n行，结果=m*n行发生原因：没有有效的连接条件如何避免：添加有效的连接条件分类：    按年代分类：    sql92标准:仅仅支持内连接    sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接        按功能分类：        内连接：            等值连接            非等值连接            自连接        外连接：            左外连接            右外连接            全外连接                交叉连接*/#一、sql92标准######1、等值连接/*  ① 多表等值连接的结果为多表的交集部分  ② n表连接，至少需要n-1个连接条件  ③ 多表的顺序没有要求  ④ 一般需要为表起别名  ⑤ 可以搭配前面介绍的所有子句使用，比如排序、分组、筛选*/#案例1：查询女神名和对应的男神名#别名注意点！！！！  如果为表起了别名，则查询的字段就不能使用原来的表名去限定SELECT NAME,boyname FROM beauty g,boys bWHERE g.boyfriend_id = b.id#案例2：查询员工名和对应的部门名SELECT last_name,department_name FROM employees e,departments dWHERE e.department_id = d.department_id#2、加筛选#案例：查询有奖金的员工名、部门名SELECT last_name,department_name,commission_pctFROM employees e,departments dWHERE e.department_id = d.department_idAND e.commission_pct IS NOT NULL#案例2：查询城市名中第二个字符为o的部门名和城市名SELECT department_name,cityFROM departments d,locations lWHERE d.`location_id` = l.`location_id`AND city LIKE '_o%'#3、可以加分组#案例1：查询每个城市的部门个数SELECT COUNT(*) 个数 ,cityFROM departments d,locations lWHERE d.`location_id` = l.`location_id`GROUP BY city#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资SELECT department_name, d.manager_id, MIN(salary)FROM employees e,departments dWHERE e.department_id = d.`department_id`AND commission_pct IS NOT NULLGROUP BY department_name, d.manager_id#4 三表连接#案例：查询员工名、部门名和所在的城市，并且城市名以s开头，department_name倒序排列SELECT last_name,department_name,cityFROM employees e,departments d,locations lWHERE e.`department_id` = d.`department_id`AND d.`location_id` = l.`location_id`AND city LIKE 's%'ORDER BY department_name DESC#####2、非等值连接#案例1：查询员工的工资和工资级别SELECT salary,grade_levelFROM employees e, job_grades gWHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`#3、自连接#案例：查询 员工名和领导的名称SELECT e.employee_id, e.last_name, m.employee_id,m.last_nameFROM employees e, employees mWHERE e.`manager_id`=m.`employee_id`;</code></pre><p><strong>重点关注别名的注意点、分组、非等值连接、自连接</strong></p><h4 id="sql99语法"><a href="#sql99语法" class="headerlink" title="sql99语法"></a>sql99语法</h4><pre class=" language-mysql"><code class="language-mysql">/*语法：    select 查询列表    from 表1 别名 【连接类型】    join 表2 别名     on 连接条件    【where 筛选条件】    【group by 分组】    【having 筛选条件】    【order by 排序列表】    分类：内连接（★）：inner外连接    左外(★):left 【outer】    右外(★)：right 【outer】    全外：full【outer】交叉连接：cross */#一）内连接/*语法：select 查询列表from 表1 别名inner join 表2 别名on 连接条件;分类：等值非等值自连接特点：①添加排序、分组、筛选②inner可以省略③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集*/#一)、等值连接#案例1.查询员工名、部门名SELECT last_name,department_nameFROM employees eINNER JOIN departments dON d.`department_id` = e.`department_id`#案例2.查询名字中包含e的员工名和工种名（添加筛选）SELECT last_name,job_titleFROM employees eINNER JOIN jobs jON e.`job_id`=  j.`job_id`WHERE e.`last_name` LIKE '%e%';#3. 查询部门个数>3的城市名和部门个数，（添加分组+筛选）#①查询每个城市的部门个数#②在①结果上筛选满足条件的SELECT city, COUNT(*) 个数FROM departments dINNER JOIN locations lON d.`location_id` = l.`location_id`GROUP BY cityHAVING COUNT(*) > 3;#案例4.查询哪个部门的员工个数>3的部门名和员工个数，并按个数降序（添加排序）SELECT COUNT(*) 个数 ,department_nameFROM employees eINNER JOIN departments dON e.`department_id` = d.`department_id`GROUP BY department_nameHAVING 个数>3ORDER BY 个数 DESC#5.查询员工名、部门名、工种名，并按部门名降序（添加三表连接）SELECT last_name,department_name,job_titleFROM employees eJOIN departments d ON e.`department_id` = d.`department_id`JOIN jobs j ON j.`job_id` = e.`job_id`ORDER BY department_name DESC#二）非等值连接#查询员工的工资级别SELECT salary,grade_levelFROM employees eJOIN job_grades gON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal` #查询工资级别的个数>20的个数，并且按工资级别降序SELECT COUNT(*), grade_levelFROM employees eJOIN job_grades jON e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`GROUP BY grade_levelHAVING COUNT(*) > 20ORDER BY grade_level DESC #三）自连接 #查询员工的名字、上级的名字SELECT e.last_name,m.last_nameFROM employees eJOIN employees mON e.`manager_id` = m.`employee_id`#查询姓名中包含字符k的员工的名字和上级的名字SELECT e.last_name empId,m.last_name managerIdFROM employees eJOIN employees mON e.`manager_id` = m.`employee_id`WHERE e.`last_name` LIKE '%k%' #二、外连接 /* 应用场景：用于查询一个表中有，另一个表没有的记录  特点： 1、外连接的查询结果为主表中的所有记录    如果从表中有和它匹配的，则显示匹配的值    如果从表中没有和它匹配的，则显示null    外连接查询结果=内连接结果+主表中有而从表没有的记录 2、左外连接，left join左边的是主表    右外连接，right join右边的是主表 3、左外和右外交换两个表的顺序，可以实现同样的效果  4、全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的 */ #引入：查询男朋友 不在男神表的的女神名#左外连接SELECT b.*,bo.boyNameFROM beauty bLEFT JOIN boys boON bo.`id` = b.`boyfriend_id`WHERE bo.`id` IS NULL#右外连接SELECT b.*,bo.boyNameFROM boys boRIGHT JOIN beauty bON bo.`id` = b.`boyfriend_id`WHERE bo.`id` IS NULL #案例1：查询哪个部门没有员工 #左外SELECT  d.*,e.employee_idFROM departments dLEFT JOIN employees eON d.`department_id` = e.`department_id`WHERE e.`employee_id` IS NULL #全外，mysql不支持，两张表的所有信息都会查出来，没有的用null填充 USE girls; SELECT b.*,bo.* FROM beauty b FULL OUTER JOIN boys bo ON b.`boyfriend_id` = bo.id;#交叉连接，即笛卡尔乘积SELECT b.*,bo.*FROM beauty bCROSS JOIN boys bo;例题：#一、查询编号>3的女神的男朋友信息，如果有则列出详细，如果没有，用null填充SELECT b.id,b.name,bo.*FROM beauty bLEFT OUTER JOIN boys boON b.`boyfriend_id` = bo.`id`WHERE b.`id`>3;#二、查询哪个城市没有部门SELECT cityFROM departments dRIGHT OUTER JOIN locations l ON d.`location_id`=l.`location_id`WHERE  d.`department_id` IS NULL;#三、查询部门名为SAL或IT的员工信息SELECT e.*,d.department_name,d.`department_id`FROM departments  dLEFT JOIN employees eON d.`department_id` = e.`department_id`WHERE d.`department_name` IN('SAL','IT');</code></pre><p><strong>重点关注外连接和例题</strong></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><pre class=" language-mysql"><code class="language-mysql">/*含义：出现在其他语句中的select语句，称为子查询或内查询外部的查询语句，称为主查询或外查询分类：按子查询出现的位置：    select后面：        仅仅支持标量子查询        from后面：        支持表子查询    where或having后面：★        标量子查询（单行） √        列子查询  （多行） √                行子查询            exists后面（相关子查询）        表子查询按结果集的行列数不同：    标量子查询（结果集只有一行一列）    列子查询（结果集只有一列多行）    行子查询（结果集有一行多列）    表子查询（结果集一般为多行多列）*/#一、位置在where或having后面/*1、标量子查询（单行子查询）2、列子查询（多行子查询）3、行子查询（多列多行）特点：①子查询放在小括号内②子查询一般放在条件的右侧③标量子查询，一般搭配着单行操作符使用> < >= <= = <>列子查询，一般搭配着多行操作符使用in、any/some、all子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果*/#1.标量子查询★#案例1：谁的工资比 Abel 高?SELECT * FROM employeesWHERE salary > (    SELECT salary    FROM employees    WHERE last_name = 'Abel')#案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资SELECT last_name, job_id, salaryFROM employeesWHERE job_id = (    SELECT job_id    FROM employees    WHERE employee_id = 141) AND salary > (    SELECT salary    FROM employees    WHERE employee_id = 143)#案例3：返回公司工资最少的员工的last_name,job_id和salarySELECT last_name,job_id,salaryFROM employeesWHERE salary = (    SELECT MIN(salary)    FROM employees)#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资SELECT department_id, MIN(salary)FROM employeesGROUP BY department_idHAVING MIN(salary) > (   SELECT MIN(salary)   FROM employees   WHERE department_id = 50)#2.列子查询（多行子查询）#案例1：返回location_id是1400或1700的部门中的所有员工姓名SELECT last_nameFROM employeesWHERE department_id IN(   SELECT DISTINCT department_id   FROM departments   WHERE location_id IN (1400,1700))#案例2：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salarySELECT last_name,employee_id,job_id,salaryFROM employeesWHERE salary < (   SELECT DISTINCT MAX(salary)   FROM employees   WHERE job_id = 'IT_PROG')AND job_id <> 'IT_PROG'#3、行子查询（结果集一行多列或多行多列）#案例：查询员工编号最小并且工资最高的员工信息SELECT * FROM employeesWHERE (employee_id,salary)=(    SELECT MIN(employee_id),MAX(salary)    FROM employees);#二、select后面/*仅仅支持标量子查询*/#案例1：查询每个部门的员工个数SELECT d.*,(    SELECT COUNT(*)    FROM employees e    WHERE e.department_id = d.department_id) geshuFROM departments d#三、from后面/*将子查询结果充当一张表，要求必须起别名*/#案例1：查询每个部门的平均工资的工资等级SELECT ag_dept.*, j.grade_levelFROM (   SELECT AVG(salary) ag   FROM employees e   GROUP BY department_id) ag_deptJOIN job_grades jON ag_dept.ag BETWEEN j.`lowest_sal` AND j.`highest_sal`#四、exists后面（相关子查询）/*语法：select exists(完整的查询语句)结果：1或0*/#案例1：查询有员工的部门名SELECT department_nameFROM departments dWHERE EXISTS(    SELECT *    FROM employees e    WHERE d.`department_id`=e.`department_id`);#显示通过 FROM departments 查出 departments 表的信息，然后根据 WHERE d.`department_id`=# e.`department_id`的过滤条件重新生成一张虚拟表，接着在SELECT department_name得到结果#案例2：查询没有女朋友的男神信息SELECT bo.*FROM boys boWHERE NOT EXISTS (    SELECT *     FROM beauty b    WHERE b.`boyfriend_id` = bo.`id`)【in 和 exist的区别】1、适用表的类型不同。in是子查询为驱动表，外面的表为被驱动表，故适用于子查询结果集小而外面的表结果集大的情况。exists是外面的表位驱动表，子查询里面的表为被驱动表，故适用于外面的表结果集小而子查询结果集大的情况。2、子查询关联不同。exists一般都是关联子查询。对于关联子查询，必须先执行外层查询，接着对所有通过过滤条件的记录，执行内层查询。外层查询和内层查询相互依赖，因为外层查询会把数据传递给内层查询。in则一般都是非关联子查询，非关联子查询则必须先完成内层查询之后，外层查询才能介入。3、执行次数不同。IN 语句：只执行一次，确定给定的值是否与子查询或列表中的值相匹配。in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。EXISTS语句：执行次数根据表的长度而定。指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。</code></pre><p><strong>重点关注标量子查询的案例4、列子查询案例2、==select后面的案例1、from后面的案例1、exists后面（相关子查询）==</strong></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求</p><pre class=" language-mysql"><code class="language-mysql">/*语法：后面的数子为执行顺序    select 查询列表           ------>  7     from 表                    ------>  1     【join type join 表2  ------>  2    on 连接条件            ------>  3     where 筛选条件         ------>  4    group by 分组字段      ------>  5    having 分组后的筛选    ------>  6    order by 排序的字段】  ------>  8    limit 【offset,】size;------>  9        offset要显示条目的起始索引（起始索引从0开始）    size 要显示的条目个数    特点：    ①limit语句放在查询语句的最后     ②公式    要显示的页数 page，每页的条目数size        select 查询列表    from 表    limit (page-1)*size,size;*/#案例1：查询前五条员工信息SELECT * FROM  employees LIMIT 0,5;SELECT * FROM  employees LIMIT 5;#案例2：查询第11条——第25条SELECT * FROM  employees LIMIT 10,15;#案例3：有奖金的员工信息，并且工资较高的前10名显示出来SELECT * FROM employees WHERE commission_pct IS NOT NULLORDER BY salary DESC    LIMIT 10</code></pre><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><pre class=" language-mysql"><code class="language-mysql">/*union 联合 合并：将多条查询语句的结果合并成一个结果语法：查询语句1union查询语句2union...应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时特点：★1、要求多条查询语句的查询列数是一致的！2、要求多条查询语句的查询的每一列的类型和顺序最好一致，类型要是不一致的话会尝试自动转换，转不成就报错3、union关键字默认去重，如果使用union all 可以包含重复项*/#引入的案例：查询部门编号>90或邮箱包含a的员工信息SELECT * FROM employees WHERE email LIKE '%a%' OR department_id>90;;SELECT * FROM employees  WHERE email LIKE '%a%'UNIONSELECT * FROM employees  WHERE department_id>90;</code></pre><h3 id="查询总结"><a href="#查询总结" class="headerlink" title="查询总结"></a>查询总结</h3><pre class=" language-mysql"><code class="language-mysql">语法：数字为执行顺序    select 查询列表           7    from 表1 别名             1    连接类型join 表2           2    on 连接条件               3    where筛选                 4    group by                 5    having                      6    order by                   8    limit 起始条目索引，条目数  9</code></pre><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><pre class=" language-mysql"><code class="language-mysql">试问：SELECT * FROM employees和SELECT * FROM employees  WHERE commission_pct  LIKE '%%' AND last_name LIKE '%%'的结果是否一样？并说明原因结果：  如果判断的字段有null，则不一样，没有null值就一样</code></pre><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><pre class=" language-mysql"><code class="language-mysql">/*数据操作语言：插入：insert修改：update删除：delete*/#一、插入语句/*#方式一：经典的插入语法：insert into 表名(列名,...) values(值1,...);*/#1.插入的值的类型要与列的类型一致或兼容INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)VALUES(13,'唐艺昕','女','1990-4-23','1898888888',NULL,2);#2.不可以为null的列必须插入值。可以为null的列如何插入值？ 字段和值都可省略#方式一：INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)VALUES(13,'唐艺昕','女','1990-4-23','1898888888',NULL,2);#方式二：INSERT INTO beauty(id,NAME,sex,phone,,boyfriend_id)VALUES(null,'娜扎','女','1388888888',3);#3.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致INSERT INTO beautyVALUES(18,'张飞','男',NULL,'119',NULL,NULL);#方式二：/*语法：insert into 表名set 列名=值,列名=值,...*/INSERT INTO beautySET id=19,NAME='刘涛',phone='999';#两种方式的比较#1、方式一支持插入多行也就是批量插入,方式二不支持INSERT INTO beautyVALUES(23,'唐艺昕1','女','1990-4-23','1898888888',NULL,2),(24,'唐艺昕2','女','1990-4-23','1898888888',NULL,2),(25,'唐艺昕3','女','1990-4-23','1898888888',NULL,2);#2、方式一支持子查询，方式二不支持INSERT INTO beauty(id,NAME,phone)SELECT 26,'宋茜','11809866';INSERT INTO beauty(id,NAME,phone)SELECT id,boyname,'1234567'FROM boys WHERE id<3;</code></pre><h3 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h3><pre class=" language-mysql"><code class="language-mysql">/*1.修改单表的记录语法：update 表名set 列=新值,列=新值,...where 筛选条件;2.修改多表的记录【补充】语法：sql92语法：update 表1 别名,表2 别名set 列=值,...where 连接条件and 筛选条件;sql99语法：update 表1 别名inner|left|right join 表2 别名on 连接条件set 列=值,...where 筛选条件;*/#1.修改单表的记录#案例1：修改beauty表中姓唐的女神的电话为13899888899UPDATE beauty SET phone = '13899888899'WHERE NAME LIKE '唐%';#案例2：修改boys表中id好为2的名称为张飞，usercp为10UPDATE boys SET boyname='张飞',usercp=10WHERE id=2;#2.修改多表的记录#案例 1：修改张无忌的女朋友的手机号为114UPDATE boys bo RIGHT JOIN beauty b ON bo.`id` = b.`boyfriend_id`SET phone='119',bo.`userCP`=1000WHERE bo.id = 1#案例2：修改没有男朋友的女神的男朋友编号都为2号UPDATE boys boRIGHT JOIN beauty bON bo.`id` = b.`boyfriend_id`SET b.`boyfriend_id` = 2WHERE bo.`id` IS NULL</code></pre><p><strong>重点是修改多表的记录</strong></p><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><pre class=" language-mysql"><code class="language-mysql">/*方式一：delete语法：1、单表的删除【★】delete from 表名 where 筛选条件2、多表的删除【补充】sql92语法：delete 表1的别名,表2的别名from 表1 别名,表2 别名where 连接条件and 筛选条件;sql99语法：delete 表1的别名,表2的别名from 表1 别名inner|left|right join 表2 别名 on 连接条件where 筛选条件;方式二：truncate：表中数据全部删除语法：truncate table 表名;*/#方式一：delete#1.单表的删除#案例：删除手机号以9结尾的女神信息DELETE FROM beautyWHERE phone LIKE '%8'#2.多表的删除【级联删除】#案例：删除张无忌的女朋友的信息DELETE b FROM beauty bRIGHT JOIN  boys bo ON b.boyfriend_id = bo.idWHERE bo.boyName = '张无忌'#案例：删除黄晓明的信息以及他女朋友的信息DELETE b,bo FROM beauty bRIGHT JOIN  boys bo ON b.boyfriend_id = bo.idWHERE bo.boyName = '黄晓明'#方式二：truncate语句TRUNCATE TABLE boys ;  这个是全部删除</code></pre><p><strong>重点是多表的删除</strong></p><h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><pre class=" language-mysql"><code class="language-mysql">delete和truncate比较    1.delete 可以加where 条件，truncate不能加    2.truncate删除，效率高一丢丢    3.假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始，而truncate删除后，再插入数据，自增长列的值从1开始。    4.truncate删除没有返回值，delete删除有返回值    5.truncate删除不能回滚，delete删除可以回滚.</code></pre><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h3><pre class=" language-mysql"><code class="language-mysql">/*数据定义语言一、库的管理创建、修改、删除二、表的管理创建、修改、删除创建： create修改： alter删除： drop*/#一、库的管理#1、库的创建/*语法：create database  [if not exists]库名;*/#案例：创建库BooksCREATE DATABASE IF NOT EXISTS books ;#2、库的修改,一般不修改库RENAME DATABASE books TO 新库名;#更改库的字符集ALTER DATABASE books CHARACTER SET utf-8;#3、库的删除DROP DATABASE IF EXISTS books;#二、表的管理#1.表的创建 ★/*语法：注意是小括号，不是大括号create table 表名(    列名 列的类型【(长度) 约束】,    列名 列的类型【(长度) 约束】,    列名 列的类型【(长度) 约束】,    ...    列名 列的类型【(长度) 约束】)*/#案例：创建表BookCREATE TABLE book(    id INT,#编号    bName VARCHAR(20),#图书名    price DOUBLE,#价格    authorId  INT,#作者编号    publishDate DATETIME#出版日期);#案例：创建表authorCREATE TABLE IF NOT EXISTS author(    id INT,    au_name VARCHAR(20),    nation VARCHAR(10))#2.表的修改/*语法：【first|after 字段名】可以指定添加位置alter table 表名 add|drop|modify|change column 列名  列类型、约束 【first|after 字段名】;*/#①修改列名: ALTER TABLE 表名 CHANGE COLUMN 旧列名 新列名 列的类型;#②修改列的类型或约束ALTER TABLE 表名 MODIFY COLUMN 列名  列类型、约束;#③添加新列ALTER TABLE 表名 ADD COLUMN 列名 列类型、约束; #④删除列ALTER TABLE 表名 DROP COLUMN  列名;#⑤修改表名ALTER TABLE 表名 RENAME TO 新表名;#3.表的删除DROP TABLE IF EXISTS book_author;#通用的写法：DROP DATABASE IF EXISTS 旧库名;CREATE DATABASE 新库名;DROP TABLE IF EXISTS 旧表名;CREATE TABLE  表名();#4.表的复制#1.仅仅复制表的结构CREATE TABLE copy LIKE author;#2.复制表的结构+数据CREATE TABLE copy2 SELECT * FROM author;#只复制部分数据CREATE TABLE copy3SELECT id,au_nameFROM author WHERE nation='中国';#仅仅复制某些字段，不要数据CREATE TABLE copy4 SELECT id,au_nameFROM authorWHERE 0;</code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><pre class=" language-mysql"><code class="language-mysql">/*数值型：    整型    小数：        定点数        浮点数字符型：    较短的文本：char、varchar    较长的文本：text、blob（较长的二进制数据）日期型：*/#一、整型/*分类：tinyint、smallint、mediumint、int/integer、bigint1           2              3             4             8特点：① 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要在创建表的时候添加unsigned关键字② 如果插入的数值超出了整型的范围,会报out of range异常，并且插入临界值③ 如果不设置长度，会有默认的长度(要分清楚长度和范围的区别)   长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用，且默认为无符号的。*/#二、小数/*分类：1.浮点型float(M,D)double(M,D)2.定点型dec(M，D)decimal(M,D)特点：①M：整数部位+小数部位D：小数部位有了M、D，小数点前的为数也就确定了如果超过范围，则插入临界值②M和D都可以省略如果是decimal，则M默认为10，D默认为0如果是float和double，则会根据插入的数值的精度来决定精度③定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用原则：所选择的类型越简单越好，能保存数值的类型越小越好*/#三、字符型/*较短的文本：charvarchar其他：binary和varbinary用于保存较短的二进制enum用于保存枚举set用于保存集合较长的文本：textblob(较大的二进制)特点：            写法             M的意思                             特点           空间的耗费        效率char      char(M)        最大的字符数，可以省略，默认为1     固定长度的字符          比较耗费        高varchar varchar(M)    最大的字符数，不可以省略           可变长度的字符        比较节省          低*/ #四、日期型/*分类：date 只保存日期time 只保存时间year 只保存年datetime保存日期+时间timestamp保存日期+时间特点：             字节        范围               时区等的影响datetime       8        1000——9999          不受timestamp    4       1970-2038           受*/</code></pre><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="约束的基本知识"><a href="#约束的基本知识" class="headerlink" title="约束的基本知识"></a>约束的基本知识</h3><pre class=" language-mysql"><code class="language-mysql">含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性分类：六大约束(非空、检查、主键、外键、默认、唯一)    NOT NULL：非空，用于保证该字段的值不能为空,    比如姓名、学号等        CHECK:检查约束【mysql中不支持】      比如年龄、性别        PRIMARY KEY:主键，用于保证该字段的值具有唯一性，并且非空     比如学号、员工编号等        并且主键的名字是mysql指定的，为PRIMARY，就改变不了        FOREIGN KEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值        在从表添加外键约束，用于引用主表中某列的值       比如学生表的专业编号，员工表的部门编号，员工表的工种编号    DEFAULT:默认，用于保证该字段有默认值，    比如性别    UNIQUE:唯一，用于保证该字段的值具有唯一性，可以为空     比如座位号添加约束的时机：    1.创建表时    2.修改表时        约束的添加分类：    列级约束(在列后面加约束)： 六大约束语法上都支持，但《外键约束》没有效果                    表级约束(字段写完后再在最后面加约束)：除了非空、默认，其他的都支持</code></pre><h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><pre class=" language-mysql"><code class="language-mysql">#一、创建表时添加约束#1.添加列级约束/*语法：直接在字段名和类型后面追加 约束类型即可。不支持外键、检查*/USE students;DROP TABLE stuinfo;CREATE TABLE stuinfo(    id INT PRIMARY KEY,#主键    stuName VARCHAR(20) NOT NULL UNIQUE,#非空    gender CHAR(1) CHECK(gender='男' OR gender ='女'),#检查，无效，只是不报错    seat INT UNIQUE,#唯一    age INT DEFAULT  18,#默认约束    majorId INT REFERENCES major(id)#外键，无效，只是不报错);#2.添加表级约束/*语法：在各个字段的最下面 【constraint 约束名】 约束类型(字段名) ， 【constraint 约束名】可以不加，默认是字段名 不支持非空、检查*/DROP TABLE IF EXISTS stuinfo;CREATE TABLE stuinfo(    id INT,    stuname VARCHAR(20),    gender CHAR(1),    seat INT,    age INT,    majorid INT,       #CONSTRAINT 是 约束的意思    CONSTRAINT pk PRIMARY KEY(id),#主键    CONSTRAINT uq UNIQUE(seat),#唯一键    CONSTRAINT ck CHECK(gender ='男' OR gender  = '女'),#检查 ，无效，只是不报错    CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键);#通用的写法：★CREATE TABLE IF NOT EXISTS stuinfo(    id INT PRIMARY KEY,    stuname VARCHAR(20),    sex CHAR(1),    age INT DEFAULT 18,    seat INT UNIQUE,    majorid INT,    CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id));</code></pre><h3 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h3><pre class=" language-mysql"><code class="language-mysql">#二、修改表时添加约束/*1、添加列级约束alter table 表名 modify column 字段名 字段类型 新约束;2、添加表级约束alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;*/DROP TABLE IF EXISTS stuinfo;CREATE TABLE stuinfo(    id INT,    stuname VARCHAR(20),    gender CHAR(1),    seat INT,    age INT,    majorid INT)DESC stuinfo;#1.添加非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;#2.添加默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;#3.添加主键#①列级约束ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;#②表级约束ALTER TABLE stuinfo ADD PRIMARY KEY(id);#4.添加唯一#①列级约束ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;#②表级约束ALTER TABLE stuinfo ADD UNIQUE(seat);#5.添加外键ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); #三、修改表时删除约束#1.删除非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;#2.删除默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT ;#3.删除主键ALTER TABLE stuinfo DROP PRIMARY KEY;#4.删除唯一ALTER TABLE stuinfo DROP INDEX seat;#5.删除外键ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;SHOW INDEX FROM stuinfo;</code></pre><h3 id="列级和表级的约束比较"><a href="#列级和表级的约束比较" class="headerlink" title="列级和表级的约束比较"></a>列级和表级的约束比较</h3><pre class=" language-mysql"><code class="language-mysql">                    位置                    支持的约束类型                      是否可以起约束名列级约束        列的后面              语法都支持，但默认和外键无效    不可以表级约束            所有列的下面       除去默认和非空                        可以</code></pre><h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><pre class=" language-mysql"><code class="language-mysql">级联删除就是在删除主表的时候，从表中引用主表的字段也一并删除ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY(要添加外键的字段) REFERENCES 主表(要关联的字段) ON DELETE CASCADEON DELETE CASCADE:就代表级联删除</code></pre><h3 id="级联置空"><a href="#级联置空" class="headerlink" title="级联置空"></a>级联置空</h3><pre class=" language-mysql"><code class="language-mysql">级联置空就是就是在删除主表的时候，从表中引用主表的字段置为nullALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY(要添加外键的字段) REFERENCES 主表(要关联的字段) ON DELETE SET NULLON DELETE SET NULL:就代表级联置空</code></pre><h3 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题"></a>面试题</h3><pre class=" language-mysql"><code class="language-mysql">主键和唯一的对比：        保证唯一性  是否允许为空    一个表中可以有多少个   是否允许组合(多个字段一起充当某个约束)主键        √            ×               至多有1个            √，但不推荐唯一          √            √               可以有多个           √，但不推荐注：唯一约束可以为null的意思是 该表中只有一条数据的该字段为null   比如 insert into boys values(1,"John",'男',null,2000-04-12) 可成功插入，在插入一下数据时       insert into boys values (1,"Lily", '女',null,2000-04-12) 插入失败外键：         1、要求在从表设置外键关系    2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求    3、主表的关联列必须是一个key（一般是主键或唯一）    4、插入数据时，先插入主表，再插入从表    删除数据时，先删除从表，再删除主表</code></pre><h2 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h2><h3 id="含义及特点"><a href="#含义及特点" class="headerlink" title="含义及特点"></a>含义及特点</h3><pre class=" language-mysql"><code class="language-mysql">又称为自增长列含义：可以不用手动的插入值，系统提供默认的序列值特点：1、标识列必须和主键搭配吗？不一定，但要求是一个key2、一个表可以有几个标识列？至多一个！！！3、标识列的类型只能是数值型4、标识列可以通过 SET auto_increment_increment=3;设置步长，可以通过 手动插入值，设置起始值5、改变表自增列的值为n,ALTER TABLE beauty AUTO_INCREMENT = n</code></pre><h2 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h2><h3 id="事务介绍"><a href="#事务介绍" class="headerlink" title="事务介绍"></a>事务介绍</h3><pre class=" language-mysql"><code class="language-mysql">Transaction Control Language 事务控制语言事务(概念要记住)：一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。案例：转账张三丰  1000郭襄    1000update 表 set 张三丰的余额=500 where name='张三丰'出现意外update 表 set 郭襄的余额=1500 where name='郭襄'事务的特性：ACID原子性(Atomicity)：一个事务不可再分割，要么都执行要么都不执行一致性(Consistency)：一个事务执行会使数据从一个一致状态切换到另外一个一致状态隔离性(Isolation)：一个事务的执行不受其他事务的干扰持久性(Durability)：一个事务一旦提交，则会永久的改变数据库的数据.事务的创建隐式事务：事务没有明显的开启和结束的标记比如insert、update、delete语句delete from 表 where id =1;显式事务：事务具有明显的开启和结束的标记前提：必须先设置自动提交功能为禁用set autocommit=0;步骤1：开启事务set autocommit=0;start transaction;可选的步骤2：编写事务中的sql语句(只支持insert update delete)语句1;语句2;...步骤3：结束事务commit;提交事务rollback;回滚事务rollback to;回滚到指定的地方savepoint 节点名;设置保存点事务并发:    1.事务的并发是如何发生的        多个事务同时操作同一个数据库的相同数据时    2.并发问题有哪些？       脏读：读到了别的事务回滚前的脏数据(读的是未提交的)       不可重复读：当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改并提交的数据，导致两次读取到的数据不匹配(读的是已提交的)。        幻读：当前事务读第一次取到的数据比后来读取到数据条目少。        更新丢失:当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题，也就是最后的更新覆盖了由其他事务所做的更新事务的隔离级别：用来解决并发问题                     脏读     不可重复读      幻读read uncommitted：  有           有              有read committed：    无           有              有repeatable read：   无           无              有serializable         无       无           无               从上往下隔离级别依次递增，性能逐次降低mysql 中默认第三个隔离级别 repeatable readoracle中只支持第二个和第三个，默认第四个隔离级别 read committed查看隔离级别SELECT @@transaction_isolation;设置隔离级别set session|global transaction isolation level 隔离级别;</code></pre><h3 id="面试题-3"><a href="#面试题-3" class="headerlink" title="面试题"></a>面试题</h3><pre class=" language-mysql"><code class="language-mysql">事务的特性：ACID原子性(Atomicity)：一个事务不可再分割，要么都执行要么都不执行一致性(Consistency)：一个事务执行会使数据从一个一致状态切换到另外一个一致状态隔离性(Isolation)：一个事务的执行不受其他事务的干扰持久性(Durability)：一个事务一旦提交，则会永久的改变数据库的数据.</code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="视图的含义"><a href="#视图的含义" class="headerlink" title="视图的含义"></a>视图的含义</h3><p>含义：虚拟表，和普通表一样使用<br>mysql5.1版本出现的新特性，是通过表动态生成的数据</p><table><thead><tr><th></th><th>创建语法的关键字</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>create view</td><td>只是保存了sql逻辑</td><td>增删改查，只是一般不能增删改</td></tr><tr><td>表</td><td>create table</td><td>保存了数据</td><td>增删改查</td></tr></tbody></table><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><pre class=" language-mysql"><code class="language-mysql">语法：create view 视图名as查询语句;#1.查询姓名中包含a字符的员工名、部门名和工种信息#①创建CREATE VIEW myv1ASSELECT last_name,department_name,job_titleFROM employees eJOIN departments d ON e.department_id  = d.department_idJOIN jobs j ON j.job_id  = e.job_id;#②使用SELECT * FROM myv1 WHERE last_name LIKE '%a%';#2.查询各部门的平均工资级别#①创建视图查看每个部门的平均工资CREATE VIEW myv2ASSELECT AVG(salary) ag,department_idFROM employeesGROUP BY department_id;#②使用SELECT myv2.`ag`,g.grade_levelFROM myv2JOIN job_grades gON myv2.`ag` BETWEEN g.`lowest_sal` AND g.`highest_sal`;#3.查询平均工资最低的部门信息SELECT * FROM myv2 ORDER BY ag LIMIT 1;#4.查询平均工资最低的部门名和工资#①创建CREATE VIEW myv3ASSELECT * FROM myv2 ORDER BY ag LIMIT 1;#②使用SELECT d.*,m.agFROM myv3 mJOIN departments dON m.`department_id`=d.`department_id`;</code></pre><h3 id="视图的修改"><a href="#视图的修改" class="headerlink" title="视图的修改"></a>视图的修改</h3><pre class=" language-mysql"><code class="language-mysql">#方式一：create or replace view  视图名as查询语句;#方式二：语法：alter view 视图名as 查询语句;</code></pre><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><pre class=" language-mysql"><code class="language-mysql">前提是权限的够语法：drop view 视图名,视图名,...;</code></pre><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><pre class=" language-mysql"><code class="language-mysql">DESC myv3;</code></pre><h3 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h3><pre class=" language-mysql"><code class="language-mysql">CREATE OR REPLACE VIEW myv1ASSELECT last_name,emailFROM employees;SELECT * FROM myv1;SELECT * FROM employees;对视图的插入修改删除都会影响到原来的表，所以一般会给视图添加只读的权限#1.插入：INSERT INTO myv1 VALUES('张飞','zf@qq.com');#2.修改UPDATE myv1 SET last_name = '张无忌' WHERE last_name='张飞';#3.删除DELETE FROM myv1 WHERE last_name = '张无忌';#具备以下特点的视图不允许更新    ①包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all    ②常量视图    ③视图中包含Select中包含子查询    ④视图中包含join    ⑤视图中的from包含一个不能更新的视图    ⑥视图中的where子句的子查询引用了from子句中的表</code></pre><h3 id="视图的好处"><a href="#视图的好处" class="headerlink" title="视图的好处"></a>视图的好处</h3><ul><li>重用sql语句</li><li>简化复杂的sql操作，不必知道它的查询细节</li><li>保护数据，提高安全性</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class=" language-mysql"><code class="language-mysql">系统变量：    全局变量    会话变量自定义变量：    用户变量    局部变量</code></pre><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><pre class=" language-mysql"><code class="language-mysql">说明：变量由系统定义，不是用户定义，属于服务器层面使用步骤：1、查看所有系统变量show global|【session】variables;2、查看满足条件的部分系统变量show global|【session】 variables like '%char%';3、查看指定的系统变量的值select @@global|【session】.系统变量名; 4、为某个系统变量赋值方式一：set global|【session】系统变量名=值;方式二：set @@global|【session】系统变量名=值;注意：全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认会话级别</code></pre><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><pre class=" language-mysql"><code class="language-mysql">作用域：服务器每次启动将为所有的全局变量赋初始值，针对于所有会话（连接）有效，但不能跨重启#①查看所有全局变量SHOW GLOBAL VARIABLES;#②查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE '%char%';#③查看指定的系统变量的值SELECT @@global.autocommitSELECT @@transaction_isolation;#④为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;</code></pre><h4 id="会话变量"><a href="#会话变量" class="headerlink" title="会话变量"></a>会话变量</h4><pre class=" language-mysql"><code class="language-mysql">作用域：针对于当前会话（连接）有效#①查看所有会话变量SHOW SESSION VARIABLES;#②查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE '%char%';#③查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.transaction_isolation;#④为某个会话变量赋值SET @@session.transaction_isolation='read-uncommitted';SET SESSION transaction_isolation='read-committed';</code></pre><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><pre class=" language-mysql"><code class="language-mysql">说明：变量由用户自定义，而不是系统提供的使用步骤：1、声明2、赋值3、使用（查看、比较、运算等）</code></pre><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><pre class=" language-mysql"><code class="language-mysql">作用域：针对于当前会话（连接）有效,作用域同于会话变量应用在任何地方，也就是begin end里面或begin end外面#①声明并初始化     赋值操作符：=或:=SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;#②赋值（更新变量的值）#方式一：    SET @变量名=值;    SET @变量名:=值;    SELECT @变量名:=值;#方式二： 将字段的值 赋值给 此变量    SELECT 字段 INTO @变量名    FROM 表;    #③使用（查看变量的值）SELECT @变量名;#案例：声明两个变量，求和并打印SET @m=1;SET @n=1;SET @sum=@m+@n;SELECT @sum;</code></pre><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><pre class=" language-mysql"><code class="language-mysql">作用域：仅仅在定义它的begin end块中有效应用在 begin end中的第一句话#①声明DECLARE 变量名 类型;DECLARE 变量名 类型 【DEFAULT 值】;#②赋值（更新变量的值）#方式一：    SET 局部变量名=值;    SET 局部变量名:=值;    SELECT @局部变量名:=值;#方式二：    SELECT 字段 INTO 局部变量名    FROM 表;    #③使用（查看变量的值）SELECT 局部变量名;</code></pre><h4 id="用户和局部变量的对比"><a href="#用户和局部变量的对比" class="headerlink" title="用户和局部变量的对比"></a>用户和局部变量的对比</h4><pre class=" language-mysql"><code class="language-mysql">            作用域                               定义位置                                   语法用户变量    当前会话                        会话的任何地方                            加@符号，不用指定类型局部变量    定义它的BEGIN END中         BEGIN END的第一句话                    一般不用加@,需要指定类型</code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程和函数：类似于java中的方法<br>好处：</p><ul><li>提高代码的重用性</li><li>简化操作</li></ul><h3 id="存储过程概念"><a href="#存储过程概念" class="headerlink" title="存储过程概念"></a>存储过程概念</h3><pre class=" language-mysql"><code class="language-mysql">含义：一组预选编译好的SQL语句的集合，可理解为批处理语句好处：(简单、安全、性能高)      1.提高代码的重用性      2.简化操作      3.减少了编译次数并且减少了和数据库服务器连接次数，提高了效率</code></pre><h3 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h3><pre class=" language-mysql"><code class="language-mysql">CREATE PROCEDURE 存储过程名(参数列表)BEGIN    存储过程体（一组合法的sql语句）END注意：1、参数列表包含三部分    参数模式  参数名  参数类型        参数模式：        in：   该参数可以作为输入，也就是该参数需要调用方传入值        out：  该参数可以作为输出，也就是该参数可以作为返回值        inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值2、如果存储过程体仅仅只有一句话，begin end可以省略存储过程体中的每条sql语句的结尾要求必须加分号。存储过程的结尾可以使用 delimiter 重新设置语法：delimiter 结束标记案例：delimiter $</code></pre><h3 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h3><h4 id="1-空参列表"><a href="#1-空参列表" class="headerlink" title="1.空参列表"></a>1.空参列表</h4><pre class=" language-mysql"><code class="language-mysql">#案例：插入到admin表中五条记录SELECT * FROM admin;DELIMITER $CREATE PROCEDURE myp1()BEGIN    INSERT INTO admin(username,`password`)     VALUES('john1','0000'),('lily','0000'),('rose','0000'),('jack','0000'),('tom','0000');END $#调用CALL myp1()$</code></pre><h4 id="2-创建带in模式参数的存储过程"><a href="#2-创建带in模式参数的存储过程" class="headerlink" title="2.创建带in模式参数的存储过程"></a>2.创建带in模式参数的存储过程</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：创建存储过程实现 根据女神名，查询对应的男神信息CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))BEGIN    SELECT bo.*    FROM boys bo    RIGHT JOIN beauty b ON bo.id = b.boyfriend_id    WHERE b.name=beautyName;END $#调用CALL myp2('柳岩')$#案例2 ：创建存储过程实现，用户是否登录成功CREATE PROCEDURE myp4(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))BEGIN    DECLARE result INT DEFAULT 0;#声明并初始化        SELECT COUNT(*) INTO result#赋值    FROM admin    WHERE admin.username = username    AND admin.password = PASSWORD;        SELECT IF(result>0,'成功','失败');#使用END $#调用CALL myp3('张飞','8888')$</code></pre><h4 id="3-创建out-模式参数的存储过程"><a href="#3-创建out-模式参数的存储过程" class="headerlink" title="3.创建out 模式参数的存储过程"></a>3.创建out 模式参数的存储过程</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：根据输入的女神名，返回对应的男神名 CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))BEGIN    SELECT bo.boyname INTO boyname    FROM boys bo    RIGHT JOIN    beauty b ON b.boyfriend_id = bo.id    WHERE b.name=beautyName ;    END $#案例2：根据输入的女神名，返回对应的男神名和魅力值CREATE PROCEDURE myp7(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT usercp INT) BEGIN    SELECT boys.boyname ,boys.usercp INTO boyname,usercp    FROM boys     RIGHT JOIN    beauty b ON b.boyfriend_id = boys.id    WHERE b.name=beautyName ;    END $</code></pre><h4 id="4-创建带inout模式参数的存储过程"><a href="#4-创建带inout模式参数的存储过程" class="headerlink" title="4.创建带inout模式参数的存储过程"></a>4.创建带inout模式参数的存储过程</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：传入a和b两个值，最终a和b都翻倍并返回CREATE PROCEDURE myp8(INOUT a INT ,INOUT b INT)BEGIN    SET a=a*2;    SET b=b*2;END $#调用SET @m=10$SET @n=20$CALL myp8(@m,@n)$SELECT @m,@n$</code></pre><h3 id="删除语法"><a href="#删除语法" class="headerlink" title="删除语法"></a>删除语法</h3><pre class=" language-mysql"><code class="language-mysql">#语法：drop procedure 存储过程名DROP PROCEDURE p1;</code></pre><h3 id="查看存储过程的信息"><a href="#查看存储过程的信息" class="headerlink" title="查看存储过程的信息"></a>查看存储过程的信息</h3><pre class=" language-mysql"><code class="language-mysql">SHOW CREATE PROCEDURE  myp2;</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><pre class=" language-mysql"><code class="language-mysql">含义：一组预先编译好的SQL语句的集合，理解成批处理语句1、提高代码的重用性2、简化操作3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</code></pre><h3 id="创建语法-1"><a href="#创建语法-1" class="headerlink" title="创建语法"></a>创建语法</h3><pre class=" language-mysql"><code class="language-mysql">CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型BEGIN    函数体END注意：1.参数列表 包含两部分：参数名 参数类型2.函数体：肯定会有return语句，如果没有会报错如果return语句没有放在函数体的最后也不报错，但不建议return 值;3.函数体中仅有一句话，则可以省略begin end4.使用 delimiter语句设置结束标记</code></pre><h3 id="调用语法-1"><a href="#调用语法-1" class="headerlink" title="调用语法"></a>调用语法</h3><pre class=" language-mysql"><code class="language-mysql">SELECT 函数名(参数列表)#案例演示#1.无参有返回#案例1：返回公司的员工个数CREATE FUNCTION myf1() RETURNS INTBEGIN    DECLARE c INT DEFAULT 0;#定义局部变量    SELECT COUNT(*) INTO c#赋值    FROM employees;    RETURN c;    END $SELECT myf1()$#2.有参有返回#案例1：根据员工名，返回它的工资CREATE FUNCTION myf2(empName VARCHAR(20)) RETURNS DOUBLEBEGIN    SET @sal=0;#定义用户变量     SELECT salary INTO @sal   #赋值    FROM employees    WHERE last_name = empName;        RETURN @sal;END $SELECT myf2('k_ing') $#案例2：根据部门名，返回该部门的平均工资CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLEBEGIN    DECLARE sal DOUBLE ;    SELECT AVG(salary) INTO sal    FROM employees e    JOIN departments d ON e.department_id = d.department_id    WHERE d.department_name=deptName;    RETURN sal;END $SELECT myf3('IT')$</code></pre><h3 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h3><pre class=" language-mysql"><code class="language-mysql">SHOW CREATE FUNCTION myf3;</code></pre><h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><pre class=" language-mysql"><code class="language-mysql">DROP FUNCTION myf3;#案例#一、创建函数，实现传入两个float，返回二者之和CREATE FUNCTION test_fun1(num1 FLOAT,num2 FLOAT) RETURNS FLOATBEGIN    DECLARE SUM FLOAT DEFAULT 0;    SET SUM=num1+num2;    RETURN SUM;END $SELECT test_fun1(1,2)$</code></pre><h3 id="存储过程和函数的区别"><a href="#存储过程和函数的区别" class="headerlink" title="存储过程和函数的区别"></a>存储过程和函数的区别</h3><pre class=" language-mysql"><code class="language-mysql">区别：存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新函数：有且仅有1个返回，适合做处理数据后返回一个结果</code></pre><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>程序从上到下一次执行</p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>程序从两条或多条路径中选择一条去执行</p><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><pre class=" language-mysql"><code class="language-mysql">功能：实现简单的双分支语法：    if(表达式1，表达式2，表达式3)执行顺序：如果表达式1成立，则IF函数返回值为表达式2，否则返回表达式3的值应用：任何地方</code></pre><h4 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h4><pre class=" language-mysql"><code class="language-mysql">语法：情况1：类似于switch,一般用于等值判断case 变量或表达式when 值1 then 语句1;when 值2 then 语句2;...else 语句n;end case;情况2：类似于IF语句，一般用于实现区间判断case when 条件1 then 语句1;when 条件2 then 语句2;...else 语句n;end 特点： 1. 可以作为表达式，嵌套在其他语句中使用，应用在任何地方    可以作为独立的语句去使用，只能放在BEGIN END中 2. 如果WHEN中的值满足或条件成俐，则执行对应的THEN后面的语句，并且结束CASE    如果都不满足，则执行ELSE中的语句或值 3.ELSE可以省略，如果ELSE省略了，并且所有WHEN条件都不满足，则返回NULL  #案例1：创建函数，实现传入成绩，如果成绩>90,返回A，如果成绩>80,返回B，如果成绩>60,返回C，否则返回DCREATE FUNCTION test_case(score FLOAT) RETURNS CHARBEGIN     DECLARE ch CHAR DEFAULT 'A';        CASE     WHEN score>90 THEN SET ch='A';    WHEN score>80 THEN SET ch='B';    WHEN score>60 THEN SET ch='C';    ELSE SET ch='D';    END CASE;        RETURN ch;END $SELECT test_case(56)$</code></pre><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><pre class=" language-mysql"><code class="language-mysql">功能：类似于多重if语法：if 条件1 then 语句1;elseif 条件2 then 语句2;....else 语句n;end if;注意 elseif之间没有空格只能应用在begin end 中#案例1：创建函数，实现传入成绩，如果成绩>90,返回A，如果成绩>80,返回B，如果成绩>60,返回C，否则返回DCREATE FUNCTION test_if(score FLOAT) RETURNS CHARBEGIN    DECLARE ch CHAR DEFAULT 'A';    IF score>90 THEN SET ch='A';    ELSEIF score>80 THEN SET ch='B';    ELSEIF score>60 THEN SET ch='C';    ELSE SET ch='D';    END IF;    RETURN ch;    END $SELECT test_if(87)$#案例2：创建存储过程，如果工资<2000,则删除，如果5000>工资>2000,则涨工资1000，否则涨工资500CREATE PROCEDURE test_if_pro(IN sal DOUBLE)BEGIN    IF sal<2000 THEN DELETE FROM employees WHERE employees.salary=sal;    ELSEIF sal>=2000 AND sal<5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;    ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;    END IF;END $CALL test_if_pro(2100)$</code></pre><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>程序在满足一定条件的基础上，重复执行一段代码</p><pre class=" language-mysql"><code class="language-mysql">分类：while、loop、repeat循环控制：iterate类似于 continue，继续，结束本次循环，继续下一次leave 类似于  break，跳出，结束当前所在的循环</code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre class=" language-mysql"><code class="language-mysql">语法：【标签:】while 循环条件 do    循环体;end while【 标签】;</code></pre><h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><pre class=" language-mysql"><code class="language-mysql">语法：【标签:】loop    循环体;end loop 【标签】;可以用来模拟简单的死循环</code></pre><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><pre class=" language-mysql"><code class="language-mysql">语法：【标签：】repeat    循环体;until 结束循环的条件end repeat 【标签】;</code></pre><pre class=" language-mysql"><code class="language-mysql">#案例：批量插入，根据次数插入到admin表中多条记录CREATE PROCEDURE pro_while(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 1;    WHILE i<=insertCount DO        INSERT INTO admin(username,`password`) VALUES(CONCAT('Rose',i),'666');        SET i=i+1;    END WHILE;END $CALL pro_while1(100)$#2.添加leave语句#案例：批量插入，根据次数插入到admin表中多条记录，如果次数>20则停止TRUNCATE TABLE admin$DROP PROCEDURE test_while1$CREATE PROCEDURE test_while1(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 1;    a:WHILE i<=insertCount DO        INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua',i),'0000');        IF i>=20 THEN LEAVE a;        END IF;        SET i=i+1;    END WHILE a;END $CALL test_while1(100)$#案例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次TRUNCATE TABLE admin$DROP PROCEDURE test_while1$CREATE PROCEDURE test_while1(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 0;    a:WHILE i<=insertCount DO        SET i=i+1;        IF MOD(i,2)!=0 THEN ITERATE a;        END IF;        INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua',i),'0000');        END WHILE a;END $CALL test_while1(100)$</code></pre><h4 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h4><pre class=" language-mysql"><code class="language-mysql">/*一、已知表stringcontent其中字段：id 自增长content varchar(20)向该表插入指定个数的，随机的字符串*/DROP TABLE IF EXISTS stringcontent;CREATE TABLE stringcontent(    id INT PRIMARY KEY AUTO_INCREMENT,    content VARCHAR(20)    );DELIMITER $CREATE PROCEDURE test_randstr_insert(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 1;    DECLARE str VARCHAR(26) DEFAULT 'abcdefghijklmnopqrstuvwxyz';    DECLARE startIndex INT;#代表初始索引    DECLARE len INT;#代表截取的字符长度    WHILE i<=insertcount DO        SET startIndex=FLOOR(RAND()*26+1);#代表初始索引，随机范围1-26        SET len=FLOOR(RAND()*(20-startIndex+1)+1);#代表截取长度，随机范围1-（20-startIndex+1）        INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));        SET i=i+1;    END WHILE;END $CALL test_randstr_insert(10)$</code></pre>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="2021/07/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>2021/07/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><p>1&gt; 阅读完每一章时，一定要在理解基础上记忆一些关键东西。最佳的效果就是你可以不看书也做到一点也不错地默写出相关算法</p><p>2&gt; 阅读完每一章，一定要适当练习，在阅读中的人们只是自我感觉可以理解，而并非真正的明白</p><p>3&gt;  学习不可能一蹴而就，数构和算法如果通过一本书可以掌握，本身就是笑话</p><p>4&gt; 在之后的编程学习和工作中，尽量把学到的数构和算法知识运用到实际开发中。</p><h1 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h1><p>   <strong>程序设计 = 数据结构 +  算法</strong></p><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>​    是描述客观事物的<strong>符号</strong>，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号的集合。</p><p>​    <strong>包括</strong>：整型，实型等数值型类型</p><p>​                字符，声音，图像，视频等非数值类型</p><p>​    <strong>符号具备的前提</strong>：可以输入到计算机中</p><p>​                                   能被计算机程序处理</p><h3 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h3><p>​     是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为<strong>记录</strong></p><p>​     比如在人类中，什么是数据元素?    答案：  人    </p><p>​     在动物中，牛马羊等就是数据元素</p><h3 id="数据项："><a href="#数据项：" class="headerlink" title="数据项："></a>数据项：</h3><p>​    一个数据元素可以由若干个数据项组成</p><p>比如人这样的数据元素：可以有眼、口、鼻、耳这些数据型，还有性别，年龄、姓名、联系电话等数据项</p><p>   <strong>数据项是不可分割的最小单位</strong></p><p>虽然数据项是最小单位，但在讨论问题时，数据元素才是数据结构中建立数据模型的着眼点。</p><h3 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h3><p>​    是<strong>性质相同</strong>的数据元素的集合，是数据的子集</p><p>​         性质相同是指数据元素具有相同数量和类型的数据项。</p><p>​    实际应用中，处理的数据元素通常具有相同性质，在不产生混淆的情况下，<strong>都将数据对象简称为数据</strong></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>​       是相互之间存在一种或多种特定关系的数据元素的<strong>集合</strong></p><p>​       是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科</p><h2 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p> 逻辑结构：是指数据对象中数据元素之间的相互关系</p><h4 id="集合结构"><a href="#集合结构" class="headerlink" title="集合结构"></a>集合结构</h4><p>​      集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系</p><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><p>​     线性结构中的数据元素之间是一对一的关系</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p>​     树形结构中的数据元素之间存在一种一对多的层次关系</p><h4 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h4><p>​     图形结构的数据元素是多对多的关系</p><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>​    是指数据的逻辑结构在计算机中的存储形式。</p><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h4><p>   是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理结构是一致的<br> 链式存储结构<br>   是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以<br>是不连续的<br>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</p><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>数据类型 是指一组性质相同的值的集合及定义在此集合上的一组操作的总称</p><p>抽象是指抽取出事物具有普遍性质的本质</p><p>抽象数据类型，是指一个数学模型及定义在该模型上的一组操作，抽象数据类型的定义仅仅取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关</p><p>抽象的意义在于数据类型的数学抽象特性<br>抽象数据类型体现了程序设计中问题分解，抽象和信息隐藏的特性</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法的定义"><a href="#算法的定义" class="headerlink" title="算法的定义"></a>算法的定义</h2><p>什么是算法？算法是描述解决问题的方法。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​    算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>​    算法可以有零个或者多个输入；至少有一个或多个输出，算法是一定要输出的。</p><h3 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h3><p>​    指算法在执行有限的步骤后，自动结束而不会出现无限循环，并且每一个步骤在可接收的时间内完成。</p><p>​    这里又穷的概念不是纯数学意义上的，而是在实际应用中是合理的、可以接收的有界。</p><h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h3><p>​    算法的每一个步骤都具有确定的含义，不会出现二义性。</p><h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><p>​    算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。</p><p>​    其意味着算法可以转换为程序上机运行，并得到正确的结果</p><h2 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>​    算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p><h4 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h4><blockquote><p>算法程序没有语法错误</p></blockquote><blockquote><p>算法程序对于合法的输入数据能够产生满足要求的输出结果</p></blockquote><blockquote><p>算法程序对于非法的输入数据能够得出满足规格说明的结果</p></blockquote><blockquote><p>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果</p></blockquote><p>一般情况下，把层次三作为一个算法是否正确的标准</p><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>​    为了便于阅读、理解和交流</p><p>写代码的目的，一方面是为了让计算机执行，但还有一个重要的方面目的为了便于他人和自己阅读。</p><p><strong>可读性是算法好坏很重要的标志！</strong></p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>​        当输入数据不合法时，算法也能做出相关处理。而不是产生异常或者莫名奇妙的结果。</p><p>​        一个好的算法还应该能对输入数据不合法的情况做合适的处理。比如输入的时间或者距离不应该是负数等。</p><p><strong>健壮性又称为鲁棒性。</strong><br>    1&gt;鲁棒性就是系统的健壮性.比如说,计算机软件在输入错误、磁盘故障、网络过载或有意攻击情况下,能否不死机、不崩溃,就是该软件的鲁棒性.对于控制系统而言,是指系统在一定（结构,大小）的参数摄动下,维持某些性能的特性.根据对性能的不同定义,可分为稳定鲁棒性和性能鲁棒性.以闭环系统的鲁棒性作为目标设计得到的固定控制器称为鲁棒控制器.</p><p>​    2&gt;对于实际工程系统,人们最关心的问题是一个控制系统当其模型参数发生大幅度变化或其结构发生变化时能否仍保持渐近稳定,这叫稳定鲁棒性.进而还要求在模型扰动下系统的品质指标仍然保持在某个许可范围内,这称为品质鲁棒性.鲁棒性理论目前正致力于研究多变量系统具有稳定鲁棒性和品质鲁棒性的各种条件.它的进一步发展和应用,将是控制系统最终能否成功应用于实践的关键.</p><h3 id="时间效率高"><a href="#时间效率高" class="headerlink" title="时间效率高"></a>时间效率高</h3><h3 id="存储量低"><a href="#存储量低" class="headerlink" title="存储量低"></a>存储量低</h3><p>​    设计算法应该尽量满足时间效率高和存储量低的特点。</p><p>​        时间效率是指算法的执行时间</p><p>​       存储量需求是指算法在执行过程中需要的最大存储空间</p><h2 id="效率的度量方法"><a href="#效率的度量方法" class="headerlink" title="效率的度量方法"></a>效率的度量方法</h2><h3 id="事后统计法"><a href="#事后统计法" class="headerlink" title="事后统计法"></a>事后统计法</h3><p>​        这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p><h3 id="事前分析估算法"><a href="#事前分析估算法" class="headerlink" title="事前分析估算法"></a>事前分析估算法</h3><p>​        在计算机程序编制前，依据统计方法对算法进行估算。</p><p>编写程序在计算机上运行所消耗的时间取决于：</p><p>​    1.算法采用的策略、方法。 是算法好坏的根本。</p><p>​    2.编译产生的代码质量。由软件来支持</p><p>​    3.问题的输入规模。</p><p>​    4.机器执行指令的速度。看硬件性能。</p><p> 一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="2021/06/22/%E9%94%81/"/>
      <url>2021/06/22/%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p><strong>悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量/重量级锁、读写锁、各种锁及其Java实现！</strong></p><p>网上关于Java中锁的话题可以说资料相当丰富，但相关内容总感觉是一大串术语的罗列，让人云里雾里，读完就忘。本文希望能为Java新人做一篇通俗易懂的整合，旨在消除对各种各样锁的术语的恐惧感，对每种锁的底层实现浅尝辄止，但是在需要时能够知道去查什么。</p><p>首先要打消一种想法，就是一个锁只能属于一种分类。其实并不是这样，比如一个锁可以同时是悲观锁、可重入锁、公平锁、可中断锁等等，就像一 个人可以是男人、医生、健身爱好者、游戏玩家，这并不矛盾。OK，国际惯例，上干货。</p><h2 id="〇、synchronized与Lock"><a href="#〇、synchronized与Lock" class="headerlink" title="〇、synchronized与Lock"></a>〇、synchronized与Lock</h2><p>Java中有两种加锁的方式：一种是用<strong>synchronized关键字</strong>，另一种是用<strong>Lock接口</strong>的实现类。</p><p>形象地说，synchronized关键字是<strong>自动档</strong>，可以满足一切日常驾驶需求。但是如果你想要玩漂移或者各种骚操作，就需要<strong>手动档</strong>了——各种Lock的实现类。</p><p>所以如果你只是想要简单的加个锁，对性能也没什么特别的要求，用synchronized关键字就足够了。自Java 5之后，才在java.util.concurrent.locks包下有了另外一种方式来实现锁，那就是Lock。也就是说，<strong>synchronized是Java语言内置的关键字，而Lock是一个接口</strong>，这个接口的实现类在代码层面实现了锁的功能，具体细节不在本文展开，有兴趣可以研究下AbstractQueuedSynchronizer类，写得可以说是牛逼爆了。</p><p><img src="https://pic1.zhimg.com/80/v2-ddb71ab0b68d65ae70244bfdeb0d6704_720w.jpg" alt="img">其实只需要关注三个类就可以了：ReentrantLock类、ReadLock类、WriteLock类。</p><p><strong>ReentrantLock、ReadLock、WriteLock</strong> 是Lock接口最重要的三个实现类。对应了“可重入锁”、“读锁”和“写锁”，后面会讲它们的用途。</p><p>ReadWriteLock其实是一个工厂接口，而ReentrantReadWriteLock是ReadWriteLock的实现类，它包含两个静态内部类ReadLock和WriteLock。这两个静态内部类又分别实现了Lock接口。</p><p>我们停止深究源码，仅从使用的角度看，Lock与synchronized的区别是什么？在接下来的几个小节中，我将梳理各种锁分类的概念，以及synchronized关键字、各种Lock实现类之间的区别与联系。</p><h2 id="一、悲观锁与乐观锁"><a href="#一、悲观锁与乐观锁" class="headerlink" title="一、悲观锁与乐观锁"></a>一、悲观锁与乐观锁</h2><p>锁的一种宏观分类方式是<strong>悲观锁</strong>和<strong>乐观锁</strong>。悲观锁与乐观锁<strong>并不是特指某个锁</strong>（Java中没有哪个Lock实现类就叫PessimisticLock或OptimisticLock），而是在并发情况下的两种不同策略。</p><p>悲观锁（Pessimistic Lock）, 就是很悲观，每次去拿数据的时候都认为别人会修改。所以每次在拿数据的时候都会上锁。这样别人想拿数据就被挡住，直到悲观锁被释放。</p><p>乐观锁（Optimistic Lock）, 就是很乐观，每次去拿数据的时候都认为别人不会修改。所以<strong>不会上锁，不会上锁！</strong>但是如果想要更新数据，则会在<strong>更新前检查在读取至更新这段时间别人有没有修改过这个数据</strong>。如果修改过，则重新读取，再次尝试更新，循环上述步骤直到更新成功（当然也允许更新失败的线程放弃操作）。</p><p><strong>悲观锁阻塞事务，乐观锁回滚重试</strong>，它们各有优缺点，不要认为一种一定好于另一种。像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行重试，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p><h2 id="二、乐观锁的基础——CAS"><a href="#二、乐观锁的基础——CAS" class="headerlink" title="二、乐观锁的基础——CAS"></a>二、乐观锁的基础——CAS</h2><p>说到乐观锁，就必须提到一个概念：<strong>CAS</strong></p><p>什么是CAS呢？Compare-and-Swap，即<strong>比较并替换，</strong>也有叫做Compare-and-Set的，<strong>比较并设置</strong>。</p><p>1、比较：读取到了一个值A，在将其更新为B之前，检查原值是否仍为A（未被其他线程改动）。</p><p>2、设置：如果是，将A更新为B，结束。[<a href="https://zhuanlan.zhihu.com/p/71156910#ref_1">1]</a>如果不是，则什么都不做。</p><p>上面的两步操作是原子性的，可以简单地理解为瞬间完成，在CPU看来就是一步操作。</p><p>有了CAS，就可以实现一个<strong>乐观锁</strong>：</p><pre class=" language-c"><code class="language-c">data <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 共享数据</span><span class="token comment" spellcheck="true">/* 更新数据的线程会进行如下操作 */</span>flag <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    oldValue <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存原始数据</span>    newValue <span class="token operator">=</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 下面的部分为CAS操作，尝试更新data的值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 比较</span>        data <span class="token operator">=</span> newValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置</span>        flag <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结束</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 啥也不干，循环重试</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    很明显，这样的代码根本不是原子性的，   因为真正的CAS利用了CPU指令，   这里只是为了展示执行流程，本意是一样的。*/</span></code></pre><p>这是一个简单直观的乐观锁实现，它允许多个线程同时读取（因为根本没有加锁操作），但是只有一个线程可以成功更新数据，并导致其他要更新数据的线程回滚重试。 CAS利用CPU指令，从硬件层面保证了操作的原子性，以达到类似于锁的效果。</p><p><img src="https://pic3.zhimg.com/80/v2-3c683e1f88faa31152fc35d14b8fb8de_720w.jpg" alt="img">Java中真正的CAS操作调用的native方法</p><p>因为整个过程中并没有“加锁”和“解锁”操作，因此乐观锁策略也被称为<strong>无锁编程</strong>。换句话说，乐观锁其实不是“锁”，它仅仅是一个循环重试CAS的算法而已！</p><h2 id="三、自旋锁"><a href="#三、自旋锁" class="headerlink" title="三、自旋锁"></a>三、自旋锁</h2><p>有一种锁叫<strong>自旋锁</strong>。所谓自旋，说白了就是一个 while(true) 无限循环。</p><p>刚刚的乐观锁就有类似的无限循环操作，那么它是自旋锁吗？</p><blockquote><p>感谢评论区<a href="https://www.zhihu.com/people/zhao-chen-77-90">养猫的虾</a>的指正。</p></blockquote><p>不是。尽管自旋与 while(true) 的操作是一样的，但还是应该将这两个术语分开。“自旋”这两个字，特指自旋锁的自旋。</p><p>然而在JDK中并没有自旋锁（SpinLock）这个类，那什么才是自旋锁呢？读完下个小节就知道了。</p><h2 id="四、synchronized锁升级：偏向锁-→-轻量级锁-→-重量级锁"><a href="#四、synchronized锁升级：偏向锁-→-轻量级锁-→-重量级锁" class="headerlink" title="四、synchronized锁升级：偏向锁 → 轻量级锁 → 重量级锁"></a>四、synchronized锁升级：偏向锁 → 轻量级锁 → 重量级锁</h2><p>前面提到，synchronized关键字就像是汽车的<strong>自动档，</strong>现在详细讲这个过程。一脚油门踩下去，synchronized会从<strong>无锁</strong>升级为<strong>偏向锁</strong>，再升级为<strong>轻量级锁</strong>，最后升级为<strong>重量级锁</strong>，就像自动换挡一样。那么自旋锁在哪里呢？这里的轻量级锁就是一种<strong>自旋锁</strong>。</p><p>初次执行到synchronized代码块的时候，锁对象变成<strong>偏向锁</strong>（通过CAS修改对象头里的锁标志位），字面意思是“偏向于第一个获得它的线程”的锁。执行完同步代码块后，线程并<strong>不会主动释放偏向锁</strong>。当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。<strong>由于之前没有释放锁，这里也就不需要重新加锁。</strong>如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</p><p>一旦有第二个线程加入<strong>锁竞争</strong>，偏向锁就升级为<strong>轻量级锁（自旋锁）</strong>。这里要明确一下什么是锁竞争：如果多个线程轮流获取一个锁，但是每次获取锁的时候都很顺利，没有发生阻塞，那么就不存在锁竞争。只有当某线程尝试获取锁的时候，发现该锁已经被占用，只能等待其释放，这才发生了锁竞争。</p><p>在轻量级锁状态下继续锁竞争，没有抢到锁的线程将<strong>自旋</strong>，即不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先<strong>比较</strong>当前锁标志位是否为“释放”，如果是则将其<strong>设置</strong>为“锁定”，比较并设置是<strong>原子性</strong>发生的。这就算抢到锁了，然后线程将当前锁的持有者信息修改为自己。</p><p>长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不了任何有效的任务，这种现象叫做<strong>忙等（busy-waiting）</strong>。如果多个线程用一个锁，但是没有发生锁竞争，或者发生了很轻微的锁竞争，那么synchronized就用轻量级锁，允许短时间的忙等现象。这是一种折衷的想法，<strong>短时间的忙等，换取线程在用户态和内核态之间切换的开销。</strong></p><p>显然，此忙等是有限度的（有个计数器记录自旋次数，默认允许循环10次，可以通过虚拟机参数更改）。如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为<strong>重量级锁</strong>（依然是CAS修改锁标志位，但不修改持有锁的线程ID）。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。在JDK1.6之前，synchronized直接加重量级锁，很明显现在得到了很好的优化。</p><p>一个锁只能按照 偏向锁、轻量级锁、重量级锁的顺序逐渐升级（也有叫<strong>锁膨胀</strong>的），不允许降级。</p><blockquote><p>感谢评论区<a href="https://www.zhihu.com/people/ding-yi-51-99">酷帅俊靓美</a>的问题：<br>偏向锁的一个特性是，持有锁的线程在执行完同步代码块时不会释放锁。那么当第二个线程执行到这个synchronized代码块时是否一定会发生锁竞争然后升级为轻量级锁呢？<br>线程A第一次执行完同步代码块后，当线程B尝试获取锁的时候，发现是偏向锁，会判断线程A是否仍然存活。<strong>如果线程A仍然存活，</strong>将线程A暂停，此时偏向锁升级为轻量级锁，之后线程A继续执行，线程B自旋。但是<strong>如果判断结果是线程A不存在了</strong>，则线程B持有此偏向锁，锁不升级。<br>还有人对此有疑惑，我之前确实没有描述清楚，但如果要展开讲，涉及到太多新概念，可以新开一篇了。更何况有些太底层的东西，我没读过源码，没有自信说自己一定是对的。其实在升级为轻量级锁之前，虚拟机会让线程A尽快在安全点挂起，然后在它的栈中“伪造”一些信息，让线程A在被唤醒之后，认为自己一直持有的是轻量级锁。如果线程A之前正在同步代码块中，那么线程B自旋等待即可。如果线程A之前不在同步代码块中，它会在被唤醒后检查到这一情况并立即释放锁，让线程B可以拿到。这部分内容我之前也没有深入研究过，如果有说的不对的，请多多指教啊！</p></blockquote><h2 id="五、可重入锁（递归锁）"><a href="#五、可重入锁（递归锁）" class="headerlink" title="五、可重入锁（递归锁）"></a>五、可重入锁（递归锁）</h2><p>可重入锁的字面意思是“可以重新进入的锁”，即<strong>允许同一个线程多次获取同一把锁</strong>。比如一个递归函数里有加锁操作，递归过程中这个锁会阻塞自己吗？如果不会，那么这个锁就是<strong>可重入锁</strong>（因为这个原因可重入锁也叫做<strong>递归锁</strong>）<strong>。</strong></p><p>Java里只要以Reentrant开头命名的锁都是可重入锁，而且<strong>JDK提供的所有现成的Lock实现类，包括synchronized关键字锁都是可重入的。</strong>如果你需要不可重入锁，只能自己去实现了。网上不可重入锁的实现真的很多，就不在这里贴代码了。99%的业务场景用可重入锁就可以了，剩下的1%是什么呢？我也不知道，谁可以在评论里告诉我？</p><p><img src="https://pic2.zhimg.com/80/v2-ffbe0e21512c64a1b444cf55d4b3bf61_720w.jpg" alt="img">JDK提供的Lock的实现类都是可重入的</p><h2 id="六、公平锁、非公平锁"><a href="#六、公平锁、非公平锁" class="headerlink" title="六、公平锁、非公平锁"></a>六、公平锁、非公平锁</h2><p>如果多个线程申请一把<strong>公平锁</strong>，那么当锁释放的时候，先申请的先得到，非常公平。显然如果是<strong>非公平锁</strong>，后申请的线程可能先获取到锁，是随机或者按照其他优先级排序的。</p><p>对ReentrantLock类而言，通过构造函数传参<strong>可以指定该锁是否是公平锁，默认是非公平锁</strong>。一般情况下，非公平锁的吞吐量比公平锁大，如果没有特殊要求，优先使用非公平锁。</p><p><img src="https://pic2.zhimg.com/80/v2-7a4a72fe7ace46095cd3ca2e6c5212d9_720w.jpg" alt="img">ReentrantLock构造器可以指定为公平或非公平</p><p>对于synchronized而言，它也是一种<strong>非公平锁</strong>，但是并没有任何办法使其变成公平锁。</p><h2 id="七、可中断锁"><a href="#七、可中断锁" class="headerlink" title="七、可中断锁"></a>七、可中断锁</h2><p>可中断锁，字面意思是“可以<strong>响应中断</strong>的锁”。</p><p>这里的关键是理解什么是<strong>中断</strong>。Java并没有提供任何直接中断某线程的方法，只提供了<strong>中断机制</strong>。何谓“中断机制”？线程A向线程B发出“请你停止运行”的请求（线程B也可以自己给自己发送此请求），但线程B并不会立刻停止运行，而是自行选择合适的时机以自己的方式响应中断，也可以直接忽略此中断。也就是说，Java的<strong>中断不能直接终止线程</strong>，而是需要被中断的线程自己决定怎么处理。这好比是父母叮嘱在外的子女要注意身体，但子女是否注意身体，怎么注意身体则完全取决于自己。[<a href="https://zhuanlan.zhihu.com/p/71156910#ref_2">2]</a></p><p>回到锁的话题上来，如果线程A持有锁，线程B等待获取该锁。由于线程A持有锁的时间过长，线程B不想继续等待了，我们可以让线程B中断自己或者在别的线程里中断它，这种就是<strong>可中断锁</strong>。</p><p>在Java中，synchronized就是<strong>不可中断锁</strong>，而Lock的实现类都是<strong>可中断锁，</strong>可以简单看下Lock接口。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* Lock接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿不到锁就一直等，拿到马上返回。</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿不到锁就一直等，如果等待时收到中断请求，则需要处理InterruptedException。</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 无论拿不拿得到锁，都马上返回。拿到返回true，拿不到返回false。</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同上，可以自定义等待的时间。</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="八、读写锁、共享锁、互斥锁"><a href="#八、读写锁、共享锁、互斥锁" class="headerlink" title="八、读写锁、共享锁、互斥锁"></a>八、读写锁、共享锁、互斥锁</h2><p>读写锁其实是一对锁，一个读锁（共享锁）和一个写锁（互斥锁、排他锁）。</p><p>看下Java里的ReadWriteLock接口，它只规定了两个方法，一个返回读锁，一个返回写锁。</p><p><img src="https://pic1.zhimg.com/80/v2-5ec6ed066c75e59c4f3829ca51db8148_720w.jpg" alt="img"></p><p>记得之前的乐观锁策略吗？所有线程随时都可以读，仅在写之前判断值有没有被更改。</p><p>读写锁其实做的事情是一样的，但是策略稍有不同。很多情况下，线程知道自己读取数据后，是否是为了更新它。那么何不在加锁的时候直接明确这一点呢？如果我读取值是为了更新它（SQL的for update就是这个意思），那么加锁的时候就直接加<strong>写锁</strong>，我持有写锁的时候别的线程无论读还是写都需要等待；如果我读取数据仅为了前端展示，那么加锁时就明确地加一个<strong>读锁，</strong>其他线程如果也要加读锁，不需要等待，可以直接获取（读锁计数器+1）。</p><p>虽然读写锁感觉与乐观锁有点像，但是<strong>读写锁是悲观锁策略</strong>。因为读写锁并没有在<strong>更新前</strong>判断值有没有被修改过，而是在<strong>加锁前</strong>决定应该用读锁还是写锁。乐观锁特指无锁编程，如果仍有疑惑可以再回到第一、二小节，看一下什么是“乐观锁”。</p><p>JDK提供的唯一一个ReadWriteLock接口实现类是ReentrantReadWriteLock。看名字就知道，它不仅提供了读写锁，而是都是可重入锁。 除了两个接口方法以外，ReentrantReadWriteLock还提供了一些便于外界监控其内部工作状态的方法，这里就不一一展开。</p><h2 id="九、回到悲观锁和乐观锁"><a href="#九、回到悲观锁和乐观锁" class="headerlink" title="九、回到悲观锁和乐观锁"></a>九、回到悲观锁和乐观锁</h2><blockquote><p>这篇文章经历过一次修改，我之前认为偏向锁和轻量级锁是乐观锁，重量级锁和Lock实现类为悲观锁，网上很多资料对这些概念的表述也很模糊，各执一词。</p></blockquote><p>先抛出我的结论：</p><p>我们在Java里使用的各种锁，<strong>几乎全都是悲观锁</strong>。synchronized从偏向锁、轻量级锁到重量级锁，全是悲观锁。JDK提供的Lock实现类全是悲观锁。其实只要有“锁对象”出现，那么就一定是悲观锁。因为<strong>乐观锁不是锁，而是一个在循环里尝试CAS的算法。</strong></p><p>那JDK并发包里到底有没有乐观锁呢？</p><p>有。java.util.concurrent.atomic包里面的<strong>原子类</strong>都是利用乐观锁实现的。</p><p><img src="https://pic3.zhimg.com/80/v2-98cd919fe09521bac03aa66d6968aeb2_720w.jpg" alt="img">原子类AtomicInteger的自增方法为乐观锁策略</p><p>为什么网上有些资料认为偏向锁、轻量级锁是乐观锁？理由是它们底层用到了CAS？或者是把“乐观/悲观”与“轻量/重量”搞混了？其实，线程在抢占这些锁的时候，确实是循环+CAS的操作，感觉好像是乐观锁。但问题的关键是，我们说一个锁是悲观锁还是乐观锁，总是应该站在应用层，看它们是如何锁住应用数据的，而不是站在底层看抢占锁的过程。如果一个线程尝试获取锁时，发现已经被占用，它是否继续读取数据，等后续要更新时再决定要不要重试？对于偏向锁、轻量级锁来说，显然答案是否定的。无论是挂起还是忙等，对应用数据的读取操作都被“挡住”了。从这个角度看，它们确实是悲观锁。</p><p>退一步讲，也没有必要在这些术语上狠钻牛角尖，最重要的是理解它们的运行机制。想写得尽量简单一些，却发现洋洋洒洒近万字，只讲了个皮毛。深知自己水平有限，不敢保证完全正确，只能说路漫漫其修远兮，望指正。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="2021/06/14/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/06/14/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java面试题</title>
      <link href="2021/06/11/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2021/06/11/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>如果你参加过一些大厂面试，肯定会遇到一些这样的问题：</strong><br>1、看你项目都用的框架，熟悉Spring、mybatis等框架实现原理吗？<br>2、 看你上面有接触过消息中间件，负载均衡、RPC框架等技术吗，MySQL分库分表有做过吗？<br>3、 分布式架构设计，Redis分布式锁呢？<br>是不是看上去很难，是不是和自己准备的“题库”中的问题不一样？不知道从何处下手？如果你有这种感觉，那么说明你的技术还需要继续修炼。<br>面对如此多的技术面试，怎么样才能说自己的技术已经过关了呢？<br>只有问题没有参考答案，但是，请允许我说但是，对于下面这些问题，我这里还是有一份参考学习笔记文档和面经试题解析的在文末分享，需要各位小伙伴下来逐一学习！<br><strong>一、开场白</strong><br>自我介绍，项目经验（介绍下自己最满意的，有技术亮点的项目或平台，重点介绍下自己负责那部分的技术细节；这一块主要考察应聘者对自己做过的事情是否有清晰的描述，判断做的事情的复杂度）<br><strong>2、JVM</strong><br>垃圾回收算法有几种类型？ 他们对应的优缺点又是什么？<br>类的加载过程是什么？简单描述一下每个步骤<br>JVM 预定义的类加载器有哪几种？分别什么作用？<br>什么是双亲委派模式？有什么作用？<br>什么是内存溢出， 内存泄露？ 他们的区别是什么？<br>引起类加载操作的行为有哪些？<br>介绍一下 JVM 提供的常用工具<br>Full GC 、 Major GC 、Minor GC 之间区别？<br>什么时候触发 Full GC ？<br>…</p><p><strong>3、Java并发</strong><br>什么是可重入锁、乐观锁、悲观锁、公平锁、非公平锁、独占锁、共享锁？<br>讲讲ThreadLocal 的实现原理？<br>ThreadLocal 作为变量的线程隔离方式，其内部是如何做的？<br>说说InheritableThreadLocal 的实现原理？<br>并发包中锁的实现底层（对AQS的理解）？<br>讲讲独占锁 ReentrantLock 原理？<br><strong>4、Java集合</strong><br>HashSet 和 TreeSet 有什么区别？<br>HashSet 的底层实现是什么?<br>LinkedHashMap 的实现原理?<br>为什么集合类没有实现 Cloneable 和 Serializable 接口？<br>什么是迭代器 (Iterator)？<br>Iterator 和 ListIterator 的区别是什么？<br><strong>5、Spring全家桶</strong><br>Spring bean的生命周期能不能结合源码回答一下这个问题、或者结合一下bean的生命的意义来回答，就是Spring为什么需要找个生命周期<br>Spring容器当中包含了哪些常用组件（至少说5个），作用是什么，场景是什么；比如BeanDefinition；再比如BeanDefinitionMap<br>Spring自动注入的原理是什么？能不能从源码来说明一下这个问题；我们常常说的自动注入，到底怎么注入的？有什么坑？怎么让你一个属性不自动注入<br>Spring源码当中如何来搞定循环依赖的？Spring支持循环依赖？生命情况不支持？支持的原理是什么？能不能从源码来说明一下？<br>如何来二次扩展Spring，比如自定义一个实现自动注入的注解；不使用@Autowried，自己如何开发一个@XXX来完成自动注入？<br>mybatis源码当中利用了Spirng的那些扩展？mybatis扩展Spring之后有哪些问题是无法解决的？比如二级缓存怎么解决<br>eureka源码当中如何扩展的Spring？比如怎么动态插拔eureka的功能，利用了Spring的那个技术点，或者从源码说一下<br><strong>6、Redis</strong><br>Redis 持久化机制有哪些？ 区别是什么？优缺点是什么？<br>Redis支持的数据类型<br>为什么 Redis 需要把所有数据放到内存中？<br>Redis 是单线程的吗？<br>Redis 的缓存失效策略有哪几种？<br>什么是缓存命中率？提高缓存命中率的方法有哪些？<br>Redis全局命令及数据库管理<br>Redis设计订单应用场景<br>Redis缓存雪崩讲讲看？<br>什么是缓存穿透？<br>Redis重启时加载AOF与RDB的顺序<br><strong>7.中间件</strong><br>Dubbo完整的一次调用链路介绍；<br>Dubbo支持几种负载均衡策略？<br>Dubbo Provider服务提供者要控制执行并发请求上限，具体怎么做？<br>Dubbo启动的时候支持几种配置方式？<br>了解几种消息中间件产品？各产品的优缺点介绍；<br>消息中间件如何保证消息的一致性和如何进行消息的重试机制？<br>Spring Cloud熔断机制介绍；<br>Spring Cloud对比下Dubbo，什么场景下该使用Spring Cloud？<br><strong>8、分布式</strong><br>消息中间件如何解决消息丢失问题<br>Dubbo的服务请求失败怎么处理<br>重连机制会不会造成错误<br>对分布式事务的理解<br>如何实现负载均衡，有哪些算法可以实现？<br>Zookeeper的用途，选举的原理是什么？<br>数据的垂直拆分水平拆分。<br>zookeeper原理和适用场景<br>zookeeper watch机制<br>redis/zk节点宕机如何处理<br>分布式集群下如何做到唯一序列号<br>如何做一个分布式锁<br>用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗<br>MQ系统的数据如何保证不丢失<br>列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。<br><strong>9、数据库</strong><br>MySQL InnoDB存储的文件结构<br>索引树是如何维护的？<br>数据库自增主键可能的问题<br>MySQL的几种优化<br>mysql索引为什么使用B+树<br>数据库锁表的相关处理<br>索引失效场景<br>高并发下如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义<br>数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁<br><strong>最后</strong><br>其实一步一步走过来，不单单只靠面试之前刷题那么简单，更多的还是平时的积累。小编整理出一篇Java进阶架构师之路的核心知识，同时也是面试时面试官必问的知识点，篇章也是包括了很多知识点，其中包括了有基础知识、Java集合、JVM、多线程并发、spring原理、微服务、Netty 与RPC 、Kafka、日记、设计模式、Java算法、数据库、Zookeeper、分布式缓存、数据结构等等</p><h2 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h2><p>&gt;面向对象性：两个基本概念：类、对象；三大特性：封装、继承、多态</p><p>&gt;健壮性：吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</p><p>&gt;跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”</p><p>变量</p><p>Java 为什么出现4.0-3.6 = 0.40000001的情况</p><p>​    2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差，就像十进制无法精确表达1/3一样 二进制也无法精确表达1/10</p><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p><strong>GC是什么? 为什么要有GC</strong></p><p>​        答：GC是垃圾收集的意思（Garbage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法</p><p>​    垃圾回收机制回收任何对象之前，总会先调用它的finalize方法（如果覆盖该方法，让一个新的引用变量重新引用该对象，则会重新激活对象）。</p><p>​    永远不要主动调用某个对象的finalize方法，应该交给垃圾回收机制调用。</p><p><strong>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收</strong></p><p>​        对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用<strong>有向图</strong>的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是”可达的”，哪些对象是”不可达的”。</p><p>当GC确定一些对象为”不可达”时，GC就有责任回收这些内存空间。</p><p>可以。程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行，只是加快垃圾回收机制的运行。</p><p>​    可以将对象的引用变量设置为null，暗示垃圾回收机制可以回收该对象。</p><p><strong>char型变量中能不能存贮一个中文汉字?为什么？</strong></p><p>答：是能够定义成为一个中文的，因为java中以unicode编码，一个char占16个字节，</p><p>所以放一个中文是没问题的(汉字在Unicode中占两个字节)</p><h2 id="循环面试题"><a href="#循环面试题" class="headerlink" title="循环面试题"></a>循环面试题</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先赋值，把i原来的值重新赋值给i，不变，然后i自增，但是这个自增后的值没有在放</span><span class="token comment" spellcheck="true">//回变量i的位置</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自增第五次之后i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">比较 <span class="token operator">+</span>  与  <span class="token operator">+=</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> s1 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>有什么错<span class="token operator">?</span> <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> s1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>有什么错答：<span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> s1 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> （s1<span class="token operator">+</span><span class="token number">1</span>运算结果是<span class="token keyword">int</span>型，需要强制转换类型）<span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> s1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>（可以正确编译）</code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\tc="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3 9 8  a++是不会执行的</span>        <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">++</span>a<span class="token operator">:</span><span class="token operator">++</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\td="</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3 10 10</span>        <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">++</span><span class="token operator">:</span> b<span class="token operator">++</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\te="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//4 10 3</span>        <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">++</span>a<span class="token operator">:</span><span class="token operator">++</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\tf="</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//5 10 5</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\tc="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3 9 8  a++是不会执行的</span>        <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">++</span>a<span class="token operator">:</span><span class="token operator">++</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\td="</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3 10 10</span>        <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">++</span><span class="token operator">:</span> b<span class="token operator">++</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\te="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//4 10 3</span>        <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">++</span>a<span class="token operator">:</span><span class="token operator">++</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"\tf="</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//5 10 5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer:没有结果</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"年："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"月："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"日："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> days <span class="token operator">=</span> day<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   days <span class="token operator">+=</span> <span class="token number">29</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   days <span class="token operator">+=</span> <span class="token number">28</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                days <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span>                <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日是这一年的第"</span> <span class="token operator">+</span> days <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-2147483648</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需要修改代码，使得程序完成功能，但是只能“增加”或“修改”其中“一个”字符，</span><span class="token comment" spellcheck="true">//很明显，将i--改为i++，可以完成功能，但是需要修改“两个”字符，</span><span class="token comment" spellcheck="true">//所以并不是一个正确的答案</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i&lt;n修改为-i&lt;n</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-1000之间的完数有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    sum <span class="token operator">+=</span>j<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span>   <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>   <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span>     <span class="token operator">*</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 输出“-”</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 输出“* ”</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下半部分</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token operator">*</span><span class="token operator">*</span>      <span class="token operator">*</span><span class="token operator">*</span>        <span class="token operator">*</span>        <span class="token operator">*</span>        <span class="token operator">*</span><span class="token operator">*</span>      <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标识i是否被j除尽，一旦除尽，修改其值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历100000以内的自然数</span>            <span class="token comment" spellcheck="true">//优化二：对本身是质数的自然数是有效的。</span>            <span class="token comment" spellcheck="true">//for(int j = 2;j &lt; i;j++)&amp;#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j:被i去除</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//i被j除尽</span>                    isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优化一：只对本身非质数的自然数是有效的。</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//重置isFlag</span>            isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//求完数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> j<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完数的个数为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1.&gt;  数组有没有length()这个方法? String有没有length()这个方法</p><p>答：数组没有length()这个方法，<strong>只有length的属性</strong>。String有length()这个方法</p><p>2.&gt; Java中的任何数据类型都可以使用System.out.pritln方法显示</p><p>答：</p><p>​    对基本数据类型而言，输出的往往是变量的值；</p><p>​    对于像数组这一类复杂的数据类型，输出的是其堆空间中存储位置的hashCode值 </p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [0,1) [0,30) [1,31)</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下面哪个数组定义是错误的</span><span class="token comment" spellcheck="true">//并对错误的答案加上单行注释，写出错误的原因。</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错</span><span class="token keyword">float</span> f2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对的</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"true"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "true"这是String类型的，写成true即可</span><span class="token keyword">double</span> f4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对的，有自动类型提升</span><span class="token keyword">int</span> f5<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误</span><span class="token keyword">float</span> f6<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1.2F</span><span class="token punctuation">,</span><span class="token number">3.0</span><span class="token punctuation">,</span><span class="token number">5.4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，double不能自动转成float型</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//回形数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要显示的数据</span>        <span class="token keyword">int</span> maxX <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x轴的最大下标</span>        <span class="token keyword">int</span> maxY <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Y轴的最大下标</span>        <span class="token keyword">int</span> minX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x轴的最小下标</span>        <span class="token keyword">int</span> minY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Y轴的最小下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>minX <span class="token operator">&lt;=</span> maxX<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> minX<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> maxX<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>minY<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            minY<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> minY<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> maxY<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>maxX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            maxX<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> maxX<span class="token punctuation">;</span> x <span class="token operator">>=</span> minX<span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>maxY<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            maxY<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> maxY<span class="token punctuation">;</span> y <span class="token operator">>=</span> minY<span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>minX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            minX<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String space <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>space <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//任意一个人输入年龄，就可以判断出他是哪个年龄段的人？</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"儿童"</span><span class="token punctuation">,</span><span class="token string">"少年"</span><span class="token punctuation">,</span><span class="token string">"青少年"</span><span class="token punctuation">,</span><span class="token string">"青年"</span><span class="token punctuation">,</span><span class="token string">"壮年"</span><span class="token punctuation">,</span><span class="token string">"中年"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> age<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> <span class="token string">"change"</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">Java中没有指针，所以也没有引用传递了，仅仅有值传递不过可以通过对象的方式来实现引用传递 类似java没有多继承 但可以用多次<span class="token keyword">implements</span>接口实现多继承的功能值传递：方法调用时，实际参数把它的值传递给对应的形式参数，方法执行中形式参数值的改变不影响实际参 数的值。引用传递：也称为传地址。方法调用时，实际参数的引用<span class="token punctuation">(</span>地址，而不是参数的值<span class="token punctuation">)</span>被传递给方法中相对应的形式参数，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，方法执行中形式参数值的改变将会影响实际参数的值。Java参数按值传递    面试题<span class="token operator">:</span>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递<span class="token operator">?</span>   答<span class="token operator">:</span>是值传递。Java编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是该对象的引用的一个副本。指向同一个对象<span class="token punctuation">,</span>对象的内容可以在被调用的方法中改变，但对象的引用<span class="token punctuation">(</span>不是引用的副本<span class="token punctuation">)</span>是永远不会改变的。<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>在 Java应用程序中永远不会传递对象，而只传递对象引用。因此是按引用传递对象。但重要的是要区分参数是如何传递的，这才是该节选的意图。Java应用程序按引用传递对象这一事实并不意味着 Java 应用程序按引用传递参数。参数可以是对象引用，而 Java应用程序是按值传递对象引用的。  Java应用程序中的变量可以为以下两种类型之一：引用类型或基本类型。当作为参数传递给一个方法时，处理这两种类型的方式是相同的。两种类型都是按值传递的；没有一种按引用传递。   按值传递意味着当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。按引用传递意味着当将一个参数传递给一个函数时，函数接收的是原始值的内存地址，而不是值的副本。因此，如果函数修改了该参数的值，调用代码中的原始值也随之改变。如果函数修改了该参数的地址<span class="token punctuation">,</span>调用代码中的原始值不会改变<span class="token punctuation">.</span>   当传递给函数的参数不是引用时，传递的都是该值的一个副本（按值传递）。区别在于引用。在 C<span class="token operator">++</span>中当传递给函数的参数是引用时，您传递的就是这个引用，或者内存地址（按引用传递）。在 Java应用程序中，当对象引用是传递给方法的一个参数时，您传递的是该引用的一个副本（按值传递），而不是引用本身。   Java 应用程序按值传递参数<span class="token punctuation">(</span>引用类型或基本类型<span class="token punctuation">)</span>，其实都是传递他们的一份拷贝<span class="token punctuation">.</span>而不是数据本身<span class="token punctuation">.</span><span class="token punctuation">(</span>不是像 C<span class="token operator">++</span>中那样对原始值进行操作。<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">重载（overload<span class="token punctuation">)</span>和重写<span class="token punctuation">(</span>overried，有的书也叫做“覆盖”）的区别？答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 <span class="token punctuation">(</span>Overriding<span class="token punctuation">)</span>。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被<span class="token string">"屏蔽"</span>了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载<span class="token punctuation">(</span>Overloading<span class="token punctuation">)</span>。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> 和 Integer 有什么区别    答：Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。<span class="token keyword">int</span>是java的原始数据类型，Integer是java为<span class="token keyword">int</span>提供的封装类。Java为每个原始类型提供了封装类。原始类型封装类型及其对应的包装类：<span class="token keyword">boolean</span> Boolean<span class="token punctuation">,</span><span class="token keyword">char</span> Character<span class="token punctuation">,</span><span class="token keyword">byte</span> Byte<span class="token punctuation">,</span><span class="token keyword">short</span> Short<span class="token punctuation">,</span><span class="token keyword">int</span> Integer<span class="token punctuation">,</span><span class="token keyword">long</span> Long<span class="token punctuation">,</span><span class="token keyword">float</span>  Float<span class="token punctuation">,</span>doubl  Double引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Integer i1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        Integer i2 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i4 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动拆箱true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Integer的i1和i2是对象，他们<span class="token operator">==</span>比较的是地址。如果<span class="token operator">-</span><span class="token number">128</span><span class="token operator">~</span><span class="token number">127</span>范围，那么使用缓存的常量对象，如果超过这个范围，是新<span class="token keyword">new</span>的对象，不是常量对象<span class="token punctuation">.</span>Byte<span class="token punctuation">,</span>Short<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>Long的缓存值范围都是<span class="token operator">-</span><span class="token number">128</span><span class="token operator">~</span><span class="token number">127</span>，Boolean类的缓存是<span class="token boolean">false</span><span class="token operator">/</span><span class="token boolean">true</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写出程序结果</span><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Super</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Demo</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// super();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        Super d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>B  C  <span class="token number">5</span><span class="token punctuation">.</span>如果在Demo方法里的i前面加<span class="token keyword">int</span>，则答案是B C <span class="token number">2</span><span class="token punctuation">;</span>main方法里i的<span class="token keyword">int</span>是不能不写的，因为main是静态方法，必须是静态属性才可以</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Super</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Demo</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Demo d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译失败，因为父类中缺少空参数的构造器。</span><span class="token comment" spellcheck="true">//或者子类应该通过super语句指定要调用的父类中的构造器。</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Base b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Base b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub : "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>答案：base <span class="token operator">:</span> <span class="token number">100</span>sub <span class="token operator">:</span> <span class="token number">100</span>base <span class="token operator">:</span> <span class="token number">70</span>子类重写了父类中的方法，所以子类实例化的时候调父类构造器中的<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>实际执行的是子类中的<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    多态的体现，但做的时候没想到重写</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Fu f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> f<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> f<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//答案： A B</span></code></pre><pre class=" language-java"><code class="language-java">接口是否可继承接口<span class="token operator">?</span> 抽象类是否可实现<span class="token punctuation">(</span><span class="token keyword">implements</span><span class="token punctuation">)</span>接口<span class="token operator">?</span> 抽象类是否可继承实体类<span class="token punctuation">(</span>concrete <span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">?</span>答案是：   接口可以继承接口<span class="token punctuation">,</span>但不可以实现接口。抽象类可以实现<span class="token punctuation">(</span><span class="token keyword">implements</span><span class="token punctuation">)</span>接口，抽象类可继承实体类，但实体类必须不能是如下两种情况之一：   <span class="token number">1</span>，<span class="token keyword">final</span>修饰符修饰的类是不能的<span class="token number">2</span>，如果此实体类有且仅有私有的构造函数也是不能的。</code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 和<span class="token keyword">interface</span> 有什么区别<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">.</span>抽象类可以有构造方法<span class="token punctuation">(</span>是为了让子类用，自己不能用<span class="token punctuation">)</span>，接口中不能有构造方法。<span class="token number">2</span><span class="token punctuation">.</span>抽象类中可以有普通成员变量，接口中只有<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>修饰的属性<span class="token number">3</span><span class="token punctuation">.</span>抽象类中可以包含非抽象的普通方法，接口中可以包含抽象方法、默认方法、静态方法。<span class="token number">4</span><span class="token punctuation">.</span>抽象类中的抽象方法的访问类型可以是<span class="token keyword">public</span>，<span class="token keyword">protected</span>和默认类型，但接口中的所有方法只能是<span class="token keyword">public</span>类型的<span class="token number">5</span><span class="token punctuation">.</span>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>类型。<span class="token number">7</span><span class="token punctuation">.</span> 一个类可以实现多个接口，但只能继承一个抽象类。接口可以多继承          接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用，例如，模板方法设计模式是抽象类的一个典型应用，假设某个项目的所有Servlet类都要用相同的方式进行权限判断、记录访问日志和处理异常，那么就可以定义一个抽象的基类，让所有的Servlet都继承这个抽象基类，在抽象基类的service方法中完成权限判断、记录访问日志和处理异常的代码，在各个子类中只是完成各自的业务逻辑代码，</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span>  <span class="token class-name">A</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> x <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//super.x   A.x</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>答案：错误。在编译时会发生错误<span class="token punctuation">(</span>错误描述不同的JVM有不同的信息，意思就是未明确的x调用，两个x都匹配（就像在同时<span class="token keyword">import</span> java<span class="token punctuation">.</span>util和java<span class="token punctuation">.</span>sql两个包时直接声明Date一样）。对于父类的变量<span class="token punctuation">,</span>可以用<span class="token keyword">super</span><span class="token punctuation">.</span>x来明确，而接口的属性默认隐含为 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span><span class="token punctuation">.</span>所以可以通过A<span class="token punctuation">.</span>x来明确。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"func"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        A a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>编译失败：因为A接口中并未定义func方法。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不懂~~</span>Anonymous Inner <span class="token function">Class</span> <span class="token punctuation">(</span>匿名内部类<span class="token punctuation">)</span> 是否可以<span class="token keyword">extends</span><span class="token punctuation">(</span>继承<span class="token punctuation">)</span>其它类，是否可以<span class="token keyword">implements</span><span class="token punctuation">(</span>实现<span class="token punctuation">)</span><span class="token keyword">interface</span><span class="token punctuation">(</span>接口<span class="token punctuation">)</span>答：匿名的内部类是没有名字的内部类。不能<span class="token keyword">extends</span><span class="token punctuation">(</span>继承<span class="token punctuation">)</span> 其它类，但一个内部类可以作为一个接口，由另一个内部类实现</code></pre><pre class=" language-java"><code class="language-java">编译是否通过？<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Something s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s.doSomething() returns "</span> <span class="token operator">+</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Do something ..."</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 看上去很完美。答案<span class="token operator">:</span> 错。看上去在main里call doSomething没有什么问题，毕竟两个methods都在同一个<span class="token keyword">class</span>里。但仔细看，main是<span class="token keyword">static</span>的。<span class="token keyword">static</span> method不能直接call non<span class="token operator">-</span><span class="token keyword">static</span> methods。可改成<span class="token string">"System.out.println("</span>s<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> returns <span class="token string">" + s.doSomething());"</span>。同理，<span class="token keyword">static</span> method不能访问non<span class="token operator">-</span><span class="token keyword">static</span> instant variable。</code></pre><pre class=" language-java"><code class="language-java">如下程序是否可通过编译？<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       Other o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOne</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> Other o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       o<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>答案<span class="token operator">:</span> 正确。在addOne method中，参数o被修饰成<span class="token keyword">final</span>。如果在addOne method里我们修改了o的<span class="token function">reference</span><span class="token punctuation">(</span>比如<span class="token operator">:</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>，那么如同上例这题也是错的。但这里修改的是o的member <span class="token function">vairable</span><span class="token punctuation">(</span>成员变量<span class="token punctuation">)</span>，而o的reference并没有改变<span class="token punctuation">,</span>也就是说只要不改变引用就可以。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个x是局部变量，代码块执行完之后直接弹出栈，类中的类变量x没有改变值</span>        x<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>        z<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>z <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token operator">++</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> z<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>z<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>存储过程和函数的区别</p><p><strong>1.什么是存储过程</strong></p><p>​        存储过程是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。</p><p><strong>2.区别</strong></p><p> 一、含义不同</p><p>​    1、存储过程：存储过程是 SQL 语句和可选控制流语句的预编译集合，以一个名称存储并作为一个单元处理。</p><p>​    2、函数：是由一个或多个 SQL 语句组成的子程序，可用于封装代码以便重新使用。 函数限制比较多，如不能用临时表，只能用表变量等</p><p>二、使用条件不同</p><p>​    1、存储过程：可以在单个存储过程中执行一系列 SQL 语句。而且可以从自己的存储过程内引用其它存储过程，这可以简化一系列复杂语句。</p><p>​    2、函数：自定义函数诸多限制，有许多语句不能使用，许多功能不能实现。函数可以直接引用返回值，用表变量返回记录集。但是，用户定义函数不能用于执行一组修改全局数据库状态的操作。</p><p><a href="https://iknow-pic.cdn.bcebos.com/b17eca8065380cd7220e3f71af44ad345982811e"><img src="https://iknow-pic.cdn.bcebos.com/b17eca8065380cd7220e3f71af44ad345982811e?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="img"></a></p><p>三、执行方式不同</p><p>​    1、存储过程：存储过程可以返回参数，如记录集，函数只能返回值或者表对象。存储过程的参数有in，out，inout三种，存储过程声明时不需要返回类型。</p><p>​    2、函数：函数参数只有in，而函数需要描述返回类型，且函数中必须包含一个有效的return语句。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>运行时异常与一般异常有何异同<br>    答：异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。</p><p>Java中的异常处理机制的简单原理和应用<br>    答：当JAVA程序违反了JAVA的语义规则时，JAVA虚拟机就会将发生的错误表示为一个异常。<br>违反语义规则包括2种情况。一种是JAVA类库内置的语义检查。例如数组下标越界,会引发IndexOutOfBoundsException;访问null的对象时会引发NullPointerException。另一种情况就是JAVA允许程序员扩展这种语义检查，程序员可以创建自己的异常，并自由选择在何时用throw关键字引发异常。所有的异常都是java.lang.Thowable的子类。</p><p>垃圾回收的优点和原理。并考虑2种回收机制<br>    答：Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，Java中的对象不再有”作用域”的概念，只有对象的引用才有”作用域”。<br>垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。</p><p>JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？<br>        答：Java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。<br>用try来指定一块预防所有”异常”的程序。紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉的”异常”的类型。<br>throw语句用来明确地抛出一个”异常”。<br>throws用来标明一个成员函数可能抛出的各种”异常”。<br>Finally为确保一段代码不管发生什么”异常”都被执行一段代码。<br>可以在一个成员函数调用的外面写一个try语句，在这个成员函数内部写另一个try语句保护其他代码。每当遇到一个try语句，”异常”的框架就放到堆栈上面，直到所有的try语句都完成。如果下一级的try语句没有对某种”异常”进行处理，堆栈就会展开，直到遇到有处理这种”异常”的try语句。</p><p>try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?<br>    答：会执行，在return前执行</p><p>error和exception有什么区别</p><p>​    答：error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况，exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写出程序结果</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译不通过</span><span class="token comment" spellcheck="true">//编译失败：</span><span class="token comment" spellcheck="true">//如果func方法上声明了该异常。结果就是B C D</span><span class="token comment" spellcheck="true">//如果声明为RunntimeException也是B C D</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">showExce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showExce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BCD</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译失败。 因为打印“A”的输出语句执行不到。</span><span class="token comment" spellcheck="true">//throw单独存在，下面不要定义语句，因为执行不到。和return，break,continue一样</span><span class="token comment" spellcheck="true">//报错Unreachable statement</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String output <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output <span class="token operator">+=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            output <span class="token operator">+=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            output <span class="token operator">+=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        output <span class="token operator">+=</span> <span class="token string">"4"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//134</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无134234</span>                                   <span class="token comment" spellcheck="true">//有13423</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不懂</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> test <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//finally中的语句不会影响到临时栈中的值，即在执行finally之前，临时栈中的result已经确定为8了，执行finally语句将result的值变为-2，对结果没有产生影响，执行完finally后的输出结果仍为8.</span></code></pre><pre class=" language-java"><code class="language-java">    请编写程序举例抛出一个空指针异常Object o <span class="token operator">=</span> null<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    请编写程序举例抛出一个类型转换异常String test<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span> <span class="token keyword">int</span> number<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    请编写程序举例抛出一个数组索引越界异常<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    请编写程序举例抛出一个索引越界异常 List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    请编写程序举例抛出一个字符串索引越界异常String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>C 和 Java 都是多线程语言。（×）  C 是单线程语言。 <span class="token number">2</span><span class="token punctuation">.</span>如果线程死亡，它便不能运行。（√） 线程死亡就意味着它不能运行。 <span class="token number">3</span><span class="token punctuation">.</span>在 Java 中，高优先级的可运行线程会抢占低优先级线程。（√） <span class="token number">4</span><span class="token punctuation">.</span>程序开发者必须创建一个线程去管理内存的分配。（×）     Java 提供了一个系统线程来管理内存的分配。 <span class="token number">5</span><span class="token punctuation">.</span>一个线程在调用它的 start 方法，之前，该线程将一直处于出生期。（√） <span class="token number">6</span><span class="token punctuation">.</span>当调用一个正在进行线程的 <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法时，该线程便会进入休眠状态。（×）  应该是 sleep 方法。 <span class="token number">7</span><span class="token punctuation">.</span>如果线程的 run 方法执行结束或抛出一个不能捕获的例外，线程便进入等待状态。（×）       如果线程的 run 方法执行结束或抛出一个不能捕获的例外，线程便进入死亡状态。 <span class="token number">8</span><span class="token punctuation">.</span>一个线程可以调用 yield 方法使其他线程有机会运行。（√）     把执行机会让给优先级相同或更高的线程</code></pre><pre class=" language-java"><code class="language-java"><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法为何不推荐使用？        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。    <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>因为容易发生死锁。调用<span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被<span class="token string">"挂起"</span>的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用<span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用<span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>命其进入等待状态。若标志指出线程应当恢复，则用一个<span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>重新启动线程。</code></pre><pre class=" language-java"><code class="language-java"><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 有什么区别<span class="token operator">?</span>     答：sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，把执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。    wait是Object类的<span class="token keyword">native</span>修饰的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</code></pre><pre class=" language-java"><code class="language-java">同步和异步有何异同，在什么情况下分别使用他们？举例说明。    答：如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。    </code></pre><pre class=" language-java"><code class="language-java">简述<span class="token keyword">synchronized</span>和java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock的异同 ？    答：主要相同点：Lock能完成<span class="token keyword">synchronized</span>所实现的所有功能主要不同点：Lock有比<span class="token keyword">synchronized</span>更精确的线程语义和更好的性能比如Lock可以中断一个正在等候获得锁的线程。<span class="token keyword">synchronized</span>会自动释放锁，而Lock一定要求程序员手工释放，并且必须在<span class="token keyword">finally</span>从句中释放。</code></pre><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><pre class=" language-java"><code class="language-java">Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">11.5</span><span class="token punctuation">)</span>等于多少<span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11.5</span><span class="token punctuation">)</span>等于多少    答<span class="token operator">:</span>  Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">11.5</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11.5</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">;</span>round方法返回与参数最接近的长整数，参数加<span class="token number">0.5</span> 后向下取整<span class="token punctuation">,</span>这个得注意</code></pre><p>​      </p><table><thead><tr><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间</td><td>StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量</td><td>可变类，速度更快</td></tr><tr><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td></td><td>线程安全</td><td>线程不安全</td></tr><tr><td></td><td>多线程操作字符串</td><td>单线程操作字符串</td></tr></tbody></table><p>​    </p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>下面哪个选项正确地声明了一个字符串数组：C    A <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span>     B <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    C String str<span class="token punctuation">[</span><span class="token punctuation">]</span>     D String str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>声明，区别于创建，创建的时候是String<span class="token punctuation">[</span><span class="token punctuation">]</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>声明的时候是String<span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">;</span> 或者 String str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>请看下面的代码 String s <span class="token operator">=</span> “people”<span class="token punctuation">;</span> String t <span class="token operator">=</span> “people”<span class="token punctuation">;</span> String c<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“p”<span class="token punctuation">,</span>”e”<span class="token punctuation">,</span>”o”<span class="token punctuation">,</span>”p”<span class="token punctuation">,</span>”l” <span class="token punctuation">,</span>”e”<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> 下面哪一选项的语句返回值为真：A C D  A s <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   B t <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   C s<span class="token operator">==</span>t<span class="token punctuation">;</span>   D t <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>“people”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   E t<span class="token operator">==</span>c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错 左右两边类型必须匹配</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> datas <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行异常，不允许添加元素</span></code></pre><pre class=" language-java"><code class="language-java">说出ArrayList<span class="token punctuation">,</span>Vector<span class="token punctuation">,</span> LinkedList的存储性能和特性<span class="token operator">?</span>    答：ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了<span class="token keyword">synchronized</span>方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</code></pre><pre class=" language-java"><code class="language-java">HashMap和Hashtable的区别  答：  <span class="token number">1</span><span class="token punctuation">.</span>HashMap与Hashtable都实现了Map接口。由于HashMap的非线程安全的，效率上可能高于Hashtable。Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。  <span class="token number">2</span><span class="token punctuation">.</span> HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。  <span class="token number">3</span><span class="token punctuation">.</span>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。   <span class="token number">4</span><span class="token punctuation">.</span>Hashtable继承自Dictionary类，而HashMap是Java1<span class="token number">.2</span>引进的Map 接口的一个实现。  <span class="token number">5</span><span class="token punctuation">.</span>Hashtable和HashMap采用的hash<span class="token operator">/</span>rehash算法都大概一样，所以性能不会有很大的差异。</code></pre><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><pre class=" language-java"><code class="language-java">什么是java序列化，如何实现java序列化？    答：序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。    序列化是为了解决在对对象流进行读写操作时所引发的问题。    序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，<span class="token keyword">implements</span> <span class="token class-name">Serializable</span>只是为了标注该对象是可被序列化的，然后使用一个输出流<span class="token punctuation">(</span>如：FileOutputStream<span class="token punctuation">)</span>来构造一个<span class="token function">ObjectOutputStream</span><span class="token punctuation">(</span>对象流<span class="token punctuation">)</span>对象，接着，使用ObjectOutputStream对象的<span class="token function">writeObject</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>方法就可以将参数为obj的对象写出<span class="token punctuation">(</span>即保存其状态<span class="token punctuation">)</span>，要恢复的话则用输入流。</code></pre><pre class=" language-java"><code class="language-java">什么是标准的I<span class="token operator">/</span>O流？    在java语言中，用stdin表示键盘，用stdout表示监视器。他们均被封装在System类的类变量in 和out中，对应于系统调用System<span class="token punctuation">.</span>in和System<span class="token punctuation">.</span>out。这样的两个流加上System<span class="token punctuation">.</span>err统称为标准流，它们是在System类中声明的<span class="token number">3</span>个类变量：    <span class="token keyword">public</span> <span class="token keyword">static</span> InputStream in    publicstaticPrintStream out    <span class="token keyword">public</span> <span class="token keyword">static</span> PrintStream err</code></pre><pre class=" language-java"><code class="language-java">在FilterOutputStream类的构造方法中，下面哪个类是合法： C    A File     B InputStream    C OutputStream    D FileOutputStream     <span class="token comment" spellcheck="true">//只有这一个构造器</span> <span class="token keyword">public</span> <span class="token function">FilterOutputStream</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> out<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><pre class=" language-java"><code class="language-java">描述一下JVM加载<span class="token keyword">class</span>文件的原理机制<span class="token operator">?</span>    答：JVM中类的装载是由ClassLoader和它的子类来实现的<span class="token punctuation">,</span>Java ClassLoader 是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。</code></pre><h2 id="java核心的棘手问题"><a href="#java核心的棘手问题" class="headerlink" title="java核心的棘手问题"></a>java核心的棘手问题</h2><pre class=" language-java"><code class="language-java">这些问题主要来自 Java 核心部分，不涉及 Java EE 相关问题。你可能知道这些棘手的 Java 问题的答案，或者觉得这些不足以挑战你的 Java 知识，但这些问题都是容易在各种 Java 面试中被问到的，而且包括我的朋友和同事在内的许多程序员都觉得很难回答。为什么等待和通知是在 Object 类而不是 Thread 中声明的？一个棘手的 Java 问题，如果 Java 编程语言不是你设计的，你怎么能回答这个问题呢。Java 编程的常识和深入了解有助于回答这种棘手的 Java 核心方面的面试问题。为什么 wait，notify 和 notifyAll 是在 Object 类中定义的而不是在 Thread 类中定义这是有名的 Java 面试问题，招 <span class="token number">2</span><span class="token operator">~</span><span class="token number">4</span> 年经验的到高级 Java 开发人员面试都可能碰到。这个问题的好在它能反映了面试者对等待通知机制的了解<span class="token punctuation">,</span> 以及他对此主题的理解是否明确。就像为什么 Java 中不支持多继承或者为什么 String 在 Java 中是 <span class="token keyword">final</span> 的问题一样，这个问题也可能有多个答案。一、为什么在 Object 类中定义 wait 和 notify 方法，每个人都能说出一些理由。从我的面试经验来看<span class="token punctuation">,</span> wait 和 nofity 仍然是大多数 Java 程序员最困惑的，特别是 <span class="token number">2</span> 到 <span class="token number">3</span> 年的开发人员，如果他们要求使用 wait 和 notify<span class="token punctuation">,</span> 他们会很困惑。因此，如果你去参加 Java 面试，请确保对 wait 和 notify 机制有充分的了解，并且可以轻松地使用 wait 来编写代码，并通过生产者<span class="token operator">-</span>消费者问题或实现阻塞队列等了解通知的机制。为什么等待和通知需要从同步块或方法中调用<span class="token punctuation">,</span> 以及 Java 中的 wait，sleep 和 yield 方法之间的差异，如果你还没有读过，你会觉得有趣。为何 wait，notify 和 notifyAll 属于 Object 类<span class="token operator">?</span> 为什么它们不应该在 Thread 类中<span class="token operator">?</span> 以下是我认为有意义的一些想法：<span class="token number">1</span><span class="token punctuation">)</span> wait 和 notify 不仅仅是普通方法或同步工具，更重要的是它们是 Java 中两个线程之间的通信机制。对语言设计者而言<span class="token punctuation">,</span> 如果不能通过 Java 关键字<span class="token punctuation">(</span>例如 <span class="token keyword">synchronized</span><span class="token punctuation">)</span>实现通信此机制，同时又要确保这个机制对每个对象可用<span class="token punctuation">,</span> 那么 Object 类则是的正确声明位置。记住同步和等待通知是两个不同的领域，不要把它们看成是相同的或相关的。同步是提供互斥并确保 Java 类的线程安全，而 wait 和 notify 是两个线程之间的通信机制。<span class="token number">2</span><span class="token punctuation">)</span> 每个对象都可上锁，这是在 Object 类而不是 Thread 类中声明 wait 和 notify 的另一个原因。<span class="token number">3</span><span class="token punctuation">)</span> 在 Java 中为了进入代码的临界区，线程需要锁定并等待锁定，他们不知道哪些线程持有锁，而只是知道锁被某个线程持有， 并且他们应该等待取得锁<span class="token punctuation">,</span> 而不是去了解哪个线程在同步块内，并请求它们释放锁定。<span class="token number">4</span><span class="token punctuation">)</span> Java 是基于 Hoare 的监视器的思想。在 Java 中，所有对象都有一个监视器。线程在监视器上等待，为执行等待，我们需要 <span class="token number">2</span> 个参数：一个线程一个监视器<span class="token punctuation">(</span>任何对象<span class="token punctuation">)</span>    在 Java 设计中，线程不能被指定，它总是运行当前代码的线程。但是，我们可以指定监视器<span class="token punctuation">(</span>这是我们称之为等待的对象<span class="token punctuation">)</span>。这是一个很好的设计，因为如果我们可以让任何其他线程在所需的监视器上等待，这将导致“入侵”，导致在设计并发程序时会遇到困难。请记住，在 Java 中，所有在另一个线程的执行中侵入的操作都被弃用了<span class="token punctuation">(</span>例如 stop 方法<span class="token punctuation">)</span>。为什么 Java 中不支持多重继承？我发现这个 Java 核心问题很难回答，因为你的答案可能不会让面试官满意。在大多数情况下，面试官正在寻找答案中的关键点，如果你提到这些关键点，面试官会很高兴。在 Java 中回答这种棘手问题的关键是准备好相关主题<span class="token punctuation">,</span> 以应对后续的各种可能的问题。这是非常经典的问题，与为什么 String 在 Java 中是不可变的很类似<span class="token punctuation">;</span> 这两个问题之间的相似之处在于它们主要是由 Java 创作者的设计决策使然。为什么 Java 不支持多重继承<span class="token punctuation">,</span> 可以考虑以下两点<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span> 第一个原因是围绕钻石形继承问题产生的歧义，考虑一个类 A 有 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法<span class="token punctuation">,</span> 然后 B 和 C 派生自 A<span class="token punctuation">,</span> 并且有自己的 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 实现，现在 D 类使用多个继承派生自 B 和 C，如果我们只引用 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 编译器将无法决定它应该调用哪个 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。这也称为 Diamond 问题，因为这个继承方案的结构类似于菱形，见下图<span class="token operator">:</span>                A <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token operator">/</span>                  <span class="token operator">/</span>             <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> B     C <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">/</span>                  <span class="token operator">/</span>                 D  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>即使我们删除钻石的顶部 A 类并允许多重继承，我们也将看到这个问题含糊性的一面。如果你把这个理由告诉面试官，他会问为什么 C<span class="token operator">++</span> 可以支持多重继承而 Java 不行。嗯，在这种情况下，我会试着向他解释我下面给出的第二个原因，它不是因为技术难度<span class="token punctuation">,</span> 而是更多的可维护和更清晰的设计是驱动因素<span class="token punctuation">,</span> 虽然这只能由 Java 言语设计师确认，我们只是推测。维基百科链接有一些很好的解释，说明在使用多重继承时，由于钻石问题，不同的语言地址问题是如何产生的。<span class="token number">2</span><span class="token punctuation">)</span> 对我来说第二个也是更有说服力的理由是，多重继承确实使设计复杂化并在转换、构造函数链接等过程中产生问题。假设你需要多重继承的情况并不多，简单起见，明智的决定是省略它。此外，Java 可以通过使用接口支持单继承来避免这种歧义。由于接口只有方法声明而且没有提供任何实现，因此只有一个特定方法的实现，因此不会有任何歧义。为什么 Java 不支持运算符重载？另一个类似棘手的 Java 问题。为什么 C<span class="token operator">++</span> 支持运算符重载而 Java 不支持<span class="token operator">?</span> 有人可能会说<span class="token operator">+</span>运算符在 Java 中已被重载用于字符串连接，不要被这些论据所欺骗。与 C<span class="token operator">++</span> 不同，Java 不支持运算符重载。Java 不能为程序员提供自由的标准算术运算符重载，例如<span class="token operator">+</span>， <span class="token operator">-</span> ，<span class="token operator">*</span>和<span class="token operator">/</span>等。如果你以前用过 C<span class="token operator">++</span>，那么 Java 与 C<span class="token operator">++</span> 相比少了很多功能，例如 Java 不支持多重继承，Java 中没有指针，Java 中没有引用传递。另一个类似的问题是关于 Java 通过引用传递，这主要表现为 Java 是通过值还是引用传参。虽然我不知道背后的真正原因，但我认为以下说法有些道理，为什么 Java 不支持运算符重载。<span class="token number">1</span><span class="token punctuation">.</span> 简单性和清晰性。清晰性是 Java 设计者的目标之一。设计者不是只想复制语言，而是希望拥有一种清晰，真正面向对象的语言。添加运算符重载比没有它肯定会使设计更复杂，并且它可能导致更复杂的编译器<span class="token punctuation">,</span>，或减慢 JVM，因为它需要做额外的工作来识别运算符的实际含义，并减少优化的机会<span class="token punctuation">,</span> 以保证 Java 中运算符的行为。<span class="token number">2</span><span class="token punctuation">.</span> 避免编程错误。Java 不允许用户定义的运算符重载，因为如果允许程序员进行运算符重载，将为同一运算符赋予多种含义，这将使任何开发人员的学习曲线变得陡峭，事情变得更加混乱。据观察，当语言支持运算符重载时，编程错误会增加，从而增加了开发和交付时间。由于 Java 和 JVM 已经承担了大多数开发人员的责任，如在通过提供垃圾收集器进行内存管理时，因为这个功能增加污染代码的机会<span class="token punctuation">,</span> 成为编程错误之源<span class="token punctuation">,</span> 因此没有多大意义。<span class="token number">3</span><span class="token punctuation">.</span> VM 复杂性。从 JVM 的角度来看，支持运算符重载使问题变得更加困难。通过更直观，更干净的方式使用方法重载也能实现同样的事情，因此不支持 Java 中的运算符重载是有意义的。与相对简单的 JVM 相比，复杂的 JVM 可能导致 JVM 更慢，并为保证在 Java 中运算符行为的确定性从而减少了优化代码的机会。<span class="token number">4</span><span class="token punctuation">.</span> 让开发工具处理更容易。这是在 Java 中不支持运算符重载的另一个好处。省略运算符重载使语言更容易处理，这反过来又更容易开发处理语言的工具，例如 IDE 或重构工具。Java 中的重构工具远胜于 C<span class="token operator">++</span>。                                        二、为什么 String 在 Java 中是不可变的？                    我最喜欢的 Java 面试问题，很棘手，但同时也非常有用。一些面试者也常问这个问题，为什么 String 在 Java 中是 <span class="token keyword">final</span> 的。字符串在 Java 中是不可变的，因为 String 对象缓存在 String 池中。由于缓存的字符串在多个客户之间共享，因此始终存在风险，其中一个客户的操作会影响所有其他客户。例如，如果一段代码将 String “Test” 的值更改为 “TEST”，则所有其他客户也将看到该值。由于 String 对象的缓存性能是很重要的一方面，因此通过使 String 类不可变来避免这种风险。同时，String 是 <span class="token keyword">final</span> 的，因此没有人可以通过扩展和覆盖行为来破坏 String 类的不变性、缓存、散列值的计算等。String 类不可变的另一个原因可能是由于 HashMap。由于把字符串作为 HashMap 键很受欢迎。对于键值来说，重要的是它们是不可变的，以便用它们检索存储在 HashMap 中的值对象。由于 HashMap 的工作原理是散列，因此需要具有相同的值才能正常运行。如果在插入后修改了 String 的内容，可变的 String 将在插入和检索时生成两个不同的哈希码，可能会丢失 Map 中的值对象。如果你是印度板球迷，你可能能够与我的下一句话联系起来。字符串是 Java 的 VVS Laxman，即非常特殊的类。我还没有看到一个没有使用 String 编写的 Java 程序。这就是为什么对 String 的充分理解对于 Java 开发人员来说非常重要。String 作为数据类型，传输对象和中间人角色的重要性和流行性也使这个问题在 Java 面试中很常见。为什么 String 在 Java 中是不可变的是 Java 中最常被问到的字符串访问问题之一，它首先讨论了什么是 String，Java 中的 String 如何与 C 和 C<span class="token operator">++</span> 中的 String 不同，然后转向在 Java 中什么是不可变对象，不可变对象有什么好处，为什么要使用它们以及应该使用哪些场景。这个问题有时也会问：“为什么 String 在 Java 中是 <span class="token keyword">final</span> 的”。在类似的说明中，如果你正在准备 Java 面试，我建议你看看《Java 程序员面试宝典<span class="token punctuation">(</span>第 <span class="token number">4</span> 版<span class="token punctuation">)</span> 》，这是高级和中级 Java 程序员的优秀资源。它包含来自所有重要 Java 主题的问题，包括多线程，集合，GC，JVM 内部以及 Spring 和 Hibernate 框架等。正如我所说，这个问题可能有很多可能的答案，而 String 类的唯一设计者可以放心地回答它。我在 Joshua Bloch 的 Effective Java 书中期待一些线索，但他也没有提到它。我认为以下几点解释了为什么 String 类在 Java 中是不可变的或 <span class="token keyword">final</span> 的：<span class="token number">1</span><span class="token punctuation">.</span> 想象字符串池没有使字符串不可变，它根本不可能。因为在字符串池的情况下，一个字符串对象<span class="token operator">/</span>文字，例如 “Test” 已被许多参考变量引用，因此如果其中任何一个更改了值，其他参数将自动受到影响，即假设​```javaString A<span class="token operator">=</span><span class="token string">"Test"</span><span class="token punctuation">;</span>String B<span class="token operator">=</span><span class="token string">"Test"</span><span class="token punctuation">;</span>​```现在字符串 B 调用 <span class="token string">"Test"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 将同一个对象改为“TEST”，所以 A 也是 “TEST”，这不是期望的结果。<span class="token number">2</span><span class="token punctuation">.</span> 字符串已被广泛用作许多 Java 类的参数例如，为了打开网络连接，你可以将主机名和端口号作为字符串传递，你可以将数据库 URL 作为字符串传递<span class="token punctuation">,</span> 以打开数据库连接，你可以通过将文件名作为参数传递给 File I<span class="token operator">/</span>O 类来打开 Java 中的任何文件。如果 String 不是不可变的，这将导致严重的安全威胁，我的意思是有人可以访问他有权授权的任何文件，然后可以故意或意外地更改文件名并获得对该文件的访问权限。由于不变性，你无需担心这种威胁。这个原因也说明了，为什么 String 在 Java 中是最终的，通过使 java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token keyword">final</span>，Java 设计者确保没有人覆盖 String 类的任何行为。<span class="token number">3</span><span class="token punctuation">.</span> 由于 String 是不可变的，它可以安全地共享许多线程，这对于多线程编程非常重要。并且避免了 Java 中的同步问题，不变性也使得 String 实例在 Java 中是线程安全的，这意味着你不需要从外部同步 String 操作。关于 String 的另一个要点是由截取字符串 SubString 引起的内存泄漏，这不是与线程相关的问题，但也是需要注意的。<span class="token number">4</span><span class="token punctuation">.</span> 为什么 String 在 Java 中是不可变的另一个原因是允许 String 缓存其哈希码，Java 中的不可变 String 缓存其哈希码，并且不会在每次调用 String 的 hashcode 方法时重新计算，这使得它在 Java 中的 HashMap 中使用的 HashMap 键非常快。简而言之，因为 String 是不可变的。所以没有人可以在创建后更改其内容，这保证了 String 的 hashCode 在多次调用时是相同的。<span class="token number">5</span><span class="token punctuation">.</span> String 不可变的绝对最重要的原因是它被类加载机制使用，因此具有深刻和基本的安全考虑。如果 String 是可变的，加载“java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Writer” 的请求可能已被更改为加载 “mil<span class="token punctuation">.</span>vogoon<span class="token punctuation">.</span>DiskErasingWriter”<span class="token punctuation">.</span> 安全性和字符串池是使字符串不可变的主要原因。顺便说一句，上面的理由很好回答另一个 Java 面试问题<span class="token operator">:</span> “为什么 String 在 Java 中是最终的”。要想是不可变的，你必须是最终的，这样你的子类不会破坏不变性。你怎么看？三、为什么 <span class="token keyword">char</span> 数组比 Java 中的 String 更适合存储密码？另一个基于 String 的棘手 Java 问题，相信我只有很少的 Java 程序员可以正确回答这个问题。这是一个真正艰难的核心 Java 面试问题，并且需要对 String 的扎实知识才能回答这个问题。这是最近在 Java 面试中向我的一位朋友询问的问题。他正在接受技术主管职位的面试，并且有超过 <span class="token number">6</span> 年的经验。如果你还没有遇到过这种情况，那么字符数组和字符串可以用来存储文本数据，但是选择一个而不是另一个很难。但正如我的朋友所说，任何与 String 相关的问题都必须对字符串的特殊属性有一些线索，比如不变性，他用它来说服访提问的人。在这里，我们将探讨为什么你应该使用 <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>存储密码而不是 String 的一些原因。字符串：<span class="token number">1</span><span class="token punctuation">.</span> 由于字符串在 Java 中是不可变的，如果你将密码存储为纯文本，它将在内存中可用，直到垃圾收集器清除它。并且为了可重用性，会存在 String 在字符串池中<span class="token punctuation">,</span> 它很可能会保留在内存中持续很长时间，从而构成安全威胁。由于任何有权访问内存转储的人都可以以明文形式找到密码，这是另一个原因，你应该始终使用加密密码而不是纯文本。由于字符串是不可变的，所以不能更改字符串的内容，因为任何更改都会产生新的字符串，而如果你使用 <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>，你就可以将所有元素设置为空白或零。因此，在字符数组中存储密码可以明显降低窃取密码的安全风险。<span class="token number">2</span><span class="token punctuation">.</span> Java 本身建议使用 JPasswordField 的 <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，该方法返回一个 <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 和不推荐使用的 <span class="token function">getTex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，该方法以明文形式返回密码，由于安全原因。应遵循 Java 团队的建议<span class="token punctuation">,</span> 坚持标准而不是反对它。<span class="token number">3</span><span class="token punctuation">.</span> 使用 String 时，总是存在在日志文件或控制台中打印纯文本的风险；但如果使用 Array，则不会打印数组的内容而是打印其内存位置。虽然不是一个真正的原因，但仍然有道理。    String strPassword <span class="token operator">=</span>“Unknown”<span class="token punctuation">;</span>     <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> charPassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'U'</span>，<span class="token string">'n'</span>，<span class="token string">'k'</span>，<span class="token string">'w'</span>，<span class="token string">'o'</span>，<span class="token string">'n'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“字符密码：”<span class="token operator">+</span> strPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“字符密码：”<span class="token operator">+</span> charPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：字符串密码：Unknown字符密码：<span class="token punctuation">[</span>C <span class="token annotation punctuation">@110b053</span>    我还建议使用散列或加密的密码而不是纯文本，并在验证完成后立即从内存中清除它。因此<span class="token punctuation">,</span>在 Java 中<span class="token punctuation">,</span>用字符数组用存储密码比字符串是更好的选择。虽然仅使用 <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>还不够，还你需要擦除内容才能更安全。      </code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>知识链</title>
      <link href="2021/06/03/java%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
      <url>2021/06/03/java%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h2><p>变量</p><p>控制结构  ：顺序、分支、循环</p><p>oop  封装、继承、多态</p><p>数组</p><p>javaAPI：学会查看文档，学会怎么去调用API </p><p>异常和处理</p><p>集合</p><p>泛型</p><p>IO</p><p>反射</p><h2 id="2、高级-重点"><a href="#2、高级-重点" class="headerlink" title="2、高级 ==重点=="></a>2、高级 ==<strong>重点</strong>==</h2><h3 id="多线程-高并发"><a href="#多线程-高并发" class="headerlink" title="多线程/高并发"></a>多线程/高并发</h3><ul><li>并发基础   互斥同步 、非阻塞同步、指令重排、synchronize、volatile</li><li>线程</li><li>锁    自旋锁 、偏向锁 、可重入锁</li><li>线程池</li><li>并发容器</li><li>JUC  executor、collections、lock、atomic 、tools（Exchanger，ThreadLocal）</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>稀疏数组  、队列、栈、链表、数、散列、堆、图</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li>八种排序算法</li><li>查找</li><li>分治</li><li>动态规划  背包问题</li><li>回溯(su四声)  骑士周游问题</li><li>贪心算法</li><li>KMP、Prim、kruskal、floyd最短路径、迪杰斯特拉</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li>单例模式，观察者模式，工厂模式，适配器，装饰者模式，代理模式，模板模式，职责链模式 必须掌握</li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li><p>jvm体系，类加载机制，双亲委派机制/沙箱安全机制  ，JMM(java内存模型)，字节码执行的过程/机制</p><p>GC垃圾回收算法，JVM性能监控和故障定位，JVM调优</p></li></ul><h2 id="3、JavaWeb"><a href="#3、JavaWeb" class="headerlink" title="3、JavaWeb"></a>3、JavaWeb</h2><h3 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h3><p>html，css，JavaScript，Ajax，jquery，</p><h3 id="前端框架-可以弱化"><a href="#前端框架-可以弱化" class="headerlink" title="前端框架(可以弱化)"></a>前端框架(可以弱化)</h3><p>Vue，React，Angular，BootStrap，Node.js</p><h3 id="Java-Web-后端"><a href="#Java-Web-后端" class="headerlink" title="Java Web 后端"></a>Java Web 后端</h3><p>Tomcat，servlet，jsp</p><h2 id="4、主流框架和项目管理"><a href="#4、主流框架和项目管理" class="headerlink" title="4、主流框架和项目管理"></a>4、主流框架和项目管理</h2><p>Linux(必学必会)</p><p>Nginx(必学必会)</p><p>SSM ==<strong>重点</strong>== — Spring ,SpringMVC MyBatis</p><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p>Maven，Git&amp;GitHub</p><h3 id="数据库-重点"><a href="#数据库-重点" class="headerlink" title="数据库 ==重点=="></a>数据库 ==<strong>重点</strong>==</h3><p>Redies，Mysql，Oracle</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>WebService 即SOA  </p><p>Activity、Shiro、Spring Security、JPA、SpringData(持久层的通用解决方案)</p><h2 id="5、分布式微服务并行架构"><a href="#5、分布式微服务并行架构" class="headerlink" title="5、分布式微服务并行架构"></a>5、分布式微服务并行架构</h2><p>Netty  ==<strong>重点</strong>==</p><p>Dubbo 也就是RPC框架，底层就是Netty</p><p>FastDFS（分布式的文件系统）</p><p>Docker(应用容器引擎)</p><p>SpringBoot  ==<strong>重点</strong>==</p><p>SpringCloud(组件很多)  ==<strong>重点</strong>==</p><ul><li>Nacos:服务发现，配置，管理</li><li>Seata：分布式事务的中间件</li><li>Sentiner ：流量控制，熔断，系统负载保护</li><li>GateWay：网关。限流，日志，监控，鉴权</li><li>OpenFeign：服务间调用</li></ul><p>搜索引擎  ElasticSearch、Solr</p><p>中间件    ==<strong>重点</strong>==</p><ul><li>MyCat：数据库中间件，做分库分表的</li><li>消息中间件<ul><li>ActiveMQ、RabbitMQ、KafKa</li></ul></li></ul><p>日志分析与监控(ELK)</p><ul><li> ElasticSearch(搜集，存储数据)</li><li>LogStash(分析日志)</li><li>Kibana(可视化)</li></ul><p>Zookeepr(一致性服务，比如配置维护，域名维护，分布式同步)</p><h2 id="6、DevOps开发运维一体化"><a href="#6、DevOps开发运维一体化" class="headerlink" title="6、DevOps开发运维一体化"></a>6、DevOps开发运维一体化</h2><p>自动化部署管理项目，解决CI/CD</p><p>K8S：让部署容器化的应用简单高效</p><p>普罗米修斯：开源的系统监控和报警</p><p>JenKins：监控持续的工作，比如部署，集成，交互</p><p>Harbor：容器的镜像仓库</p><p>GitLab</p><p>SonarQube：项目工程代码质量检测</p><h2 id="7、大数据技术，可弱化"><a href="#7、大数据技术，可弱化" class="headerlink" title="7、大数据技术，可弱化"></a>7、大数据技术，可弱化</h2><p>Hadoop、Hive、Impals、spark、flink</p><h2 id="8、项目-重点"><a href="#8、项目-重点" class="headerlink" title="8、项目  ==重点=="></a>8、项目  ==<strong>重点</strong>==</h2><p>至少做3个以上的，电商，金融，教育，直播，CRM,ERP</p><h2 id="9、高频面试题"><a href="#9、高频面试题" class="headerlink" title="9、高频面试题"></a>9、高频面试题</h2><h2 id="10、底层源码和内核的研究"><a href="#10、底层源码和内核的研究" class="headerlink" title="10、底层源码和内核的研究"></a>10、底层源码和内核的研究</h2><h2 id="11、编程基础的扩展"><a href="#11、编程基础的扩展" class="headerlink" title="11、编程基础的扩展"></a>11、编程基础的扩展</h2><p>计算机网络，操作系统，编译原理，离散数学，数值分析，计算机组成原理，汇编语言</p>]]></content>
      
      
      <categories>
          
          <category> java后端知识体系 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java复习</title>
      <link href="2021/06/03/java%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/06/03/java%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="记录、总结、思考、提炼、回顾是学习的根本"><a href="#记录、总结、思考、提炼、回顾是学习的根本" class="headerlink" title="记录、总结、思考、提炼、回顾是学习的根本"></a>记录、总结、思考、提炼、回顾是学习的根本</h1><h1 id="复习时不清楚的知识点"><a href="#复习时不清楚的知识点" class="headerlink" title="复习时不清楚的知识点"></a>复习时不清楚的知识点</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>成员变量有默认值，但局部变量是没有默认值的</p><p>final修饰的成员变量也是没有默认值的，必须的显示赋值</p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>基本数据类型布尔型 是<strong>boolean</strong>  <strong>不是</strong>bool</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>float表示的范围比long还大，是因为浮点类型的单精度值具有 4 个字节，包括一个符号位、一个 8 位 二进制指数和一个 23 位尾数。由于尾数的高顺序位始终为 1，可以省略不写，因此它不是以数字形式存储的。</p><p>8.5，用二进制的科学计数法表示为:1.0001*2^3</p><p>符号位为:0，表示为正，指数位为:3+127=130 ,位数部分为0001</p><p>表示为    0    1000 0010    000 1000 0000 0000 0000 0000</p><h3 id="单精度和双精度的区别"><a href="#单精度和双精度的区别" class="headerlink" title="单精度和双精度的区别"></a>单精度和双精度的区别</h3><p>​       含义：表明单精度和双精度精确的范围不一样，单精度，也即float，一般在计算机中存储占用4字节，也32位，有效位数为7位；双精度（double）在计算机中存储占用8字节，64位，有效位数为16位。<br>​      原因：不管float还是double 在计算机上的存储都遵循IEEE规范，使用二进制科学计数法，都包含三个部分：符号位，指数位和尾数部分。其中float的符号位，指数位，尾数部分分别为1,  8,  23.     双精度分别为1,  11,  52。<br>​       精度主要取决于尾数部分的位数，float为23位，除去全部为0的情况以外，最小为2的-23次方，约等于1.19乘以10的-7次方，所以float小数部分只能精确到后面6位，加上小数点前的一位，即有效数字为7位。  类似，double 尾数部分52位，最小为2的-52次方，约为2.22乘以10的-16次方，所以精确到小数点后15位，有效位数为16位。</p><h3 id="数据类型之间的运算"><a href="#数据类型之间的运算" class="headerlink" title="数据类型之间的运算"></a>数据类型之间的运算</h3><p>特别情况：byte、short、char三种类型的变量做运算时，结果为int型！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译不通过</span>s<span class="token operator">++</span><span class="token punctuation">;</span> s<span class="token operator">--</span><span class="token punctuation">;</span> s <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等赋值运算符，编译都通过，因为这些运算符不会改变其类型</span></code></pre><h3 id="默认数据类"><a href="#默认数据类" class="headerlink" title="默认数据类"></a>默认数据类</h3><p>整型常量，默认数据类是int型</p><p>浮点类常量，默认类型为double</p><p>char的单引号里面必须放一个字符，即使是空格！！！</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String str  = 123;  看到这个第一反应居然编译通过的？！  wc</p><p>必须得加 “ “ 才是字符串啊！</p><p>String和任何基本数据类型<strong>都不能</strong>自动转化或强制转换，只能调用方法</p><h3 id="取余运算"><a href="#取余运算" class="headerlink" title="%取余运算"></a>%取余运算</h3><p>取余运算的结果是和被模数的符号是一致的</p><h3 id="前-和后"><a href="#前-和后" class="headerlink" title="前++和后++"></a>前++和后++</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token operator">++</span>a1<span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span><span class="token string">"a1 = "</span> a1 <span class="token operator">+</span> <span class="token string">",b1 = "</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//11 11</span><span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b2 <span class="token operator">=</span> a2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span><span class="token string">"a2 = "</span> a2 <span class="token operator">+</span> <span class="token string">",b2 = "</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//11 10 </span><span class="token comment" spellcheck="true">/*记得给b赋完值后a的值也会变化！！！！  错了好几次而且自增不会改变原来的数据类型，+= 也不会改变数据类型*/</span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>&amp;既可以计算布尔型也可以计算数值型，具体看&amp;两边的类型时什么</p><p>（&lt;&lt;） 左移运算符最后面全补0,乘以2的n次方</p><p>（&gt;&gt;）右移运算符补数字的时候是根据原来最高位的值确定的，原来最高位是1就全补1，除以2的n次方</p><p>原来最高位是0就全补0</p><p>（&gt;&gt;&gt;）无符号右移运算符 最前面都补0</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>结合性：当有多种运算符参与运算的时候，先要考虑优先级，有相同优先级的就看结合性以决定运算顺序。</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>结合性</strong></th></tr></thead><tbody><tr><td>[ ] . ( ) (方法调用)</td><td>从左向右</td></tr><tr><td>!  ~(按位取反)  ++  –  +(一元运算)  -(一元运算)</td><td>从右向左</td></tr><tr><td>* / %</td><td>从左向右</td></tr><tr><td>+ -</td><td>从左向右</td></tr><tr><td>&gt; &gt;&gt;&gt;</td><td>从左向右</td></tr><tr><td>&lt; &gt;= instanceof</td><td>从左向右</td></tr><tr><td>== !=</td><td>从左向右</td></tr><tr><td>&amp;</td><td>从左向右</td></tr><tr><td>^</td><td>从左向右</td></tr><tr><td>|</td><td>从左向右</td></tr><tr><td>&amp;&amp;</td><td>从左向右</td></tr><tr><td>||</td><td>从左向右</td></tr><tr><td>?:</td><td>从右向左</td></tr><tr><td>=</td><td>从右向左</td></tr></tbody></table><h3 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//交换变量的值出去定义临时变量的方法外的另外两个方法</span><span class="token comment" spellcheck="true">//还有一种简单的没写</span><span class="token comment" spellcheck="true">//方式一：</span><span class="token comment" spellcheck="true">//好处:不用定义临时变量</span><span class="token comment" spellcheck="true">//弊端: 1.相加操作可能超出存储范围  2. 有局限性，只能交换数值型</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>num1 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>num2 <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>num1 <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式二：</span><span class="token comment" spellcheck="true">//弊端：有局限性，只能交换数值型</span>num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>num2 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span></code></pre><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//12</span><span class="token comment" spellcheck="true">//如果是这样：</span><span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样写最后值的数据类型一定得是可以同时兼容 冒号 左右两边值的数据类型  即 </span><span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">?</span> x <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//120</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">?</span> <span class="token string">'x'</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">?</span> <span class="token string">'x'</span> <span class="token operator">:</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 如果其中有一个是变量，按照自动类型转换规则处理成一致的类型； * 如果都是常量: *      如果一个是char，如果另一个是[0~65535]之间的整数按char处理； *         如果一个是char，另一个是其他，按照自动类型转换规则处理成一致的类型； */</span></code></pre><h3 id="next和nextLine的区别"><a href="#next和nextLine的区别" class="headerlink" title="next和nextLine的区别"></a>next和nextLine的区别</h3><pre class=" language-java"><code class="language-java">区别：<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>读取到有效字符后才可以结束输入，对输入有效字符之前遇到的空格键、Tab键或Enter键等结束符，<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法会自动将其去掉，只有在输入有效字符之后，<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法才开始读入，Enter键表示结束，并且遇到空格键、Tab键就直接结束，后面的内容无效。<span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法的结束符只是Enter键，即<span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回的是Enter键之前的所有字符，它是可以得到带空格的字符串的<span class="token punctuation">.</span>比如：Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>如果在控制台上输入” hello” ，则上方打印出来的是” hello”<span class="token punctuation">,</span>而下方是 “hello”<span class="token punctuation">,</span>自动舍去了有效字符前的空格。</code></pre><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h3><p>switch结构中的表达式，只能是如下的六种数据类型</p><p>  byte、short、char、int、枚举类型、String类型</p><h3 id="求100以内的质数"><a href="#求100以内的质数" class="headerlink" title="求100以内的质数"></a>求100以内的质数</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> whw<span class="token punctuation">.</span>exer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-06-04 17:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimeNumberTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//优化二：对本身是质数的自然数是有效的</span><span class="token comment" spellcheck="true">//            for (int j = 2; j &lt;= Math.sqrt(i); j++) &amp;#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//优化一：对本身是质数的自然数是有效的</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                System.out.println(i);</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所用时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 有输出(sout)：不优化：13645 --->  优化一：1437 ---> 优化二：105* 没有输出(sout) : 不优化:11918  ---> 优化一：1445 ---> 优化二：13** 算法有多重要！！！  知道了吗？*/</span></code></pre><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>​    对象之间最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返</p><p>回值建立的对于其他对象的调用关系。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> B <span class="token function">method</span><span class="token punctuation">(</span>C c<span class="token punctuation">,</span>D d<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    E e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>​        对象之间一种引用关系，比如客户类与订单类之间的关系。这种关系通常使用类的属性表达。</p><p>关联可以有方向，即导航。一般不作说明的时候，导航是双向的，不需要在线上标出箭头。大部分情况下导航是单向的，可以加一个箭头表示。</p><p>​        关联表示类之间的“持久”关系，这种关系一般表示一种重要的业务之间的关系，需要保存</p><p>的，或者说需要“持久化”的，或者说需要保存到数据库中的。另外，依赖表示类之间的是</p><p>一种“临时、短暂”关系，这种关系是不需要保存的.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> eid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//员工编号</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//员工姓名</span>    <span class="token keyword">private</span> Computer coumputer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//员工所使用的电脑</span>    <span class="token comment" spellcheck="true">//....</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>​    聚合（关联关系的一种）：表示 has-a 的关系。与关联关系一样，聚合关系也是通过实例变</p><p>量来实现这样关系的。关联关系和聚合关系来语法上是没办法区分的，从语义上才能更好的</p><p>区分两者的区别。</p><p>如汽车类与引挚类，轮胎类之间的关系就是整体与个体的关系。</p><p>与关联关系一样，聚合关系也是通过实例变量来实现的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引擎</span>    <span class="token keyword">private</span> Tyre<span class="token punctuation">[</span><span class="token punctuation">]</span> tyres<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//轮胎</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>关联和聚集（聚合）的区别：</p><p>​    关联关系所涉及的两个对象是处在同一个层次上的。比如人和自行车就是一种关联关系，而不是聚合关系，因为人不是由自行车组成的。</p><p>​    聚合关系涉及的两个对象处于不平等的层次上，一个代表整体，一个代表部分。比如电脑和</p><p>它的显示器、键盘、主板以及内存就是聚集关系，因为主板是电脑的组成部分。</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>​    对象 A 包含对象 B，对象 B 离开对象 A 没有实际意义。是一种更强的关联关系。人包含手，<br>手离开人的躯体就失去了它应有的作用。<br>​    组合：表示 contains-a 的关系，是一种强烈的包含关系。组合类负责被组合类的生命周期。<br>也使用属性表达组合关系，是关联关系的一种，是比聚合关系强的关系。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span> Menu menu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//菜单</span><span class="token keyword">private</span> Slider slider<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动条</span><span class="token keyword">private</span> Panel panel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工作区</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="继承-泛化"><a href="#继承-泛化" class="headerlink" title="继承(泛化)"></a>继承(泛化)</h3><p>​    类与类的继承关系，类与接口的实现关系</p><p>场景：父与子、动物与人、植物与树</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>  1&gt;两者后面都不能跟其他<strong>任何</strong>语句，throw语句后面也不能</p><p>  2&gt; 默认跳出包裹此关键字最近的一层循环</p><pre class=" language-java"><code class="language-java">label<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//break; 默认跳出包裹此关键字最近的一层循环</span>            <span class="token comment" spellcheck="true">//continue: 同上</span>                        <span class="token keyword">break</span> label<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳出指定表示的一层循环结构</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="native"><a href="#native" class="headerlink" title="native"></a>native</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">native</span> 关键的理解    使用 <span class="token keyword">native</span> 关键字说明这个方法是原生函数，也就是这个方法是用 C<span class="token operator">/</span>C<span class="token operator">++</span> 等非Java 语言实现的，并且被编译成了 <span class="token function">DLL</span><span class="token punctuation">(</span>动态链接库<span class="token operator">:</span>Windows操作系统共享函数库<span class="token punctuation">)</span>，由 java 去调用。（<span class="token number">1</span>）为什么要用 <span class="token keyword">native</span> 方法    java 使用起来非常方便，然而有些层次的任务用 java 实现起来不容易，或者我们对程序的效率很在意时，问题就来了。例如：有时 java 应用需要与 java 外面的环境交互。这是本地方法存在的主要原因，你可以想想 java 需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解 java 应用之外的繁琐的细节。（<span class="token number">2</span>）<span class="token keyword">native</span> 声明的方法，对于调用者，可以当做和其他 Java 方法一样使用    一个 <span class="token keyword">native</span> method 方法可以返回任何 java 类型，包括非基本类型，而且同样可以进行异常控制。<span class="token keyword">native</span> method 的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。JVM 将控制调用本地方法的所有细节。如果一个含有本地方法的类被继承，子类会继承这个本地方法并且可以用 java语言重写这个方法（如果需要的话）。</code></pre><h4 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h4><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token operator">></span> <span class="token keyword">transient</span>的作用及使用方法：     java 的<span class="token keyword">transient</span>关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加    关键字<span class="token keyword">transient</span>，序列化对象的时候，这个属性就不会序列化到指定的目的地中；<span class="token number">2</span><span class="token operator">></span><span class="token keyword">transient</span> 使用小结     <span class="token number">1</span>）一旦变量被<span class="token keyword">transient</span>修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。          <span class="token number">2</span>）<span class="token keyword">transient</span>关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被<span class="token keyword">transient</span>关键字修饰的。       变量如果是用户自定义类变量，则该类需要实现Serializable接口。          <span class="token number">3</span>）被<span class="token keyword">transient</span>关键字修饰的变量不再能被序列化，一个静态变量不管是否被<span class="token keyword">transient</span>修饰，均不能被序列        化。     <span class="token number">3</span><span class="token operator">></span>被<span class="token keyword">transient</span>关键字修饰的变量也是能被序列化     若实现的是Externalizable接口，则没有任何东西可以自动序列化，需要在writeExternal方法中进行手工指    定所要序列化的变量，这与是否被<span class="token keyword">transient</span>修饰无关。</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="杨辉三角-面试常考"><a href="#杨辉三角-面试常考" class="headerlink" title="杨辉三角(面试常考)"></a>杨辉三角(面试常考)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YangHuiTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//1.声明并初始化二位数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yangHui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//2.给数组元素赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> yangHui<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.1给首末元素赋值</span>        yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.2给每行的非首末元素赋值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> yangHui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>yangHui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yangHui<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 打印空格字符串</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>yangHui<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>           number <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//或者：</span><span class="token comment" spellcheck="true">//         int num = yangHui.length - i;</span><span class="token comment" spellcheck="true">//            for (int j = 0; j &lt;= num; j++) &amp;#123;</span><span class="token comment" spellcheck="true">//                System.out.print(" ");</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//            for (int j = 0; j &lt; yangHui[i].length; j++) &amp;#123;</span><span class="token comment" spellcheck="true">//                System.out.print(yangHui[i][j] + " ");</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//            System.out.println();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="回形数"><a href="#回形数" class="headerlink" title="回形数"></a>回形数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectangleTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> len <span class="token operator">*</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * k = 1:向右 k = 2:向下 k = 3:向左 k = 4:向上         */</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> s<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectangleTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要显示的数据</span>        <span class="token keyword">int</span> maxX <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x轴的最大下标</span>        <span class="token keyword">int</span> maxY <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Y轴的最大下标</span>        <span class="token keyword">int</span> minX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x轴的最小下标</span>        <span class="token keyword">int</span> minY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Y轴的最小下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>minX <span class="token operator">&lt;=</span> maxX<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> minX<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> maxX<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>minY<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            minY<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> minY<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> maxY<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>maxX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            maxX<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> maxX<span class="token punctuation">;</span> x <span class="token operator">>=</span> minX<span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>maxY<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            maxY<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> maxY<span class="token punctuation">;</span> y <span class="token operator">>=</span> minY<span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>minX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            minX<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String space <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>space <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-06-05 0:35 */</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErFen</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//二分法查找</span>        <span class="token comment" spellcheck="true">//前提：所要查找的数组必须有序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dest1 <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>dest1 <span class="token operator">==</span> arr2<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到指定元素，位置为:"</span> <span class="token operator">+</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>              isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> dest1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              head <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，没找到!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="数组工具类常用方法"><a href="#数组工具类常用方法" class="headerlink" title="数组工具类常用方法"></a>数组工具类常用方法</h3><table><thead><tr><th>1</th><th>boolean equals(int[] a, int[] b)</th><th>判断两个数组是否相等</th></tr></thead><tbody><tr><td>2</td><td>String toString(int[] a)</td><td>输出数组信息</td></tr><tr><td>3</td><td>void fill(Object[] a, Object val)</td><td>用指定值替换原数组</td></tr><tr><td>4</td><td>void sort(int[] a)</td><td>对数组进行排序</td></tr><tr><td>5</td><td>int binarySearch(int[] a, int key)</td><td>对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="算法排序比较图"><a href="#算法排序比较图" class="headerlink" title="算法排序比较图"></a>算法排序比较图</h3><table><thead><tr><th>排序方式</th><th>时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td></td><td>平均情况      最坏情况       最好情况</td><td></td><td></td></tr><tr><td>插入排序</td><td>O(n²)                O(n²)                O(n)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n^1.3)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>冒泡排序</td><td>O(n²)                O(n²)                O(n)</td><td>O(1)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlog2n)       O(n²)                O(nlog2n)</td><td>O(nlog2n)</td><td>不稳定</td></tr><tr><td>选择排序</td><td>O(n²)                O(n²)                O(n²)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlog2n)      O(nlog2n)        O(nlog2n)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(nlog2n)      O(nlog2n)        O(nlog2n)</td><td>O(n)</td><td>稳定</td></tr></tbody></table><p>以上所有log2n中的2是角标</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> array<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataWrap</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>DataWrap<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    String flag<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DataWrap</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">,</span>String flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data <span class="token operator">+</span> flag<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据data实例变量来决定两个dataWrap的大小</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>DataWrap dw<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">></span> dw<span class="token punctuation">.</span>data<span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">==</span> dw<span class="token punctuation">.</span>data<span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>array<span class="token punctuation">.</span>sort2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 冒泡排序 * @author shkstart * 2018-12-17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>DataWrap<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> arrayLength <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arrayLength <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    DataWrap temp <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DataWrap<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之前：\n"</span> <span class="token operator">+</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之后：\n"</span> <span class="token operator">+</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> array<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 快速排序 * @author 王瀚文 * 2018-12-17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>DataWrap<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DataWrap temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subSort</span><span class="token punctuation">(</span>DataWrap<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            DataWrap base <span class="token operator">=</span> data<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> start <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>DataWrap<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DataWrap<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之前：\n"</span> <span class="token operator">+</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之后：\n"</span> <span class="token operator">+</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>还得清楚<strong>堆排序、归并排序</strong>并且会写代码，面试题出现过</p><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p><strong>GC是什么? 为什么要有GC</strong></p><p>​        答：GC是垃圾收集的意思（Garbage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法</p><p>​    垃圾回收机制回收任何对象之前，总会先调用它的finalize方法（如果覆盖该方法，让一个新的引用变量重新引用该对象，则会重新激活对象）。</p><p>​    永远不要主动调用某个对象的finalize方法，应该交给垃圾回收机制调用。</p><p><strong>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收</strong></p><p>​        对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用<strong>有向图</strong>的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是”可达的”，哪些对象是”不可达的”。</p><p>当GC确定一些对象为”不可达”时，GC就有责任回收这些内存空间。</p><p>可以。程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行，只是加快垃圾回收机制的运行。</p><p>​    可以将对象的引用变量设置为null，暗示垃圾回收机制可以回收该对象。</p><p>​    Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的</p><h2 id="面向对象-上"><a href="#面向对象-上" class="headerlink" title="面向对象(上)"></a>面向对象(上)</h2><h3 id="×××什么是面向对象×××"><a href="#×××什么是面向对象×××" class="headerlink" title="×××什么是面向对象×××"></a>×××什么是面向对象×××</h3><p>   面向对象是相对于面向过程而言的，面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</p><h3 id="对象和类的关系"><a href="#对象和类的关系" class="headerlink" title="对象和类的关系"></a>对象和类的关系</h3><p>​    类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。类是用于创建对象的蓝图，它是一个定义包括在特定类型的对象中的方法和变量的软件模板。<br>​    类的实例化结果就是对象，而对一类对象的抽象就是类，类描述了一组有相同属性和相同方法的对象。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>​    局部变量<strong>没有</strong>默认值，意味着在局部变量调用之前，一定要显示赋值。且存放在栈空间中</p><p>   属性(成员变量），加载到堆空间(非static)，有默认值。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><pre class=" language-java"><code class="language-java">成员内部类：   一方面，作为外部类的成员：     <span class="token operator">></span> 调用外部类的结构     <span class="token operator">></span> 可以被<span class="token keyword">static</span>修饰     <span class="token operator">></span> 可以被四种不同的权限修饰      另一方面，作为一个类：     <span class="token operator">></span> 类内可以定义属性、方法、构造器等     <span class="token operator">></span> 可以被<span class="token keyword">final</span>修饰，表示此类不能被继承，不使用就可以被继承     <span class="token operator">></span> 可以<span class="token keyword">abstract</span>修饰        <span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Dog的实例(静态的成员内部类)</span>        Person<span class="token punctuation">.</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Bird实例非静态的</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>Bird bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string">"黄鹂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String name <span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//静态成员内部类</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> <span class="token string">"锋哥"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> age<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡拉是条狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//非静态成员内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> <span class="token string">"杜鹃鸟"</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只小小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Person<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用外部类的非静态的属性</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法的形参</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部类的属性</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部类属性</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="理解万事万物皆对象"><a href="#理解万事万物皆对象" class="headerlink" title="理解万事万物皆对象"></a>理解万事万物皆对象</h3><ol><li><p>在Java语言的范畴中，我们都将功能。结构等封装到类中，通过类的实例化，来调用具体的功能结构。</p><p>   ① Scanner, String等</p><p>   ② 文件 File</p><p>   ③ 网络资源 URL        </p><p>   ④ 一个类也是</p></li><li><p>涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</p></li><li><p>项目对象模型，文档对象模型。</p></li></ol><h3 id="方法的值传递"><a href="#方法的值传递" class="headerlink" title="方法的值传递"></a>方法的值传递</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> exer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-06-05 20:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransferTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TransferTest transferTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransferTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transferTest<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//15 0 20</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        Value v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token function">second</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span>Value v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        Value val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> val<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Value</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>   高内聚：类的内部数据操作细节自己完成，不允许外部干涉</p><p>   低耦合：仅对外部暴露少量的方法用于使用</p><p><strong>封装性</strong>：指内部的结构对外不可见</p><h4 id="封装性的体现"><a href="#封装性的体现" class="headerlink" title="封装性的体现"></a>封装性的体现</h4><p>​    1&gt;我们将类的属性xxx私有化(private),同时，提供公共(public)方法来获取(getXxx)和设置(setXxx)此属性的值。</p><p>​    2&gt; 不对外暴露的私有的方法 </p><p>​    3&gt; 单例模式(私有化构造器)    等等</p><p>​        <strong>封装性的体现不等同于封装性</strong></p><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>yes</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>yes</td><td>yes</td><td></td><td></td></tr><tr><td>protected</td><td>yes</td><td>yes</td><td>yes</td><td></td></tr><tr><td>public</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table><p>权限修饰符<strong>不能修饰代码块</strong></p><p><strong>类只能被  缺省  和   public修饰</strong></p><p>如果使用的类或接口是java.lang包下定义的，则可以省略import</p><p>局部变量前不能放置任何访问修饰符 (private，public，和protected)。</p><h2 id="面向对象-中"><a href="#面向对象-中" class="headerlink" title="面向对象(中)"></a>面向对象(中)</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h4><p>①：减少了代码的冗余</p><p>②： 便于功能扩展</p><p>③： 为之后的多态性提供了前提</p><h4 id="继承的体现"><a href="#继承的体现" class="headerlink" title="继承的体现"></a>继承的体现</h4><p> 继承发生以后，子类就获取了父类中<strong>所有</strong>的方法和属性，构造器是不能被继承的。</p><p>特别的:父类中声明为private的属性或方法，子类继承父类以后，任然认为获取到了父类中私有的结构，只不过是因为封装性的影响，使得子类不能直接调用父类的结构而已</p><h4 id="方法重写的规定"><a href="#方法重写的规定" class="headerlink" title="方法重写的规定"></a>方法重写的规定</h4><h5 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h5><p>​              方法的   <strong>方法名 +  形参列表</strong></p><h5 id="权限修饰符-1"><a href="#权限修饰符-1" class="headerlink" title="权限修饰符"></a>权限修饰符</h5><p>子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><p>​        子类<strong>不能重写</strong>父类中声明为private的方法，如果有一个和父类中的同名方法，则此方法是子类中的一个新的方法，和父类中的同名方法没有任何关系</p><h5 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h5><p>父类中被重写的方法的返回值类型是<strong>引用数据类型</strong>A类型，则子类重写的方法的返回值类型可以是A类或者A类的子类</p><p>父类中被重写的方法的返回值类型是<strong>基本数据类型</strong>A类型，则子类重写的方法的返回值类型必须是相同的数据类型</p><h5 id="异常的类型"><a href="#异常的类型" class="headerlink" title="异常的类型"></a>异常的类型</h5><p>  子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><h5 id="有关static的注意点"><a href="#有关static的注意点" class="headerlink" title="有关static的注意点"></a>有关static的注意点</h5><p>子类和父类中的同名同参数的方法要么都声明为非static的(才可以考虑是否重写)，要么都是static的(不可以重写)。</p><p>如果子类想写与父类中的静态方法，则子类的方法也必须得是静态的，不过这就不是重写了，而是成了子类中的一个新的方法，就与父类的静态方法没关系了。</p><p>子类也可以继承父类中的static方法，可以直接  子类调用静态方法，此时调用的是父类中的static方法，但是一旦子类中有和的父类同名的静态方法，则子类调用时就是执行自己的静态方法，而不是父类的了。</p><p><strong>extends 只能放在implements后面</strong></p><h4 id="子类对象实例化的过程"><a href="#子类对象实例化的过程" class="headerlink" title="子类对象实例化的过程"></a>子类对象实例化的过程</h4><p>从过程来看  ：</p><p>​        当通过子类的构造器创建子类对象时，一定会直接或者间接的调用其父类的构造器，进而调用父类的构造器，直到调用了java.lang.Object类中的空参构造器为止。正因为加载过所有的父类的结构，所有才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用</p><p>  明确：虽然创建子类对象时：调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象，没有new就没有创建</p><h3 id="多态-polymorphic"><a href="#多态-polymorphic" class="headerlink" title="多态(polymorphic)"></a>多态(polymorphic)</h3><p> 帕里摩尔fie克</p><p>向上转型就是多态</p><p>一个事物的多个形态   父类的引用指向子类的对象</p><p>多态性使用的前提  1&gt; 继承性  2&gt; 子类重写了父类的方法</p><p>用处：可以省去重载方法的设计，只需要设计一个方法，其参数是父类就可以，比如Object中的equals(Objec object)  方法，用的时候只需要传入当前类就可以。</p><p><strong>注意：</strong></p><p>​        有了对象多态性以后，内存中实际上加载了子类和父类所有的属性和方法，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法，子类特有的属性和方法不能调用</p><p>​       如何调用子类特有的属性和方法？</p><p>   使用强制类型转换符</p><p><strong>强转：</strong></p><p>​        内存中的地址值有两部分：<strong>类型 +  @  +   具体的地址</strong></p><p>因为有类型的限制，直接赋值时不行的，但加上强制类型转换符就可以把地址值中的类型 变成 想要转成的类型</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>如果 a   instanceof   A返回true，则a    instanceof    B 也返回true。其中B是A 的父类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 练习： * 1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法， * 系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边 *  * 2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量， * 这个实例变量依然不可能覆盖父类中定义的实例变量：编译运行都看左边 *  */</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldMethodTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Sub s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span>        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span>                Base b <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多态性</span>        <span class="token comment" spellcheck="true">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20  做的时候出错了</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="可变形参"><a href="#可变形参" class="headerlink" title="可变形参"></a>可变形参</h3><p> int… arr  与   int[] arr  是一个意思，都代表可变形参，只不过形式不同而已</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考查多态的笔试题目：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Base1 base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sub_1  </span>        Sub1 s <span class="token operator">=</span> <span class="token punctuation">(</span>Sub1<span class="token punctuation">)</span>base<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sub_2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub1</span> <span class="token keyword">extends</span> <span class="token class-name">Base1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与父类的add()构成重载</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="==运算符"></a>==运算符</h3><p>用==运算符比较八种基本数据类型时，除了boolean以外，其他类型两两比较时，只要数值相等，就返回true</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>d <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>c <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span> x <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true+</span><span class="token comment" spellcheck="true">/*==符号使用时，必须保证符号两边的类型必须一致    比如：两边都是基本数据类型(boolean除外)，         两边都是同一个引用类型。      否则报错。*/</span></code></pre><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>比较之前最好先判断x是否是null。</p><p>x.equals(null)   永远是false。</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><pre class=" language-java"><code class="language-java">  <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 包装类的使用: * 1.java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征 *  * 2.掌握的：基本数据类型、包装类、String三者之间的相互转换 *  *  *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String类型 --->基本数据类型、包装类：调用包装类的parseXxx(String s)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//错误的情况：</span><span class="token comment" spellcheck="true">//        int num1 = (int)str1;</span><span class="token comment" spellcheck="true">//        Integer in1 = (Integer)str1;</span>        <span class="token comment" spellcheck="true">//可能会报NumberFormatException</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String str2 <span class="token operator">=</span> <span class="token string">"true1"</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fales</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基本数据类型、包装类--->String类型：调用String重载的valueOf(Xxx xxx)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式1：连接运算</span>        String str1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式2：调用String的valueOf(Xxx xxx)</span>        <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">12.3f</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"12.3"</span>                Double d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"12.4"</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*     * JDK 5.0 新特性：自动装箱 与自动拆箱     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        int num1 = 10;</span><span class="token comment" spellcheck="true">//        //基本数据类型-->包装类的对象</span><span class="token comment" spellcheck="true">//        method(num1);</span>                <span class="token comment" spellcheck="true">//自动装箱：基本数据类型 --->包装类</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Integer in1 <span class="token operator">=</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动装箱</span>                <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Boolean b2 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动装箱</span>                <span class="token comment" spellcheck="true">//自动拆箱：包装类--->基本数据类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num3 <span class="token operator">=</span> in1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动拆箱</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//包装类--->基本数据类型:调用包装类的XxxValue()</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Integer in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i1 <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Float f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f2 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基本数据类型 --->包装类：调用包装类的构造器</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(num1.toString());</span>        Integer in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer in2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//报异常</span><span class="token comment" spellcheck="true">//        Integer in3 = new Integer("123abc");</span><span class="token comment" spellcheck="true">//        System.out.println(in3.toString());</span>                Float f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Float f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token string">"12.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>                Boolean b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"TrUe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"true123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>                        Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>isFemale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    Boolean isFemale<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="错题"><a href="#错题" class="headerlink" title="错题"></a>错题</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>                <span class="token comment" spellcheck="true">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span>        <span class="token comment" spellcheck="true">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span>        <span class="token comment" spellcheck="true">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span>                Integer m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Integer n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Integer x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于new了一个Integer对象</span>        Integer y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于new了一个Integer对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。    提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。    而向量类java.util.Vector可以根据需要动态伸缩。        创建Vector对象：Vector v=new Vector();    给向量添加元素：v.addElement(Object obj);   //obj必须是对象    取出向量中的元素：Object  obj=v.elementAt(0);    注意第一个元素的下标是0，返回值是Object类型的。    计算向量的长度：v.size();    若与最高分相差10分内：A等；20分内：B等；          30分内：C等；其它：D等  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScoreTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.实例化Scanner，用于从键盘获取学生成绩</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.创建Vector对象：Vector v=new Vector();相当于原来的数组</span>        Vector v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.通过for(;;)或while(true)方式，给Vector中添加数组</span>        <span class="token keyword">int</span> maxScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生成绩（以负数代表输入结束）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> score <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.2 当输入是负数时，跳出循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据非法，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.1 添加操作：：v.addElement(Object obj)</span>            <span class="token comment" spellcheck="true">//jdk5.0之前：</span><span class="token comment" spellcheck="true">//            Integer inScore = new Integer(score);</span><span class="token comment" spellcheck="true">//            v.addElement(inScore);//多态</span>            <span class="token comment" spellcheck="true">//jdk5.0之后：</span>            v<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动装箱</span>            <span class="token comment" spellcheck="true">//4.获取学生成绩的最大值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">&lt;</span> score<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//5.遍历Vector，得到每个学生的成绩，并与最大成绩比较，得到每个学生的等级。</span>        <span class="token keyword">char</span> level<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//jdk 5.0之前：</span><span class="token comment" spellcheck="true">//            Integer inScore = (Integer)obj;</span><span class="token comment" spellcheck="true">//            int score = inScore.intValue();</span>            <span class="token comment" spellcheck="true">//jdk 5.0之后：</span>            <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                level <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                level <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                level <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                level <span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student-"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> score <span class="token operator">+</span> <span class="token string">",level is "</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="面向对象-下"><a href="#面向对象-下" class="headerlink" title="面向对象(下)"></a>面向对象(下)</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static修饰的属性，称作静态变量或类变量，存放在方法区的静态域中  </p><p>静态方法内不能使用this、super。</p><p>操作静态属性的方法一般也是静态的</p><p>类的五个成员除了构造器都可以修饰</p><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 单例设计模式： * 1. 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。 *  * 2. 如何实现？ *      饿汉式  vs 懒汉式 *  * 3. 区分饿汉式 和 懒汉式 *   饿汉式：     *       坏处：对象加载时间过长。 *       好处：饿汉式是线程安全的 *    *   懒汉式：好处：延迟对象的创建。 *           目前的写法坏处：线程不安全。--->到多线程内容时，再修改 *  *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Bank bank1 = new Bank();</span><span class="token comment" spellcheck="true">//        Bank bank2 = new Bank();</span>                Bank bank1 <span class="token operator">=</span> Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bank bank2 <span class="token operator">=</span> Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//饿汉式</span><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.私有化类的构造器</span>    <span class="token keyword">private</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.内部创建类的对象</span>    <span class="token comment" spellcheck="true">//4.要求此对象也必须声明为静态的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Bank instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.提供公共的静态的方法，返回类的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Bank <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 单例模式的懒汉式实现 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Order order1 <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Order order2 <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1 <span class="token operator">==</span> order2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.私有化类的构造器</span>    <span class="token keyword">private</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.声明当前类对象，没有初始化</span>    <span class="token comment" spellcheck="true">//4.此对象也必须声明为static的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Order instance <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.声明public、static的返回当前类对象的方法</span>   <span class="token comment" spellcheck="true">//双检锁</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Order <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">synchronized</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     </code></pre><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p> main()方法也可以做为与控制台交互的方式。(以前是用Scanner)</p><p>方法： cmd中类运行的时候传入参数    java + 类名 + 直接跟参数，就把参数传入到了main() 方法的String[] args里面</p><pre class=" language-java"><code class="language-java">cmd中    javac mainTest<span class="token punctuation">.</span>java<span class="token punctuation">;</span>    java mainTest <span class="token string">"34"</span> <span class="token string">"345"</span> <span class="token string">"75"</span><span class="token punctuation">;</span></code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块找中有输出语句会直接输出，不需要类或对象的调用</p><p>静态代码块随着类的加载而执行，而且只执行一次，作用，初始化类信息，可以定义多个，执行顺序与声明顺序一致，并且优先于非静态</p><p>非静态代码块随着对象的创建而执行，而且每创建一个对象就执行一次，作用是可以在创建对象时，对对象的属性等进行初始化，可以定义多个，执行顺序与声明顺序一致</p><h3 id="xxx例题xxx"><a href="#xxx例题xxx" class="headerlink" title="xxx例题xxx"></a>xxx例题xxx</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总结：由父及子，静态先行</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Mid</span> <span class="token keyword">extends</span> <span class="token class-name">Root</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Mid</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过this调用同一类中重载的构造器</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的带参数构造器，其参数值："</span>            <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Mid</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过super调用父类中有一个字符串参数的构造器</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"王瀚文 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeafTest</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java3<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11111111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"22222222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"33333333333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"44444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"55555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"66666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由父及子 静态先行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"77777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//147*2356</span></code></pre><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final修饰属性，可以考虑赋值的位置有：显示初始化，代码块中初始化，构造器中初始化</p><p>final修饰局部变量：</p><p>​        尤其是使用final修饰形参时，表明此形参是一个常量，当我们调用此方法时，给常量形参赋一个参数，一旦以后赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>虽然抽象类不能实例化，但是是有构造器的，是为了让子类继承的时候用。</p><p>abstract不能用来修饰属性，构造器等结构</p><p>abstract不能用来修饰私有方法、静态方法、final的方法、final的类</p><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>接口中不能定义构造器，意味着不能实例化</p><p>类实现多个接口时，接口之间用逗号隔开</p><p>接口不能实现接口，能<strong>多继承</strong>接口</p><p><strong>体会 面向接口编程</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java1<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译不通过。因为x是不明确的</span>        <span class="token comment" spellcheck="true">// System.out.println(x);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">有关接口的知识点    <span class="token number">1</span><span class="token punctuation">.</span>接口中定义的静态方法，只能通过实现接口来调用，不能向继承那样，由接口的实现类调用；    <span class="token number">2</span><span class="token punctuation">.</span>通过实现类的对象，可以调用接口中的默认方法，如果实现类重写了接口中的默认方法，调用时仍然调用的是重写以后的方法；    <span class="token number">3</span><span class="token punctuation">.</span>如果子类<span class="token punctuation">(</span>或实现类<span class="token punctuation">)</span>继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>类优先原则<span class="token punctuation">(</span>仅限于方法，属性不行<span class="token punctuation">)</span>；    <span class="token number">4</span><span class="token punctuation">.</span>如果实现类实现了多接口，而且多个接口中定义类同名同参数的方法，那么在实现类没有重写的情况下，报错。<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>接口冲突；    <span class="token number">5</span><span class="token punctuation">.</span>怎么在子类中调用父类、接口中被重写的方法<span class="token punctuation">;</span>    父类<span class="token punctuation">(</span>接口<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span>方法名</code></pre><p>内部类</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/* * 1.内部类的分类：成员内部类（静态、非静态）  vs 局部内部类(方法内、代码块内、构造器内) *  * 2.成员内部类： *         一方面，作为外部类的成员： *             >调用外部类的结构 *             >可以被static修饰 *             >可以被4种不同的权限修饰 *  *         另一方面，作为一个类： *             > 类内可以定义属性、方法、构造器等 *             > 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承 *             > 可以被abstract修饰 *  *  * 3.关注如下的3个问题 *   3.1 如何实例化成员内部类的对象 *   3.2 如何在成员内部类中区分调用外部类的结构 *   3.3 开发中局部内部类的使用 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建Dog实例(静态的成员内部类):</span>        Person<span class="token punctuation">.</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Bird实例(非静态的成员内部类):</span><span class="token comment" spellcheck="true">//        Person.Bird bird = new Person.Bird();//错误的</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>Bird bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bird<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string">"黄鹂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//静态成员内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String name<span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡拉是条狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            eat();</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非静态成员内部类</span>    <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token string">"杜鹃"</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只小小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Person<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用外部类的非静态属性</span>            <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法的形参</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部类的属性</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部类的属性</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">BB</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">CC</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//开发中很少见</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回一个实现了Comparable接口的类的对象</span>    <span class="token keyword">public</span> Comparable <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建一个实现了Comparable接口的类:局部内部类</span>        <span class="token comment" spellcheck="true">//方式一：</span><span class="token comment" spellcheck="true">//        class MyComparable implements Comparable&amp;#123;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public int compareTo(Object o) &amp;#123;</span><span class="token comment" spellcheck="true">//                return 0;</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//            </span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        return new MyComparable();</span>                <span class="token comment" spellcheck="true">//方式二：</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>程序在执行过程中，一旦出现异常，就会在异常出生成一个对应异常类的对象，并将此对象抛出，由try-catch-finally或者throws捕获。</p><p>如果父类的方法没有抛异常，则子类重写的方法是不能抛异常的，只能是try-catch。</p><p><strong>常见的编译时异常：</strong></p><p>​    NoSuchMethodException：反射找方法时找不到会报此异常。</p><p>​     FileNotFoundException：加载配置文件找不到，属于IO异常的子类</p><p>​    XPathException</p><p>​    IOException</p><p>   SQLException</p><p>   IllegalClassFormatException</p><p>   ExecutionException</p><p>   InterruptedException：线程中调用Thread.sleep()是会捕获这个异常</p><p>   InstantiationException：clazz.newInstance();时抛出的</p><p>   ServletException</p><p>常见的运行时异常：</p><p>​    XPathException</p><p>​    IllegalThreadException</p><p>​    NoSuchElementException： iterator.next()的时候如果没有下一个元素时报此异常</p><p>​    StringIndexOutOfBoundsException</p><p>​    ArrayIndexOutOfBoundsException</p><p>​    IllegalArgumentException</p><p>​    NoSuchElementException</p><p>​    NotSerializeableException：类没有实现序列化接口</p><p>​    NumberFormatException ： Integer.parseInt(string); 这里的string如果不是纯数字的字符串就会报错</p><p>​    ConcurrentModificationException： java.util.HashMap不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了 map，那么将抛出 ConcurrentModificationException，这就是所谓fail-fast策略</p><p>   IllegalThreadStateException ： 同一个线程启动了两次</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>一个java应用程序中至少有 ：</p><p>两个：</p><ul><li><p><code>主线程</code>：负责main方法代码的执行，</p></li><li><p><code>垃圾回收器线程</code>：负责了回收垃圾。</p></li></ul><p>一个继承了Thread的子类对象只能调用一次start()方法。否则异常IllegalThreadStateException</p><pre class=" language-java"><code class="language-java"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//①启动线程  ②调用当前线程的run()方法，是当前线程！</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程让步，暂停当前线程，把执行机会让给优先级相同或者更高的线程,和sleep()一样不会释放锁</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment" spellcheck="true">//当某个程序执行流中调用其他线程的join()方法时，调用线程即(本线程)将被阻塞，直到join()方法加入的join线程执行完为止</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法，返回执行当前代码的线程</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让线程死亡</span>释放该线程所持有的所有的锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>后导致了该线程所持有的所有锁的突然释放<span class="token punctuation">(</span>不可控制<span class="token punctuation">)</span>，那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些应用程序错误。   </code></pre><p>线程优先级：MAX_PRIORITY: 10</p><p>​                       MIN_PRIORITY: 1</p><p>​                       NORM_PRIORITY: 5</p><p>getPriority()：返回线程优先级</p><p>setPriority()：改变线程优先级</p><p>优先级的高低只是从概率上来说的，并不是你优先级高就一定在优先级低的前面执行        </p><p>继承Thread和实现Runnable这两种方式的比较<br>        开发中 优先选择，实现Runnable接口的方式<br>        原因 1.实现的方式没有类的单继承性的局限性<br>                2. 实现的方式更适合来处理多个线程有共享数据的情况<br>    联系 public class Thread implements Runnable<br>    相同点 两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</p><p>使运行期到阻塞期的方法： sleep(long time)、join()、等待同步锁、wait()</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>  在对继承Thread的类加同步代码块的时候，一定要注意<strong>充当锁的对象是static</strong>的或者用<strong>当前类.class</strong>充当锁</p><p>​                                      加同步方法的时候，一定要给同步方法加static，同步锁是<strong>当前类.class</strong></p><p>实现了Runnable接口的实现类的同步代码块和同步方法都可以使当前对象，也可以是新new的任何类的对象</p><p>非静态的同步方法，同步监视器是当前对象</p><p>静态同步方法，同步监视器是当前类.class</p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>Lock是一个接口。和condition配合用，精准通知，精准唤醒</p><p>synchronized和Lock的异同？</p><p>​       相同：都可以解决线程安全问题</p><p>​      不同：</p><p>​            synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</p><p>​            Lock需要手动的启动和结束同步。如果没有主动的释放锁，就会可能导致出现死锁的现象</p><p>​            synchronized是关键字，Lock是接口</p><p>Lock接口在多线程和并发编程中最大的优势是它们分别为读和写提供了锁</p><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>可重入锁：最大的作用是避免死锁。</p><p>ReentrantLock支持两种获取锁的方式，一种是公平模型，一种是非公平模型</p><p>公平锁  ：</p><p>​    初始化时， state=0，表示无人抢占了cpu。这时候，(A线程请求锁，占用资源，把state+1，线程A取得了锁，把 state原子性+1,这时候state被改为1，A线程继续执行其他任务，然后线程B请求锁，线程B无法获取锁，生成节点进行排队。初始化的时候，会生成一个空的头节点，然后才是B线程节点，这时候，如果线程A又请求锁，是否需要排队？答案当然是否定的，否则就直接死锁了。当A再次请求锁时是有特权的，如果又获取了锁，状态值加一，释放锁状态值减一。当状态值减到0了，其他线程才有机会获取锁。当A把锁完全释放后，state恢复为0，然后会通知队列唤醒B线程节点，使B可以再次竞争锁。当然，如果B线程后面还有C线程，C线程继续休眠，除非B执行完了，通知了C线程。注意，当一个线程节点被唤醒然后取得了锁，对应节点会从队列中删除。</p><p>非公平锁：</p><p>​    当线程A执行完之后，要唤醒线程B是需要时间的，而且线程B醒来后还要再次竞争锁，所以如果在切换过程当中，来了一个线程C，那么线程C是有可能获取到锁的，如果C获取到了锁，B就只能继续休眠了。</p><p>​    </p><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p>1.wait()，notify()，notifyAll()三个方法<strong>必须使用</strong>在同步代码块或同步方法中。</p><p>2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</p><p>​     否则，会出现IllegalMonitorStateException异常</p><p>3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</p><p>​    notify：通知等待排在第一顺序的线程获得锁进入就绪状态</p><p>​    notifyAll：唤醒全部，优先级高的线程获得锁的概率大</p><p>面试题：sleep() 和 wait()的异同</p><p>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p><p>2.不同点;1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</p><p>​                2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</p><p>​                3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，                wait()会释放锁。</p><h3 id="callable"><a href="#callable" class="headerlink" title="callable"></a>callable</h3><p>需要借助  FutureTask 接口，来和Tnread建立关系</p><p>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p><p>​        1.call()可以有返回值的。</p><p>​        2.call()可以抛出异常，被外面的操作捕获，获取异常的信息</p><p>​        3.Callable是支持泛型的</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>好处： </p><p>1.提高响应速度（减少了创建新线程的时间）</p><p>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p>3.便于线程管理</p><p>​        corePoolSize：核心池的大小</p><p>​        maximumPoolSize：最大线程数</p><p>​        keepAliveTime：线程没有任务时最多保持多长时间后会终止</p><p>特点：  线程复用，控制最大并发数，管理线程</p><p>newCachedThreadPool  创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>newFixedThreadPool  创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。</p><p>newSingleThreadExecutor  创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO,优先级)执行。</p><p>newScheduledThreadPool  创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。</p><h3 id="线程池创建："><a href="#线程池创建：" class="headerlink" title="线程池创建："></a>线程池创建：</h3><p>​      1、在创建了线程池后，开始等待请求。2、当调用execute()方法添加一个请求任务时，线程池会做出如下判断： 2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务； 2.2如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列； 2.3如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务； 2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。3、当一个线程完成任务时，它会从队列中取下一个任务来执行。4、当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：  如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。  所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。    </p><p>不允许使用Executors去创建，而是通过ThreadPoolExecutor的方法，可以避免请求队列长度为Integer.MAX_VALUE和允许创建的线程数量为Integer.MAX_VALUE引起的oom</p><p>AbortPolicy：直接抛出 java.util.concurrent.RejectedExecutionException异常</p><p>CallerRunsPolicy：将任务返还给调用者线程执行</p><p>DiscardPolicy：直接抛弃无法处理的任务，不予处理不抛异常。如果业务汇总允许任务丢失，这是最好的策略</p><p>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务</p><h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><h3 id="核心包："><a href="#核心包：" class="headerlink" title="核心包："></a>核心包：</h3><p>并发包</p><p>并发原子包</p><p>并发locks包</p><h3 id="什么是进程-线程"><a href="#什么是进程-线程" class="headerlink" title="什么是进程/线程"></a>什么是进程/线程</h3><p>​        进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p><p>​         线程：轻量级的进程，依附于某个进程上，共享这个线程所拥有的内存资源。通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。</p><p>   线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。 </p><h3 id="并发-并行"><a href="#并发-并行" class="headerlink" title="并发/并行"></a>并发/并行</h3><p>并发：同一时刻多个线程在访问同一个资源，多个线程对一个点</p><p>并行：多项工作一起执行，之后再汇总</p><h3 id="高内聚低耦合"><a href="#高内聚低耦合" class="headerlink" title="高内聚低耦合"></a>高内聚低耦合</h3><p>​    高内聚就是指一个模块是否是高度的聚集和关联，与其他模块之间的关系是否简单明了并且没有很强的关系</p><p>​    低耦合是对模块间关联程度的度量</p><pre class=" language-java"><code class="language-java"> 是判断软件设计好坏的标准，主要用于程序的面向对象的设计，主要看类的内聚性是否高，耦合度是否低。目的是使程序模块的可重用性、移植性大大增强。</code></pre><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>NEW(新建)、RUNNABLE(就绪、运行)、 BLOCKED(阻塞) 、WAITING(一直等) 、TIMED_WAITING(等待一段时间) 、TERMINATED(死亡，终止)</p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h3><p>​        String的内存解析具体的看常用类那一章的PDF第十页</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回字符串的长度： <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>： 返回某索引处的字符<span class="token keyword">return</span> value<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断是否是空字符串：<span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span>  String <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：使用默认语言环境，将 String 中的所有字符转换为小写String <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：使用默认语言环境，将 String 中的所有字符转换为大写String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回字符串的副本，忽略前导空白和尾部空白<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>：比较字符串的内容是否相同<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span>：与equals方法类似，忽略大小写String <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：将指定字符串连接到此字符串的结尾。 等价于用“<span class="token operator">+</span>”  <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span>：比较两个字符串的大小String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span>：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。  String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> ：返回一个新字符串，它是此字符串从beginIndex开始截取到<span class="token function">endIndex</span><span class="token punctuation">(</span>不包含<span class="token punctuation">)</span>的一个子字符串。   <span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span>：测试此字符串是否以指定的后缀结束<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span>：测试此字符串是否以指定的前缀开始<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始      <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span>：当且仅当此字符串包含指定的 <span class="token keyword">char</span> 值序列时，返回 <span class="token boolean">true</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：返回指定子字符串在此字符串中第一次出现处的索引<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：返回指定子字符串在此字符串中最右边出现处的索引<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索注：indexOf和lastIndexOf方法如果未找到都是返回<span class="token operator">-</span><span class="token number">1</span>   String <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 String <span class="token function">replace</span><span class="token punctuation">(</span>CharSequence target<span class="token punctuation">,</span> CharSequence replacement<span class="token punctuation">)</span>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 String <span class="token function">replaceAll</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span> ：使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。String <span class="token function">replaceFirst</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span> ：使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。   <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span>：告知此字符串是否匹配给定的正则表达式。String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span>：根据给定正则表达式的匹配拆分此字符串。 String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</code></pre><p>jdk8新增方法   </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">join</span><span class="token punctuation">(</span>CharSequence delimiter<span class="token punctuation">,</span> CharSequence<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        String join <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abc-def-ghi</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//String --->  char[]的转换   </span>string<span class="token punctuation">.</span><span class="token function">toCharArrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String --->  byte[]的转换</span>string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。    2.只要其中有一个是变量，结果就在堆中。    3.如果拼接的结果调用intern()方法，返回值就在常量池中     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token keyword">final</span> String s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s4:常量</span>        String s5 <span class="token operator">=</span> s4 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>str.length 是添加的char元素的长度，value.length 才等于整个数组的长度，<strong>默认16</strong>  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 关于StringBuffer和StringBuilder的使用 * * @author 王瀚文 * @create 2019 下午 3:32 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferBuilderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    对比String、StringBuffer、StringBuilder三者的效率：    从高到低排列：StringBuilder > StringBuffer > String     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始设置</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        String text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始对比</span>        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            text <span class="token operator">=</span> text <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*StringBuffer的常用方法：  StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接  StringBuffer delete(int start,int end)：删除指定位置的内容  StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str  StringBuffer insert(int offset, xxx)：在指定位置插入xxx  StringBuffer reverse() ：把当前字符序列逆转  public int indexOf(String str)  public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串  public int length()  public char charAt(int n )  public void setCharAt(int n ,char ch)        总结：        增：append(xxx)        删：delete(int start,int end)        改：setCharAt(int n ,char ch) / replace(int start, int end, String str)        查：charAt(int n )        插：insert(int offset, xxx)        长度：length();        *遍历：for() + charAt() / toString()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        s1.delete(2,4);</span><span class="token comment" spellcheck="true">//        s1.replace(2,4,"hello");</span><span class="token comment" spellcheck="true">//        s1.insert(2,false);</span><span class="token comment" spellcheck="true">//        s1.reverse();</span>        String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    String、StringBuffer、StringBuilder三者的异同？    String:不可变的字符序列；底层使用char[]存储    StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储    StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储    源码分析：    String str = new String();//char[] value = new char[0];    String str1 = new String("abc");//char[] value = new char[]&amp;#123;'a','b','c'&amp;#125;;    StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。    System.out.println(sb1.length());//    sb1.append('a');//value[0] = 'a';    sb1.append('b');//value[1] = 'b';    StringBuffer sb2 = new StringBuffer("abc");//char[] value = new char["abc".length() + 16];    //问题1. System.out.println(sb2.length());//3    //问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。             默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。            指导意见：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity),省去扩容所需要的资源和时间*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb1<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="日期API"><a href="#日期API" class="headerlink" title="日期API"></a>日期API</h3><p>获取星期几的时候，周日是1，依此类推，没有0这一天</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * jdk 8之前的日期时间的API测试 * 1. System类中currentTimeMillis(); * 2. java.util.Date和子类java.sql.Date * 3. SimpleDateFormat * 4. Calendar * * @author 王瀚文 * @create 2019 上午 11:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析    1.两个操作：    1.1 格式化：日期 --->字符串    1.2 解析：格式化的逆过程，字符串 ---> 日期    2.SimpleDateFormat的实例化     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化SimpleDateFormat:使用默认的构造器</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化：日期 --->字符串</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        String format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析：格式化的逆过程，字符串 ---> 日期</span>        String str <span class="token operator">=</span> <span class="token string">"19-12-18 上午11:43"</span><span class="token punctuation">;</span>        Date date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token comment" spellcheck="true">/*************按照指定的方式格式化和解析：调用带参的构造器*****************        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        //格式化        String format1 = sdf1.format(date);        System.out.println(format1);//2019-02-18 18:48:27        //解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),        //否则，抛 ParseException异常        Date date2 = sdf1.parse("2020-02-18 18:48:27");        System.out.println(date2);    &amp;#125;      /*    Calendar日历类(抽象类）的使用     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.实例化</span>        <span class="token comment" spellcheck="true">//方式一：创建其子类（GregorianCalendar）的对象</span>        <span class="token comment" spellcheck="true">//方式二：调用其静态方法getInstance()</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(calendar.getClass());</span>        <span class="token comment" spellcheck="true">//2.常用方法</span>        <span class="token comment" spellcheck="true">//get()</span>        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//set()</span>        <span class="token comment" spellcheck="true">//calendar可变性</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//add()</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getTime():日历类---> Date</span>        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setTime():Date ---> 日历类</span>        Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * jdk 8中日期时间API的测试 * * @author 王瀚文 * @create 2019 下午 2:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDK8DateTimeTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//偏移量</span>        Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">-</span> <span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Sep 08 00:00:00 GMT+08:00 2020</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    LocalDate、LocalTime、LocalDateTime 的使用    说明：        1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高        2.类似于Calendar     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//now():获取当前的日期、时间、日期+时间</span>        LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span>        LocalDateTime localDateTime1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getXxx()：获取相关的属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有0，一月就是1，以此类推</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//体现不可变性</span>        <span class="token comment" spellcheck="true">//withXxx():设置相关的属性</span>        LocalDate localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不可变性</span>        LocalDateTime localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    Instant的使用    类似于 java.util.Date类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//now():获取本初子午线对应的标准时间</span>        Instant instant <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18T07:29:41.719Z</span>        <span class="token comment" spellcheck="true">//添加时间的偏移量</span>        OffsetDateTime offsetDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offsetDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18T15:32:50.611+08:00</span>        <span class="token comment" spellcheck="true">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---> Date类的getTime()</span>        <span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  -->Date(long millis)</span>        Instant instant1 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>1550475314878L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    DateTimeFormatter:格式化或解析日期、时间    类似于SimpleDateFormat     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span>        DateTimeFormatter formatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化:日期-->字符串</span>        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18T15:42:18.797</span>        <span class="token comment" spellcheck="true">//解析：字符串 -->日期</span>        TemporalAccessor parse <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18T15:42:18.797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        方式二：</span><span class="token comment" spellcheck="true">//        本地化相关的格式。如：ofLocalizedDateTime()</span><span class="token comment" spellcheck="true">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span>        DateTimeFormatter formatter1 <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span>FormatStyle<span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化</span>        String str2 <span class="token operator">=</span> formatter1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019年2月18日 下午03时47分16秒</span><span class="token comment" spellcheck="true">//      本地化相关的格式。如：ofLocalizedDate()</span><span class="token comment" spellcheck="true">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span>        DateTimeFormatter formatter2 <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span>FormatStyle<span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化</span>        String str3 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-2-18</span><span class="token comment" spellcheck="true">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span>        DateTimeFormatter formatter3 <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化</span>        String str4 <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18 03:52:09</span>        <span class="token comment" spellcheck="true">//解析</span>        TemporalAccessor accessor <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18 03:52:09"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h3><h3 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 商品类 * @author 王瀚文 * @create 2019 下午 4:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span>  <span class="token class-name">Comparable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Goods</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Goods&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println("**************");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Goods goods <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//方式一：</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">></span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                return 0;</span>               <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//方式二：</span><span class="token comment" spellcheck="true">//           return Double.compare(this.price,goods.price);</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        return 0;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 一、说明：Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 > 或 &lt; 的,但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象大小。 *   如何实现？使用两个接口中的任何一个：Comparable 或 Comparator * * 二、Comparable接口与Comparator的使用的对比： *    Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。 *    Comparator接口属于临时性的比较。 * * * @create 2019 下午 4:41 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    Comparable接口的使用举例：  自然排序    1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。    2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列    3. 重写compareTo(obj)的规则：        如果当前对象this大于形参对象obj，则返回正整数，        如果当前对象this小于形参对象obj，则返回负整数，        如果当前对象this等于形参对象obj，则返回零。    4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。       在compareTo(obj)方法中指明如何排序     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Goods<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    Comparator接口的使用：定制排序    1.背景：    当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，    或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，    那么可以考虑使用 Comparator 的对象来排序    2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：    如果方法返回正整数，则表示o1大于o2；    如果返回0，表示相等；    返回负整数，表示o1小于o2。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//按照字符串从大到小的顺序排列</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String s1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">;</span>                    String s2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                return 0;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Goods<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Goods g1 <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>                    Goods g2 <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token operator">-</span>Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用enum关键字定义枚举类 * 说明：定义的枚举类默认继承于java.lang.Enum类 * * @author 王瀚文 * @create 2021上午 10:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Season1 summer <span class="token operator">=</span> Season1<span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toString():返回枚举类对象的名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(Season1.class.getSuperclass());</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//values():返回所有的枚举类对象构成的数组</span>        Season1<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> Season1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span>State<span class="token punctuation">[</span><span class="token punctuation">]</span> values1 <span class="token operator">=</span> Thread<span class="token punctuation">.</span>State<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span>        Season1 winter <span class="token operator">=</span> Season1<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"WINTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span><span class="token comment" spellcheck="true">//        Season1 winter = Season1.valueOf("WINTER1");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>winter<span class="token punctuation">)</span><span class="token punctuation">;</span>        winter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用enum关键字枚举类</span><span class="token keyword">enum</span> Season1 <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.声明Season对象的属性:private final修饰,final修饰的属性不能生成get(),set()方法</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.私有化类的构造器,并给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token function">Season1</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span>String seasonDesc<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> String <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.其他诉求2：提供toString()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Season1&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"seasonName='"</span> <span class="token operator">+</span> seasonName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", seasonDesc='"</span> <span class="token operator">+</span> seasonDesc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个季节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；<span class="token number">2</span>、如果两个对象相同，就是适用于<span class="token function">equals</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">)</span> 方法，那么这两个对象的hashCode一定要相同；<span class="token number">3</span>、如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第<span class="token number">2</span>点；<span class="token number">4</span>、两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于<span class="token function">equals</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">)</span> 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”。    <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的作用    Java中的hashCode方法就是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为散列值。主要是针对HashSet和Map集合类型，比如我们在向HashSet集合里边添加新元素的时候，由于set集合里边不允许元素重复，所以我们在插入新元素之前需要先判断插入元素是否存在，首先根据<span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法得到该对象的hashCode值，如果集合里边不存在该值，可以直接插入进去。如果已经存在，则需要再次通过<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>来比较，这样的话可以提升效率。    重写<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法为什么要同时重写<span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法？重写<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法同时重写<span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，就是为了保证当两个对象通过<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法比较相等时，那么他们的hashCode值也一定要保证相等。</code></pre><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>确定性</p><p>不可逆、单向</p><p>分散性、敏感性</p><p>压缩性</p><h3 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h3><p>冲突就是哈希碰撞</p><p>1.rehash 再哈希</p><p>2.链地址法 ，hashMap中用的就是这个</p><p>3.开放定址</p><p>4.公共溢出区</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>数组在存储多个数据方面的缺点：<br>    &gt;一旦初始化以后，其长度就不可以修改。<br>    &gt;数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，效率不高。<br>    &gt;获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用<br>    &gt;数组存储数据特点：有序、可重复。对于无序、不可重复的需求，不能满足。</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*size():获取添加的元素的个数;clear():清空集合元素;isEmpty():判断当前集合是否为空containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中remove(Object obj):删除集合中的元素，也需要重写equals()方法removeAll(Collection coll1):差集：从当前集合中移除coll1中和coll重复的元素retainAll(Collection coll1):交集：获取当前集合和coll1集合交集，并返回给当前集合equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同(如果是ArraryList的话，就需要顺序也是一致才能返回true，如果是set等无序的话，就和顺序无关了，因为底层就是按HashCode给排序的)hashCode():返回当前对象的哈希值*/</span> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Collection coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Person p = new Person("Jerry",20);</span><span class="token comment" spellcheck="true">//        coll.add(p);</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.contains(Object obj):判断当前集合中是否包含obj</span>        <span class="token comment" spellcheck="true">//在判断是否包含时会调用obj对象所在类的equals()。</span>        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contains<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true(已经重写了equals方法)</span><span class="token comment" spellcheck="true">//      System.out.println(coll.contains(p));//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false--->true(重写equals方法)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//8.集合 ---> 数组：toArray()</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; arr.length; i++) &amp;#123;</span><span class="token comment" spellcheck="true">//            System.out.println(arr[i]);</span><span class="token comment" spellcheck="true">//        &amp;#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 拓展：数组 ---> 集合:调用Arrays类的静态方法asList()</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//以下为特殊注意点！！！！！！！！</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> arr1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[[I@78e03bb5]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arr2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[123, 456]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//        arr2.remove(1);//UnsupportedOperationException</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//iterator():返回Iterator接口的实例，用于遍历Collection集合元素。且只能遍历Collection集合</span>        <span class="token comment" spellcheck="true">//hasNext():判断是否还有下一个元素</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//next():①指针下移 ② 将下移以后集合位置上的元素返回</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        错误方式一：</span>        Iterator iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NoSuchElementException(线程访问越界)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        错误方式二：</span><span class="token comment" spellcheck="true">// 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//测试Iterator中的remove()</span>    <span class="token comment" spellcheck="true">//如果还未调用next()或在上一次调用next方法之后已经调用了remove 方法，</span>    <span class="token comment" spellcheck="true">//再调用remove都会报IllegalStateException.</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Collection coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    1.remove（）将会删除上次调用next（）时返回的元素，也就是说先调用next（）方法，再调用remove方法才会删除元素。next（）和remove()方法具有依赖性，必须先用next，再使用remove。如果先用remove方法会出现IllegalStateException异常。   2.使用remove（）方法必须紧跟在next（）之后执行，如果在remove和next中间，集合出现了结构性变化（删除或者是增加）则会出现异常IllegalStateException。*/</span>        <span class="token comment" spellcheck="true">//删除集合中“Tom”</span>        Iterator iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            iterator.remove();</span>            Object obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                iterator.remove();</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合</span>        iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//练习题</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一:普通for循环赋值</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; arr.length; i++) &amp;#123;</span><span class="token comment" spellcheck="true">//            arr[i] = "GG";</span><span class="token comment" spellcheck="true">//        &amp;#125;</span>        <span class="token comment" spellcheck="true">//方式二：foreach</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s<span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> <span class="token string">"GG"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增强for循环是把arr[i]的值循环赋值给String的s变量，重新赋值是把s变量的值改变  //了，真正的arr的值是没有变的。切记切记！！！！！</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，通过集合.iterator()得到iterator</strong></p><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>面试题:ArrayList、LinkedList、Vector三者的异同<br> 同：三个类都实现了list接口，存储数据的特点相同：有序的，可重复的。<br> 异：ArrayList：作为List接口的主要实现类，线程不安全，效率高；底层使用Object[] elementData存储，扩容为                            原来的1.5倍<br>        LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高,线程不安全；底层使用双向链表存储<br>        Vector：作为List接口的古老实现类，线程安全，效率低；底层使用Object[] elementData存储，每次扩容2                        倍</p><p>​    </p><pre class=" language-java"><code class="language-java"><span class="token number">1.1</span> jdk7 的情况下    ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层创建了长度是10的Object数组elementData</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//elementData[0] = new Integer(123);</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  共<span class="token number">10</span>个，到第<span class="token number">11</span>个时：    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此次添加导致底层elementData数组容量不够，则扩容。</span>    默认情况下，扩容为原来的<span class="token number">1.5</span>倍，同时需要将原有数组的数据复制到新的数组中。    结论：建议开发中使用带参的构造器： ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1.2</span> jdk8中ArrayList的变化<span class="token operator">:</span>     ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层Object[] elementData初始化为&amp;#123;&amp;#125;，并没有创建长度为10的数组</span>     list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     后续的添加和扩容操作与jdk7无异<span class="token number">1.3</span> 小结；jdk7中的 ArrayList的创建类似于单例的饿汉式，而jdk8中的 ArrayList对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存</code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**    void add(int index, Object ele):在index位置插入ele元素    boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来    Object get(int index):获取指定index位置的元素    int indexOf(Object obj):返回obj在集合中首次出现的位置    int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置    Object remove(int index):移除指定index位置的元素，并返回此元素    Object set(int index, Object ele):设置指定index位置的元素为ele    List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合     总结常用方法     增：add(Object obj)     删: remove(int index) / remove(Object obj)     改: set(int index,Object ele)     查；get(int index)     长度: size()     遍历: ①：Iterator迭代器方式           ②：增强for循环           ③：普通for循环*/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   区分list中remove(int index) 和 remove(Object obj)*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">updateList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateList</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除索引为2的数据</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除值为2的数据</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><pre class=" language-java"><code class="language-java">Set<span class="token operator">:</span>存储无序的，不可重复的数据，本质就是HashMap<span class="token punctuation">.</span>除了Collection中的方法没有定义其他方法无序性<span class="token operator">:</span>不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数组的哈希值决定的。  向Set中添加的数据，其所在的类一定要重写 <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  重写的<span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>尽可能保持一致性：相等的对象必须具有相等的散列码<span class="token punctuation">(</span>hash值<span class="token punctuation">)</span>重写两个方法的小技巧：对象中用作<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法比较的Field，都应该用来计算hashCode值</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java1<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-03-24 15:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"User&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> user<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//按照姓名从小到大排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span>  <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return this.name.compareTo(user.name);</span>            <span class="token keyword">int</span> compare <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> compare<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 王瀚文 * @Description: * @date 2021-03-24 16:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1.向TreeSet中添加的数据，要求是相同类的对象,但不能放相同的数据。     * 2.两种排序方式：自然排序(Comparable) 和 定制排序(Comparator)     *     * 3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0，不再是equals()。     * 4.定制排序中，比较两个对象是否相同的标准为：compare()返回0，不再是equals()。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不能添加不同类的对象</span><span class="token comment" spellcheck="true">//        set.add(123);</span><span class="token comment" spellcheck="true">//        set.add(456);</span><span class="token comment" spellcheck="true">//        set.add("AA");</span><span class="token comment" spellcheck="true">//        set.add(new User("Tom",12));</span>        <span class="token comment" spellcheck="true">//举例一：</span><span class="token comment" spellcheck="true">//        set.add(123);</span><span class="token comment" spellcheck="true">//        set.add(-23);</span><span class="token comment" spellcheck="true">//        set.add(234);</span><span class="token comment" spellcheck="true">//        set.add(1);</span><span class="token comment" spellcheck="true">//        set.add(39);</span>        <span class="token comment" spellcheck="true">//举例二：</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Comparator com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//按照年龄从小到大排序</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   User u1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>                   User u2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>                   <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Marry"</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有加进去，因为Marry已经占住位置了</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>如果添加时候已经有了一样的entry数组元素，是用新的元素替换旧的元素，而不是像HashSet那样加不进去</p><p>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认扩容方式：扩容为原来的2倍，并将原有的数据复制过来。</p><p>0.75是对空间和时间效率的一个平衡选择</p><p>影响 HashMap 性能的两个重要参数：“initial capacity”（初始化容量）和”load factor“（负载因子：即为填入表中的元素个数/散列表的长度）。</p><p>最大的容量上限为 2^30    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</p><p>恢复链式结构的临界值为 6     static final int UNTREEIFY_THRESHOLD = 6;</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历所有的key-value集 </span>Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator1 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//entrySet集合中的元素都是entry</span>            Map<span class="token punctuation">.</span>Entry entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---->"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//常用方法</span> 添加、删除、修改操作：  Object <span class="token function">put</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span>：将指定key<span class="token operator">-</span>value添加到<span class="token punctuation">(</span>或修改<span class="token punctuation">)</span>当前map对象中  <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span>Map m<span class="token punctuation">)</span><span class="token operator">:</span>将m中的所有key<span class="token operator">-</span>value对存放到当前map中  Object <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>：移除指定key的key<span class="token operator">-</span>value对，并返回value  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：清空当前map中的所有数据 元素查询的操作： Object <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>：获取指定key对应的value <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>：是否包含指定的key <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span>：是否包含指定的value <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回map中key<span class="token operator">-</span>value对的个数 <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断当前map是否为空 <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>：判断当前map和参数对象obj是否相等 元视图操作的方法： Set <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有key构成的Set集合 Collection <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有value构成的Collection集合 Set <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有key<span class="token operator">-</span>value对构成的Set集合     总结：常用方法添加： <span class="token function">put</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span>删除： <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>修改： <span class="token function">put</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span>查询： <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>长度： <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>遍历： <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th>集合类</th><th>Key</th><th>Value</th><th>Super</th><th>说明</th></tr></thead><tbody><tr><td>Hashtable</td><td>不允许为nulll</td><td>不允许为nulll</td><td>Dictionary</td><td>线程安全</td></tr><tr><td>ConcurrentHashMap</td><td>不允许为nulll</td><td>不允许为nulll</td><td>AbstractMap</td><td>锁分段技术(JDK8:CAS)</td></tr><tr><td>TreeMap</td><td>不允许为nulll</td><td>允许为nulll</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>HashMap</td><td>允许为nulll</td><td>允许为nulll</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>LinkedHashMap</td><td>允许为nulll</td><td>允许为nulll</td><td>HashMap</td><td>安全</td></tr></tbody></table><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p> 锁分段技术可有效提升并发访问率</p><p>​    HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//put的源码</span><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// HashMap 允许存放 null 键和 null 值。</span>    <span class="token comment" spellcheck="true">// 当 key 为 null 时，调用 putForNullKey 方法，将 value 放置在数组第一个位置。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据 key 的 keyCode 重新计算 hash 值。</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索指定 hash 值在对应 table 中的索引。</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素。</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         Object k<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>              e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>             e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry。</span>     modCount<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 将 key、value 添加到 i 索引处。</span>     <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><pre class=" language-java"><code class="language-java"><span class="token function">reverse</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：反转 List 中元素的顺序<span class="token function">shuffle</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：对 List 集合元素进行随机排序<span class="token function">sort</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：根据元素的自然顺序对指定 List 集合元素按升序排序<span class="token function">sort</span><span class="token punctuation">(</span>List，Comparator<span class="token punctuation">)</span>：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<span class="token function">swap</span><span class="token punctuation">(</span>List，<span class="token keyword">int</span>， <span class="token keyword">int</span><span class="token punctuation">)</span>：将指定 list 集合中的 i 处元素和 j 处元素进行交换Object <span class="token function">max</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>：根据元素的自然顺序，返回给定集合中的最大元素Object <span class="token function">max</span><span class="token punctuation">(</span>Collection，Comparator<span class="token punctuation">)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素Object <span class="token function">min</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>Object <span class="token function">min</span><span class="token punctuation">(</span>Collection，Comparator<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">frequency</span><span class="token punctuation">(</span>Collection，Object<span class="token punctuation">)</span>：返回指定集合中指定元素的出现次数    <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List dest<span class="token punctuation">,</span>List src<span class="token punctuation">)</span>：将src中的内容复制到dest中   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">435</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//报异常：IndexOutOfBoundsException("Source dose not fit in dest")</span><span class="token comment" spellcheck="true">//        List dest = new ArrayList();</span><span class="token comment" spellcheck="true">//        Collections.copy(dest,list);</span>        <span class="token comment" spellcheck="true">//正确的</span>        List dest <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list.seze();</span>        Collections<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>List list，Object oldVal，Object newVal<span class="token punctuation">)</span>：使用新值替换Lis</code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>&lt;&gt;尖括号里面只能写引用数据类，不能写基本数据类型</p><p>子类在继承带泛型的父类时，指明了泛型类型，则实例化子类对象时，不在需要指明泛型。</p><p>Java泛型中的标记符含义： </p><p> E - Element (在集合中使用，因为集合中存放的是元素)</p><p> T - Type（Java 类）</p><p> K - Key（键）</p><p> V - Value（值）</p><p> N - Number（数值类型）</p><p>？ - 表示不确定的java类型</p><p><strong>静态方法中不能使用类的泛型</strong></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> null<span class="token punctuation">;</span>      ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//泛型不同的引用不能相互赋值</span><span class="token comment" spellcheck="true">//    list1 = list2;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数组</span><span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//编译不通过</span>     <span class="token comment" spellcheck="true">//T[] arr = new T[10]</span>     <span class="token comment" spellcheck="true">//编译通过</span>     T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span><span class="token comment" spellcheck="true">//换句话说，泛型方法所属的类是不是泛型类都没有关系</span><span class="token comment" spellcheck="true">//泛型方法可以声明为静态的，原因：泛型参数是在调用方法时确定的。并非在实例化类时确定</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyFromArrayTolist</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>E e<span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取绝对路径<span class="token keyword">public</span> String <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取路径<span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取名称<span class="token keyword">public</span> String <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取上层文件目录路径。若无，返回null<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取文件长度（即：字节数）。不能获取目录的长度。  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取最后一次的修改时间，毫秒值<span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取指定目录下的所有文件或者文件目录的名称数组<span class="token keyword">public</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取指定目录下的所有文件或者文件目录的File数组  <span class="token comment" spellcheck="true">/**     * public boolean renameTo(File dest):把文件移动到指定的文件路径并且改名字为file2的名字     * 比如：file1.renameTo(file2)为例：     * 要想保证返回true,需要file1在硬盘中是存在的，且file2不能在硬盘中存在。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> renameTo <span class="token operator">=</span> file1<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>renameTo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断是否是文件目录<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否是文件<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否存在创建硬盘中对应的文件或文件目录<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件。若文件存在，则不创建，返回<span class="token boolean">false</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件目录。如果上层文件目录不存在，一并创建删除磁盘中的文件或文件目录<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 删除文件或文件夹</code></pre><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>​        <strong>对象序列化机制</strong>允许把内存中的Java对象转换成平台无关的二进制流，从</p><p>而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传</p><p>输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原</p><p>来的Java对象</p><p>​        序列化的好处在于可将任何实现了Serializable接口的对象转化为<strong>字节数据</strong>，</p><p>使其在保存和传输时可被还原</p><p>​        序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返</p><p>回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是</p><p>JavaEE 平台的基础</p><p>​        如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可</p><p>序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。</p><p>否则，会抛出NotSerializableException异常</p><p>​        Serializable</p><p>​        Externalizable</p><h4 id="类序列化前提"><a href="#类序列化前提" class="headerlink" title="类序列化前提"></a>类序列化前提</h4><pre class=" language-java"><code class="language-java">Person需要满足如下的要求，方可序列化<span class="token number">1</span><span class="token punctuation">.</span>需要实现接口：Serializable<span class="token number">2</span><span class="token punctuation">.</span>当前类提供一个全局常量：serialVersionUID<span class="token number">3</span><span class="token punctuation">.</span>除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性  也必须是可序列化的。（默认情况下，基本数据类型可序列化）    补充：ObjectOutputStream和ObjectInputStream不能序列化<span class="token keyword">static</span>和<span class="token keyword">transient</span>修饰的成员变量        序列化几个对象就得读几次</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * RandomAccessFile的使用 * 1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口 * 2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流 * * 3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。 *   如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖） * * 4. 可以通过相关的操作，实现RandomAccessFile“插入”数据的效果 * * @author shkstart * @create 2019 上午 11:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RandomAccessFile raf1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        RandomAccessFile raf2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.</span>            raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>raf1 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>raf2 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RandomAccessFile raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将指针调到角标为3的位置</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    使用RandomAccessFile实现数据的插入效果     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RandomAccessFile raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将指针调到角标为3的位置</span>        <span class="token comment" spellcheck="true">//保存指针3后面的所有数据到StringBuilder中</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调回指针，写入“xyz”</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将StringBuilder中的数据写入到文件中</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//思考：将StringBuilder替换为ByteArrayOutputStream</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><pre class=" language-java"><code class="language-java">InetAddress类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress实例    <span class="token keyword">public</span> <span class="token keyword">static</span> InetAddress <span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InetAddress <span class="token function">getByName</span><span class="token punctuation">(</span>String host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数为域名或者ip地址</span>InetAddress提供了如下几个常用的方法    <span class="token keyword">public</span> String <span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回 IP 地址字符串（以文本表现形式）。    <span class="token keyword">public</span> String <span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取此 IP 地址的主机名    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isReachable</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeout<span class="token punctuation">)</span>：测试是否可以达到该地址</code></pre><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><pre class=" language-java"><code class="language-java">TCP协议：  使用TCP协议前，须先建立TCP连接，形成传输数据通道  传输前，采用“三次握手”方式，点对点通信，是可靠的  TCP协议进行通信的两个应用进程：客户端、服务端。  在连接中可进行大数据量的传输  传输完毕，需释放已建立的连接，效率低UDP协议：  将数据、源、目的封装成数据包，不需要建立连接  每个数据报的大小限制在64K内   发送不管对方是否准备好，接收方收到也不确认，故是不可靠的   可以广播发送  发送数据结束时无需释放资源，开销小，速度快</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术？<br>        不矛盾。封装性是指建不建议你调用这个类或者方法，而反射是能不能，或者说需不需要调私有的方法和属性，比如一个单例模式，当初设计的时候就是为了只有一个对象，你在用反射创建一个对象有什么意义呢。</p><h3 id="类的加载过程："><a href="#类的加载过程：" class="headerlink" title="类的加载过程："></a>类的加载过程：</h3><pre class=" language-java"><code class="language-java">    程序经过javac<span class="token punctuation">.</span>exe命令以后，会生成一个或多个字节码文件<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">class</span>结尾<span class="token punctuation">)</span>。接着我们使用java<span class="token punctuation">.</span>exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取Class的实例的方式 </span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一：调用运行时类的属性：.class</span>        Class <span class="token class-name">clazz1</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方式二：通过运行时类的对象,调用getClass()</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz2</span> <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式三：调用Class的静态方法：forName(String classPath)</span>        Class <span class="token class-name">clazz3</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.java.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        clazz3 = Class.forName("java.lang.String");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式四：使用类的加载器：ClassLoader  (了解)</span>        ClassLoader classLoader <span class="token operator">=</span> ReflectionTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz4</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.whw.java.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Class实例可以是哪些结构的说明：</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Class <span class="token class-name">c1</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c2</span> <span class="token operator">=</span> Comparable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Comparable表示接口</span>        Class <span class="token class-name">c3</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c4</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c5</span> <span class="token operator">=</span> ElementType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c6</span> <span class="token operator">=</span> Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c7</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c8</span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c9</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Class <span class="token class-name">c10</span> <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c11</span> <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只要数组的元素类型与维度一样，就是同一个Class</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c10 <span class="token operator">==</span> c11<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><pre class=" language-java"><code class="language-java"><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。        要想此方法正常的创建运行时类的对象，要求：        <span class="token number">1</span><span class="token punctuation">.</span>运行时类必须提供空参的构造器        <span class="token number">2</span><span class="token punctuation">.</span>空参的构造器的访问权限不能是<span class="token keyword">private</span>，其他都可以。通常，设置为<span class="token keyword">public</span>。        在javabean中要求提供一个<span class="token keyword">public</span>的空参构造器。原因：        <span class="token number">1</span><span class="token punctuation">.</span>便于通过反射，创建运行时类的对象        <span class="token number">2</span><span class="token punctuation">.</span>便于子类继承此运行时类时，默认调用<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时，保证父类有此构造器        造对象只能用构造器<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span></code></pre><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**    Properties：用来读取配置文件。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties pros <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此时的文件默认在当前的module下。</span>        <span class="token comment" spellcheck="true">//读取配置文件的方式一：</span><span class="token comment" spellcheck="true">//        FileInputStream fis = new FileInputStream("jdbc.properties");</span><span class="token comment" spellcheck="true">//        FileInputStream fis = new FileInputStream("src\\jdbc1.properties");</span><span class="token comment" spellcheck="true">//        pros.load(fis);</span>        <span class="token comment" spellcheck="true">//读取配置文件的方式二：使用ClassLoader</span>        <span class="token comment" spellcheck="true">//配置文件默认识别为：当前module的src下</span>        ClassLoader classLoader <span class="token operator">=</span> ClassLoaderTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc1.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user = "</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">",password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="创建运行时对象"><a href="#创建运行时对象" class="headerlink" title="创建运行时对象"></a>创建运行时对象</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>Person<span class="token operator">></span> clazz <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。        要想此方法正常的创建运行时类的对象，要求：        1.运行时类必须提供空参的构造器        2.空参的构造器的访问权限不能是private，其他都可以。通常，设置为public。        在javabean中要求提供一个public的空参构造器。原因：        1.便于通过反射，创建运行时类的对象        2.便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器         */</span>        Person person <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前运行时类及其父类中声明为<span class="token keyword">public</span>访问权限的属性<span class="token punctuation">;</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.权限修饰符,返回整数</span>  <span class="token keyword">int</span> modifier <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>modifier<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.数据类型</span>  Class <span class="token class-name">type</span> <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.变量名</span>  String fName <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前运行时类及其所有父类中声明为<span class="token keyword">public</span>权限的方法<span class="token punctuation">;</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @Xxxx     * 权限修饰符  返回值类型  方法名(参数类型1 形参名1,...) throws XxxException&amp;#123;&amp;#125;     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Method m <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.获取方法声明的注解</span>            Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annos <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Annotation a <span class="token operator">:</span> annos<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.权限修饰符</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.返回值类型</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.方法名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.形参列表</span>            Class<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>parameterTypes <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" args_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" args_"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.抛出的异常</span>            Class<span class="token punctuation">[</span><span class="token punctuation">]</span> exceptionTypes <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>exceptionTypes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"throws "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> exceptionTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> exceptionTypes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                                           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>exceptionTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>exceptionTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前运行时类中声明为<span class="token keyword">public</span>的构造器<span class="token punctuation">;</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前运行时类中声明的所有的构造器<span class="token punctuation">;</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取运行时类的父类<span class="token punctuation">;</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取运行时带泛型的父类        <span class="token comment" spellcheck="true">/**    获取运行时类的带泛型的父类的泛型    代码：逻辑性代码  vs 功能性代码     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Type genericSuperclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ParameterizedType paramType <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> genericSuperclass<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取泛型类型</span>        Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> paramType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(actualTypeArguments[0].getTypeName());</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span>actualTypeArguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取运行时类实现的接口</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取运行时类所在的包</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取运行时类声明的注解</span><span class="token comment" spellcheck="true">/** * 如何操作运行时类中的指定的属性 -- 需要掌握 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testField1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token comment" spellcheck="true">//创建运行时类的对象</span>    Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span>    Field name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//2.保证当前属性是可访问的</span>    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.获取、设置指定对象的此属性值</span>    name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 如何操作运行时类中的指定的方法 -- 重点需要掌握*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建运行时类的对象</span>     Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span>newInstance<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*     1.获取指定的某个方法     getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表      */</span>     Method show <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//2.保证当前方法是可访问的</span>     show<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*     3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参     invoke()的返回值即为对应类中调用的方法的返回值。      */</span>     Object returnValue <span class="token operator">=</span> show<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"CHN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//String nation = p.show("CHN");</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************如何调用静态方法*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// private static void showDesc()</span>     Method showDesc <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"showDesc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     showDesc<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果调用的运行时类中的方法没有返回值，则此invoke()返回null</span><span class="token comment" spellcheck="true">//   Object returnVal = showDesc.invoke(null);</span><span class="token comment" spellcheck="true">//   Object returnVal = showDesc.invoke(p);</span>     Object returnVal <span class="token operator">=</span> showDesc<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>whw<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 动态代理的举例 */</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被代理类</span><span class="token keyword">class</span> <span class="token class-name">SuperMan</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"I believe I can fly!"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String food<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 要想实现动态代理，需要解决的问题？ * 问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。 * 问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。 */</span><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用此方法，返回一个代理类的对象。解决问题一</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj:被代理类的对象</span>        MyInvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要使用被代理类的对象进行赋值</span>    <span class="token keyword">public</span> <span class="token function">MyInvocationHandler</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span>    <span class="token comment" spellcheck="true">//将被代理类要执行的方法a的功能就声明在invoke()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span>        <span class="token comment" spellcheck="true">//obj:被代理类的对象</span>        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上述方法的返回值就作为当前类中的invoke()的返回值。</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SuperMan superMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//proxyInstance:代理类的对象</span>        Human proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>Human<span class="token punctuation">)</span> ProxyFactory<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span>        String belief <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>belief<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"四川麻辣烫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NikeClothFactory nikeClothFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClothFactory proxyClothFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ClothFactory<span class="token punctuation">)</span> ProxyFactory<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>nikeClothFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyClothFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><h3 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamAPITest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建 Stream方式一：通过集合</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        default Stream&lt;E> stream() : 返回一个顺序流</span>        Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> stream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        default Stream&lt;E> parallelStream() : 返回一个并行流</span>        Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> parallelStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建 Stream方式二：通过数组</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用Arrays类的static &lt;T> Stream&lt;T> stream(T[] array): 返回一个流</span>        IntStream stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>e1<span class="token punctuation">,</span>e2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> stream1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建 Stream方式三：通过Stream的of()</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建 Stream方式四：创建无限流</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      迭代</span><span class="token comment" spellcheck="true">//      public static&lt;T> Stream&lt;T> iterate(final T seed, final UnaryOperator&lt;T> f)</span>        <span class="token comment" spellcheck="true">//遍历前10个偶数</span>        Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">-</span><span class="token operator">></span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      生成</span><span class="token comment" spellcheck="true">//      public static&lt;T> Stream&lt;T> generate(Supplier&lt;T> s)</span>        Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter 选项详解</title>
      <link href="2021/06/02/%E6%A8%A1%E6%9D%BF/"/>
      <url>2021/06/02/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>mg</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 选项详解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="2021/06/02/Docker/"/>
      <url>2021/06/02/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><p>​    一款产品从开发到上线，从操作系统，到运行环境，在到应用配置。作为开发+运维之间的协作我们需要关系很多东西，这也是很多互联网公司不得不面对的问题，特别his各个版本的迭代之后，不同版本环境的兼容，对运维人员都是考验，Docker之所以如此迅速，也是因为它对此给出了一个标准化的解决方案。</p><p>​    环境配置如此麻烦，换一台机器就要重新配置，这时候就考虑能不能把软件连带环境一起安装，也就是说，安装的时候，把原始的环境一模一样的复制过来，开发人员利用Docker可以消除协作编码时”在我的机器上可以正常工作“的问题。</p><p>Docker镜像的设计，使得Docker得以打破过去【程序即应用】的观念，透过镜像将迆系统核心除外，运作应用城市所需要的系统环境，由下而上的打包，达到应用程序跨平台的无缝接轨运行</p><h2 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h2><p>​    Docker是基于GO语言实现的云开源项目。</p><p>​    Docker的主要目标是“Build，Ship and Run Any APP AnyWhere”，也就是通过对应组件的封装、分发、部署、运行等生命周期的管理，使用户的APP及其运行环境能做到<strong>“一次封装，到处运行”</strong>。</p><ul><li>更快速的应用交付和部署</li><li>更便捷的升级和扩缩容</li><li>更简单的系统运维</li><li>更高效的计算资源利用</li></ul><p>​    Linux容器技术的出现就解决了这样一个问题，而Docker就是在它的基础上发展过来的，将应用运行在Docker容器上面，而Docker容器在任何操作系统都是一致的，这就实现了跨平台，跨服务。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</strong></p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210726224324.png"></p><h2 id="Docker定义"><a href="#Docker定义" class="headerlink" title="Docker定义"></a>Docker定义</h2><p>Docker解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p><h2 id="容器虚拟化技术"><a href="#容器虚拟化技术" class="headerlink" title="容器虚拟化技术"></a>容器虚拟化技术</h2><p>​        Linux容器<strong>不是模拟一个完整的操作系统</strong>，而是对进程进行隔离。有了容器，就可以将软件运行所需要的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需要的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><h3 id="与传统的虚拟化方式比较"><a href="#与传统的虚拟化方式比较" class="headerlink" title="与传统的虚拟化方式比较"></a>与传统的虚拟化方式比较</h3><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上在运行所需要的应用进程。</li><li>而容器内的应用进程直接运行与宿主的内核，容器内没有自己的内核，也没有运行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间相互隔离，每个容器有自己的文件系统，容器之间不会相互影响，能区分计算资源</li></ul><h2 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h2><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210728073849.png"></p><h2 id="Docker三要素"><a href="#Docker三要素" class="headerlink" title="Docker三要素"></a>Docker三要素</h2><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>Docker镜像就是一个==<strong>只读</strong>==的模板。镜像可以用来创建Docker容器，<strong>一个镜像可以创建很多容器</strong>。</p><p>镜像就是类，容器就是对象</p><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>Docker利用容器独立运行一个或一组应用。==<strong>容器是用镜像创建的运行实例</strong>==</p><p>它可以被启动、开始、停止、删除。每个容器都是相互隔离的，保证安全的平台</p><p>==<strong>可以把容器看做是一个简易版Linux环境</strong>==（大部分的命令在docker里面都可以使用）和运行在其中的应用程序</p><p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于<strong>容器的最上面那一层是可读可写的</strong></p><table><thead><tr><th align="left">Docker</th><th align="left">面向对象</th></tr></thead><tbody><tr><td align="left">容器</td><td align="left">对象</td></tr><tr><td align="left">镜像</td><td align="left">类</td></tr></tbody></table><h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><ul><li>仓库(Repository)是存放镜像文件的场所</li><li>仓库和仓库注册服务器是有区别的。仓库注册服务器往往存放这多个仓库。每个仓库中又包含了多个镜像。每个镜像都有不同的标签(tag)。</li><li>仓库分为公开仓库和私有仓库，最大的公开仓库是<a href="www.docker.com">Docker Hub</a>，存放了数量庞大的镜像供用户下载，国内公开仓库有阿里云、网易云</li></ul><h3 id="Docker-容器、镜像之间的关系"><a href="#Docker-容器、镜像之间的关系" class="headerlink" title="Docker 容器、镜像之间的关系"></a>Docker 容器、镜像之间的关系</h3><p>​    Docker本身是一个容器运行载体或者称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是images镜像文件。只有通过这个镜像文件才能生成Docker容器，images文件可以看做是容器的模板。Docker根据image文件生成容器实例。同一个image文件可以生成多个同时运行的容器实例</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210727070307.png"></p><h2 id="Docker底层原理"><a href="#Docker底层原理" class="headerlink" title="Docker底层原理"></a>Docker底层原理</h2><p>Docker工作原理</p><p>​        Docker 是一个Client—Server结构的系统，Docker 守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接收命令并管理运行在主机上的容器。  ==<strong>容器，是一个运行时环境</strong>==</p><p>为什么docker比虚拟机快</p><ul><li><p>​      Docker有着比虚拟机更少的抽象层。由于Docker不需要 虚拟机管理系统（Hypervisor）实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上Docker将会在效率上有明显优势</p></li><li><p>​      Docker利用的是宿主机的内核，而不需要Guest OS，因此，当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引循、加载操作系统内核整个比较费资源的过程，当新建一个虚拟机时，虚拟机需要加载Guest OS，整个新建过程是分钟级的。而Docker由于直接利用宿主机的操作系统省略了整个过程，因此新建一个Docker容器只需要几秒钟</p></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210728092829.png"></p><p> 对比Docker容器和虚拟机 VM</p><table><thead><tr><th></th><th>Docker容器虚拟技术</th><th>虚拟机 VM</th></tr></thead><tbody><tr><td>操作系统</td><td>与宿主机共享OS</td><td>宿主机OS上运行虚拟机OS</td></tr><tr><td>存储大小</td><td>镜像小，便于存储与传输</td><td>镜像庞大</td></tr><tr><td>运行性能</td><td>几乎无额外性能损失</td><td>操作系统额外的CPU、内存消耗</td></tr><tr><td>移植性</td><td>轻便、灵活、适用于Linux</td><td>笨重，与虚拟化技术耦合度高</td></tr><tr><td>硬件亲和性</td><td>面向软件开发者</td><td>面向硬件运维者</td></tr><tr><td>部署速度</td><td>快速，秒级</td><td>较慢，分钟级</td></tr></tbody></table><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ul><li><p>docker version</p><ul><li> 查看docker版本信息</li></ul></li><li><p>docker info    </p><ul><li>查看dokcer详细信息</li></ul></li><li><p>docker –help</p><ul><li>查看  docker命令</li></ul></li><li><p>systemctl restart docker.service</p><ul><li>开机自启动    </li></ul></li></ul><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li>docker images [选项]<ul><li>作用：列出本地的镜像</li><li>常用选项<ul><li>-a : 列出本地所有的镜像，包含中间层</li><li>-q : 只显示当前镜像的 ID</li><li>–digests : 显示镜像的摘要信息</li><li>–no-trunc : 不截断显示  </li></ul></li></ul></li></ul><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>表示镜像的仓库源</td></tr><tr><td>TAG</td><td>镜像的标签，即版本号，默认latest</td></tr><tr><td>IMAGE ID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像创建时间</td></tr><tr><td>VIRTUAL SIZE</td><td>镜像大小</td></tr></tbody></table><p>​     同一仓库源可以有多个TAG，代表这个仓库源的不同版本，我们使用 REPOSITORY:TAG来定义不同版本的镜像，如果不指定一个镜像的版本标签，则默认标签为 latest。</p><ul><li>docker search   [选项]   镜像名字<ul><li>作用：在<a href="https://hub.docker.com/">Docker</a>官网上查询该镜像</li><li>常用选项<ul><li>–no-trunc ；显示完整的镜像描述</li><li>-f  &lt;过滤条件&gt; ：列出收藏数不小于指定值的镜像。<ul><li>示例：docker search -f stars=10 tomcat</li></ul></li></ul></li></ul></li></ul><ul><li>docker pull 镜像名字<ul><li>作用：从仓库中拉镜像</li><li>示例： docker pull tomcat:1.1</li><li>如果不写版本号，默认latest，最新版</li></ul></li></ul><ul><li><p>docker  rmi  [选项]   镜像 ID</p><ul><li>作用：删除单个镜像</li><li>选项   <ul><li>-f  : 强制删除</li></ul></li></ul></li><li><p>docker  rmi  [选项]   镜像 ID1   镜像 ID2   或者    docker  rmi  [选项]  $(docker images -q)</p><ul><li>作用：删除多个镜像<ul><li>选项   <ul><li>-f  : 强制删除</li></ul></li></ul></li></ul></li></ul><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><ul><li>docker run [OPTIONS]   镜像名字或者ID   [COMMAND] [ARG…]<ul><li>常用选项：<ul><li>–name=”容器新名字”:为容器指定一个名称</li><li>-d ： 后台运行容器，并返回容器ID，也就<strong>启动守护式容器</strong>。</li><li>==<strong>-i</strong>== ： 以交互模式运行容器，通常与 -t 搭配</li><li>==<strong>-t</strong>==： 为容器重新分配一个伪输入终端，通常与 -i 搭配<ul><li>-it   就是<strong>启动交互式容器</strong></li></ul></li><li>-P (这里是大写)：随机端口映射</li><li>-p (这里是小写):  指定端口映射，有四种方式<ul><li>ip:hostPort:containerPort</li><li>ip::containerPort</li><li>hostPort:containerPort   最常用</li><li>containerPort</li></ul></li></ul></li></ul></li></ul><p><strong>守护式容器</strong>：</p><p>​    docker run -d centos，就是以后台的模式启动一个服务，但是用docker  ps 查看时，发现容器已经退出，说明：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直执行或者挂起的命令，容器就自动退出。</p><ul><li><p>docker ps [选项]</p><ul><li><p>作用：列出当前docker内的所有进程</p></li><li><p>常用选项：</p><ul><li>-q：列出当前正在运行的容器ID </li><li>-a:列出当前所有正在运行的容器 +  历史上运行过的</li><li>-l  : 显示最近创建的容器</li><li>-n : 显示最近n个创建的容器。</li><li>**–**no-trunc ：不截断输出</li></ul></li></ul></li></ul><ul><li>exit  <ul><li>退出容器并停止</li></ul></li><li>ctrl+P+Q<ul><li>退出容器但是不停止</li></ul></li></ul><ul><li>docker start  容器ID 或者 容器名字<ul><li>启动已经 EXIT 的容器</li></ul></li></ul><ul><li>docker restart  容器ID 或者 容器名字<ul><li>重启指定的容器</li></ul></li></ul><ul><li>docker stop  容器ID 或者 容器名字<ul><li>停止指定的容器</li></ul></li></ul><ul><li>docker kill 容器ID 或者 容器名字<ul><li>强制停止指定的容器</li></ul></li></ul><ul><li>docker rm   [选项] 容器ID 或者 容器名字<ul><li>作用：删除已经停止的容器</li><li>选项<ul><li>-f   ： 强制删除</li></ul></li><li>docker rm -f $(docker ps -a -q)   或者  docker ps -a -q | xargs docke rm(这句的意思是把 docker ps -a -q的结果集查出来传递给 xargs)<ul><li>删除多个容器</li></ul></li></ul></li></ul><ul><li>docker logs  [选项]  容器ID<ul><li>作用：查看容器日志</li><li>选项<ul><li>-t  : 加入时间戳</li><li>-f ：最新的日志打印</li><li>–tail   数字 ：显示最后多少条</li></ul></li></ul></li></ul><ul><li>docker top 容器 ID<ul><li>作用：查看容器内运行的进程</li></ul></li></ul><ul><li>docker inspect 容器ID <ul><li>作用：查看容器内部细节</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210728122559.png"></p><ul><li><p>docker exec -it 容器 ID  /bin/bash   和   docker  attach  容器 ID </p><ul><li><p>作用：重写进入正在运行的容器中并已命令行交互</p></li><li><p>两者区别：attach  直接进入容器启动的命令终端，不会启动新的线程</p><p>​                    exec    是在容器中打开新的终端，并且可以启动新的进程</p></li></ul></li></ul><ul><li>docker cp 容貌ID==<strong>:</strong>==/要拷贝文件的路径   拷贝到宿主机的位置   <ul><li>作用：从容器内的数据拷贝到宿主机</li></ul></li></ul><ul><li>docker commit -m=”提交的描述信息”  -a=”作者”    容器 ID    【命名空间】/给镜像起一个名字：[标签名]<ul><li>提交容器副本使之成为一个新的镜像</li></ul></li></ul><ul><li>docker history 镜像名<ul><li>作用：列出镜像的变更历史</li></ul></li></ul><h2 id="Docker镜像的原理"><a href="#Docker镜像的原理" class="headerlink" title="Docker镜像的原理"></a>Docker镜像的原理</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>​    镜像是一种轻量级，可执行的独立软件包，<strong>用来打包软件运行环境和基于运行环境开发的软件</strong>，它包含运行某个软件所需要的所有内容，包括代码，运行时环境，库，环境变量和配置文件</p><h3 id="UnionFS–联合文件系统"><a href="#UnionFS–联合文件系统" class="headerlink" title="UnionFS–联合文件系统"></a>UnionFS–联合文件系统</h3><p>​    UnionFS是一种分层、轻量级并且高性能的文件系统，它支持<strong>对文件系统的修改作为一次提交来一层层的叠加</strong>，同时可以将不同目录挂载到同一个UnionFS下，UnionFS是Dcoker镜像的基础。镜像可以通过分层来进行基础，基于基础镜像，但是没有父镜像，可以制作各种具体的应用镜像。</p><p>​    特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来。这样最终的文件系统会包含所有底层的文件和目录</p><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>​    Docker的镜像实际上是由一层一层的文件系统组成，也就是UnionFS。主要有两部分</p><p>​    <strong>bootfs</strong>(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层bootfs。这一层与我们典型的Linux、Unix系统是一样的，<strong>包含boot加载器和内核</strong>，当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>​    <strong>rootfs</strong>，在bootfs之上，包含的就是典型 Lunux系统中的  /dev   /proc  /bin   /etc 等标准目录和文件，rootfs就是各种不同的操作系统发行版。</p><p>这样最大一个好处就是<strong>共享资源</strong></p><p>比如：有多个镜像有相同的base镜像构建而来，那么宿主机只需要要在磁盘上保存一份base镜像，同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可被共享。</p><p>​    Docker镜像都是<strong>只读的</strong>，当容器一启动，一个新的可写层就会被加载到镜像的顶部。这一次、层通常被称作“容器层‘，”容器层“之下的都叫”镜像层“。</p><h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><p>Docker容器数据卷可以实现<strong>数据持久化工作</strong>和<strong>主机、容器之间，容器、容器之间的数据共享</strong></p><p>​    卷就是目录或者文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS提供一些用于持续存储或共享数据的特性。</p><p>​    卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除挂载的数据卷</p><ul><li>docker run -it  -v /宿主机绝对路径目录：/容器内目录绝对路径   镜像名<ul><li>​    说明：此命令执行后宿主机下的目录和容器内的目录就可以共享数据，容器停止退出后再次重启，主机修改后的数据也可以同步。</li></ul></li></ul><ul><li>docker run -it  -v /宿主机绝对路径目录：/容器内目录绝对路径:ro   镜像名<ul><li>:ro  表示  容器内的目录的权限为只读</li></ul></li></ul><ul><li><p>使用dockerfile添加一个或多个数据卷</p><ul><li><pre class=" language-dockerfile"><code class="language-dockerfile">#在/mydocker/dockerfile下添加一下代码FROM centosVOLUME["/dataVolumeContainer1","/dataVolumeContainer2"]CMD echo "finished ------ success"CMD /bin/bash</code></pre></li><li><p>docker build -f /mydocker/dockerfile  -t  whw/centos ==.==  (千万注意最后面有一个点，代表当前路径)     用此命令来构建镜像</p></li><li><p>指令中没标注宿主机的目录位置，会有一个默认路径与docker上的容器卷对应</p><ul><li>默认路径为    /var/lib/docker/volumes/   的一个文件夹内</li></ul></li></ul></li></ul><p><strong>数据卷容器</strong> ：</p><ul><li>容器1挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，称之为数据卷容器</li><li>挂载的指令为   docker  run  -it   –name  容器n  –volumes -from  容器1  镜像名:TAG</li></ul><p>特点：</p><ul><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的声明周期一直持续到没有容器使用它为止</li></ul><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>编写dockerfile文件，使用docker  build 命令执行，获得一个自定义的镜像</p><pre class=" language-dockerfile"><code class="language-dockerfile">#以centos为例FROM scratch #这个是Base镜像MAINTAINER The CentOS Project <cloud-ops@centos.org>ADD centos-8-x86_64.tar.xz /LABEL org.label-schema.schema-version="1.0"        org.label-schema.name="CentOS Base Image"        org.label-schema.vendor="CentOS"        org.label-schema.license="GPLv2"        org.label-schema.build-date="20201204"CMD ["/bin/bash"]</code></pre><h3 id="DockerFile的语法"><a href="#DockerFile的语法" class="headerlink" title="DockerFile的语法"></a>DockerFile的语法</h3><ul><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ul><p>docker build的大致流程：</p><ul><li><p>docker从基础镜像运行一个容器</p></li><li><p>执行一条指令并对容器做出修改</p></li><li><p>执行 ADD 操作提交一个新的镜像层</p></li><li><p>docker 再基于刚提交的镜像运行一个新容器</p></li><li><p>逐步执行dockerfile中的指令直到全部完成</p></li></ul><p>从应用软件的角度来看，DockerFile、Docker镜像与Docker容器分别代表软件的三个不同阶段</p><ul><li>DockerFile是软件的原材料</li><li>Docker镜像是软件的交付品</li><li>Docker容器则可以认为是软件的运行态</li></ul><p>​      DockerFile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石</p><table><thead><tr><th>保留字指令</th><th>作用</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像，当前新镜像是基于哪个镜像的</td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td>RUN</td><td>容器构建时需要运行的命令</td></tr><tr><td>EXPOSE</td><td>该镜像变成实例启动后对外服务的端口</td></tr><tr><td>WORKDIR</td><td>指定在创建容器后，终端默认登录进来的工作目录</td></tr><tr><td>ENV</td><td>用来在构建镜像过程中设置环境变量</td></tr><tr><td>ADD</td><td>拷贝主机目录下的文件到镜像+解压缩</td></tr><tr><td>COPY</td><td>拷贝主机目录下的文件到镜像</td></tr><tr><td>VOLUME</td><td>容器数据卷，用于数据保存和持久化工作</td></tr><tr><td>CMD</td><td>指定一个容器启动时要运行的命令，可以有多个，但只有最后一个生效，<br />注意：跟在镜像名后面的command，运行时会替换CMD的默认值</td></tr><tr><td>ENTRYPOINT</td><td>指定一个容器启动时要运行的命令，如果docker run后面参数，命令会被追加</td></tr><tr><td>ONBUILD</td><td>当构建一个被继承的DockerFie时运行命令，父镜像在被子继承后父镜像的onbuild被触发</td></tr></tbody></table><h3 id="自定义镜像-MyCentOS"><a href="#自定义镜像-MyCentOS" class="headerlink" title="自定义镜像 MyCentOS"></a>自定义镜像 MyCentOS</h3><pre class=" language-dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER whw<1721616038@qq.com>ENV MYPATH /user/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "success ------ ok"CMD /bin/bash</code></pre><p>构建命令： docker build -f /mydocker/DockerFile  -t mycentos:1.1 .</p><h3 id="自定义镜像tomcat9"><a href="#自定义镜像tomcat9" class="headerlink" title="自定义镜像tomcat9"></a>自定义镜像tomcat9</h3><pre class=" language-dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER whw<whw@qq.com>COPY c.txt /usr/local/cincontainer.txtADD jdk-8u301-linux-x64.tar.gz /usr/local/ADD apache-tomcat-9.0.50.tar.gz /usr/local/RUN yum -y install vimENV MYPATH /usr/localWORKDIR $MYPATHENV JAVA_HOME /usr/local/jdk1.8.0_301ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.50ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.50ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_BASE/binEXPOSE 8080#CMD ["/usr/local/apache-tomcat-9.0.50/bin/startup.sh","run"]CMD /usr/local/apache-tomcat-9.0.50/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.50/bin/logs/catalina.out</code></pre><p>进入   /whw/mydockerfile/tomcat9/  下</p><p>构建指令：  docker build -f /whw/mydockerfile/tomcat9/DockerFile -t whwtomcat9 .</p><p>运行： </p><p>docker  run -it -p 8888:8080   -v /whw/mydockerfile/tomcat9/test:/usr/local/apache-tomcat-9.0.50/webapps/test  -v /whw/mydockerfile/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.50/logs  –privileged=true  whwtomcat9</p><h2 id="镜像-阿里云的推拉"><a href="#镜像-阿里云的推拉" class="headerlink" title="镜像-阿里云的推拉"></a>镜像-阿里云的推拉</h2><p><a href="https://cr.console.aliyun.com/">阿里云镜像服务</a></p><p>创建命名空间 —–》   创建镜像仓库  （选择本地仓库）</p><p>这里以tomcat为例</p><ul><li><p>登录阿里云Docker Registry</p><ul><li><pre class=" language-shell"><code class="language-shell">docker login --username=瀚7777 registry.cn-hangzhou.aliyuncs.com密码是whw172161</code></pre></li></ul></li></ul><ul><li><p>从Registry中拉取镜像</p><ul><li><pre><code>docker pull registry.cn-hangzhou.aliyuncs.com/han77/[镜像名]:[镜像版本号]</code></pre></li></ul></li></ul><ul><li>将镜像推送到Registry<ul><li><pre><code>docker login --username=瀚7777 registry.cn-hangzhou.aliyuncs.comdocker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/[仓库名]/[镜像名]:[镜像版本号]docker push registry.cn-hangzhou.aliyuncs.com/[仓库名]/[镜像名]:[镜像版本号]</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql高级</title>
      <link href="2021/06/02/MySQL%E9%AB%98%E7%BA%A7/"/>
      <url>2021/06/02/MySQL%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL高级"><a href="#MySQL高级" class="headerlink" title="MySQL高级"></a>MySQL高级</h1><h2 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h2><p>高级内容包括：</p><ul><li>mysql内核</li><li>sql优化攻城狮</li><li>mysql服务器的优化</li><li>各种参数常量设定</li><li>查询语句优化</li><li>主从复制</li><li>软硬件升级</li><li>容灾备份</li><li>sql编程</li></ul><p>完整的mysql优化需要很深的功底，大公司甚至有专门的DBA写上述内容</p><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ul><li><p>rpm -ivh Xxx.rpm     安装软件</p></li><li><p>service mysql start    启动mysql       service mysql stop   停止mysql</p></li><li><p>/usr/bin/mysqladmin -u root password 172161     给mysql设置密码</p></li><li><p>chkconfig mysql on          开机自启动</p></li><li><p>chkconfig –list|grep mysql      查看每个运行级别的状态</p></li><li><table><thead><tr><th>路径</th><th>存放的东西</th></tr></thead><tbody><tr><td>/var/lib/mysql</td><td>mysql的数据库文件，比如数据表那些东西</td></tr><tr><td>/usr/share/mysql</td><td>配置文件的目录</td></tr><tr><td>/usr/bin</td><td>相关命令目录</td></tr></tbody></table></li><li><p>show variables like ‘%char%’;    查看字符集</p></li></ul><p>设置字符集</p><p>【client】下面最后一行  添加   default-character-set=utf8</p><p>【mysqld】第二行添加</p><ul><li>character_set_server=utf8</li><li>character_set_client=utf8</li><li>collation-server=utf8_general_ci</li></ul><p>【mysql】下最后一行添加    default-character-set=utf8</p><p>添加完之后重启服务，重建库</p><h3 id="mysql主要配置文件"><a href="#mysql主要配置文件" class="headerlink" title="mysql主要配置文件"></a>mysql主要配置文件</h3><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>二进制日志 log-bin</td><td>主从复制</td></tr><tr><td>错误日志log-error</td><td>默认是关闭的，记录严重的警告和错误信息，<br />每次启动和关闭的详细信息等。</td></tr><tr><td>查询日志log</td><td>默认关闭，记录查询的sql语句，如果开启会减低mysql 的整体性能<br />因为记录日志也需要消耗资源</td></tr><tr><td>数据文件</td><td>frm存放表结构<br/>myd存储数据<br/>myi存储查找数据的索引</td></tr></tbody></table><h3 id="mysql逻辑架构"><a href="#mysql逻辑架构" class="headerlink" title="mysql逻辑架构"></a>mysql逻辑架构</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210729214517.png"></p><h4 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h4><p>​    最上层是一些客户端和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于tcp/ip通信。主要完成一些类似于连接处理，授权认证以及相关的安全方案，在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限</p><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>​    第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程，函数等。在该层，服务器会解析查询并创建相应的内部解析数，并对其完成相应的优化，如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能</p><h4 id="引擎层"><a href="#引擎层" class="headerlink" title="引擎层"></a>引擎层</h4><p>​    存储引擎层，存储引擎(可拔插式的)真正的负责了MySQL数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p><h4 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h4><p>​    数据存储层，主要是将数据存储在运行与裸设备的文件系统之上，并完成与存储引擎的交互</p><h3 id="存储引擎介绍"><a href="#存储引擎介绍" class="headerlink" title="存储引擎介绍"></a>存储引擎介绍</h3><p>show engines;  查看数据库的所有引擎</p><p>show variables like ‘%storage_engine%’;   查看存储引擎</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210729224448.png"></p><table><thead><tr><th>对比项</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>主外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会把整个表锁住，不适合高并发的操作。</td><td>行锁，操作时只锁某一行，不对其他行有影响，==适合高并发==</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引，还要缓存真实数据，对内存要求较高，<br />而且内存大小对性能有决定性的影响</td></tr><tr><td>表空间</td><td>小</td><td>大</td></tr><tr><td>关注点</td><td>性能</td><td>事务</td></tr><tr><td>默认安装</td><td>是</td><td>是</td></tr></tbody></table><p>​    </p><p>Percona为MySQL数据库服务器进行了改进，在功能和性能上较MySQL有显著的提升。该版本提升了在高负载情况下的InnoDB性能，为DBA提供一些非常有用的性能诊断；另外有更多的参数和命令来控制服务器行为。</p><p>   该公司新建了一款存储引擎较xtradb ，完全可以替代Innodb，并且在性能和并发上做的更好。</p><p>  阿里巴巴大部分mysql数据库其实使用的是percona的原型加以修改</p><p> ==<strong>AliSql + AliRedis</strong>==</p><h2 id="索引优化分析"><a href="#索引优化分析" class="headerlink" title="索引优化分析"></a>索引优化分析</h2><ul><li><p>sql语句的优化</p></li><li><p>慢查询的开启并捕获</p></li><li><p>explain + 慢SQL分析</p></li><li><p>show  profile查询SQL在mysql服务器里面的执行细节和声明周期情况</p></li><li><p>SQL数据库服务器的参数调优</p></li></ul><h3 id="常见的join查询"><a href="#常见的join查询" class="headerlink" title="常见的join查询"></a>常见的join查询</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210729235119.png"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名</code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210729235357.png"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名</code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730000223.png"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名</code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730000259.png"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名<span class="token keyword">WHERE</span> B<span class="token punctuation">.</span>主键字段名 <span class="token operator">IS</span> <span class="token boolean">NULL</span></code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730000441.png"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名<span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">IS</span> <span class="token boolean">NULL</span></code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730000553.png"></p><pre class=" language-mysql"><code class="language-mysql">SELECT <select_list>FROM    TableA ALEFT JOIN TableB BON A.外键字段名 = B.主键字段名#union默认去重UNIONSELECT <select_list>FROM    TableA ARIGHT JOIN TableB BON A.外键字段名 = B.主键字段名</code></pre><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730000700.png"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名<span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span><span class="token keyword">FROM</span>    TableA A<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B<span class="token keyword">ON</span> A<span class="token punctuation">.</span>外键字段名 <span class="token operator">=</span> B<span class="token punctuation">.</span>主键字段名<span class="token keyword">WHERE</span>  B<span class="token punctuation">.</span>主键字段名 <span class="token operator">IS</span> <span class="token boolean">NULL</span></code></pre><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><ul><li><p>索引 Index 是帮助MySQL高效获取数据的==<strong>数据结构</strong>==，其本质就是数据结构</p><p>索引对数据进行可以排序和快速查找，==<strong>where 后面的查找和order by 后面的排序对索引都会有影响</strong>==</p><p>索引的目的在于提高查询效率</p><p>比如要查“mysql ” 这个单词，逐个定位每一个字母，直到找到为止。</p></li></ul><ul><li>索引可以简单理解为  ==<strong>排好序的快速查找数据结构</strong>==<ul><li>为什么可以快速查找到数据？ ：在数据之外，<strong>数据库系统还维护着一个满足特定查找算法的数据结构</strong>，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法。这种数据结构就是索引。</li></ul></li></ul><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730070630.png"></p><ul><li>一般说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</li></ul><ul><li>​    <strong>我们平时所说的索引，如果没有特别指明，都是B+树结构组织的索引，</strong>其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是是使用的B+树索引，统称索引。当然，除了B+树这种类型的索引之外，还有哈希索引（hash index）等。</li></ul><pre class=" language-java"><code class="language-java">【补充：】为什么要用B<span class="token operator">+</span>树，不用B树：<span class="token number">1</span><span class="token punctuation">.</span> B<span class="token operator">+</span>树的磁盘读写代价更低：B<span class="token operator">+</span>树的内部节点并没有指向关键字具体信息的指针，具体信息都放在了叶结点，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。<span class="token number">2</span>、B<span class="token operator">+</span>树的查询效率更加稳定：由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。<span class="token number">3</span>、数据库索引采用B<span class="token operator">+</span>树的主要原因是：B树在提高了IO性能的同时并没有解决元素遍历的效率低下的问题，正是为了解决这个问题，B<span class="token operator">+</span>树应用而生。B<span class="token operator">+</span>树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作或者说效率太低。   </code></pre><h3 id="索引的优劣"><a href="#索引的优劣" class="headerlink" title="索引的优劣"></a>索引的优劣</h3><ul><li>优势<ul><li>通过索引列对数据进行排序，<strong>降低数据排序的成本</strong>，降低了CPU的消耗</li><li>排序之后可以<strong>提高数据检索的效率</strong>，降低数据库的 IO 成本。</li></ul></li><li>劣势<ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的。</li><li>​      索引在大大提高了查询速度的同时，还会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件中每次更新添加了索引列的字段，都会调整因为更新所带来的的键值变化后的索引信息。</li><li>   索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或者优化查询</li></ul></li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><ul><li><p>单值索引：一个索引只包含单个列，一个表可以有多个单列索引</p></li><li><p>唯一索引：索引列的值必须唯一，但允许有空值</p></li><li><p>复合索引：一个索引包含多个列</p></li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>创建<ul><li>CREATE [UNIQUE]  INDEX 索引名 ON 表名(字段1,字段2。。)</li><li>ALTER 表名 ADD [UNIQUE]   INDEX 索引名 ON (字段1,字段2。。)</li></ul></li></ul><ul><li>删除<ul><li>DROP INDEX [索引名]  ON 表名</li></ul></li></ul><ul><li>查看<ul><li>SHOW INDEX FROM 表名</li></ul></li></ul><ul><li>添加数据表的索引<ul><li>ALTER TABLE 表名 ADD PRIMARY  KEY 索引名(字段1…):该语句添加一个主键，这意味着索引值必须是唯一的，且不能为null</li><li>ALTER TABLE 表名 ADD UNIQUE  索引名(字段1…): 这条语句创建索引的值必须是唯一的（除了null，null可能会出现多次）</li><li>ALTER TABLE 表名 ADD INDEX  索引名(字段1…): 添加普通索引，索引值可出现多次</li><li>ALTER TABLE 表名 ADD FULLTEXT 索引名(字段1…):该语句指定了索引为FULLTEXT，用于全文索引</li></ul></li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210730095611.png"></p><p>【初始化过程】</p><p>一颗B+树，浅蓝色的块称之为一个磁盘块，可以看到每一个磁盘块包含几个数据项(蓝色部分)和指针(黄色部分)，如磁盘块1包含数据项17和35，包含指针P1、P2、P3， P1表示小于17的磁盘块，P2表示大于17和小于35的磁盘块，P3表示大于35的磁盘块。==<strong>真实的数据存在于叶子结点</strong>==，即3,5,9,10,13.。。。。。，==<strong>非叶子结点并不存储真实的数据，只存储指引搜索方向的数据项</strong>==</p><p>【查找过程】</p><p>​     如果要查找数据项29，首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短(相磁盘的 IO ) 可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3有磁盘加载到内存，发生第二次 IO ，29 在26和30 之间，锁定磁盘块3的P2指针，通过指针加载到磁盘块8到内存，发生第三次 IO，同时内存中做二分查找找到29 ，结束查询，总计三次 IO 。</p><p>哪些情况需要建索引</p><ul><li><strong>主键自动建立唯一索引</strong></li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>where条件里用到的字段</li><li>单值/组合索引的选择问题，在高并发下倾向于复合索引</li><li><strong>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</strong></li><li><strong>查询中需要统计或分组的字段</strong></li></ul><p>哪些情况不需要建索引</p><ul><li>表记录太少</li><li>经常增删改的表，因为每次更新不单单是更新了记录还会更新索引</li><li>数据重复且分布平均的表字段，因此应该只为最经常查询和排序的数据列建立索引。如果某个数据类包含许多重复的内容，为他建立索引没有太大的实际效果</li></ul><p><strong>索引的选择性</strong>是指索引列中不同值的数目与表中记录数的比，索引的选择性越接近1，这个索引的效率就越高</p><h3 id="性能分析的三方面"><a href="#性能分析的三方面" class="headerlink" title="性能分析的三方面"></a>性能分析的三方面</h3><h4 id="1-MySQL-Query-Optimizer-优化器"><a href="#1-MySQL-Query-Optimizer-优化器" class="headerlink" title="1. MySQL Query Optimizer(优化器)"></a>1. MySQL Query Optimizer(优化器)</h4><p>MySQL中有专门负责优化SELECT语句的优化器模块，主要功能就是通过计算分析系统中收集到的系统信息，为客户端请求的Query提供MySQL认为最优的执行计划（但不见的是DBA认为最优的），意思就是当输入一个SQL语句时，MySQL Query Optimizer会自己寻找它认为合适的顺序来执行（此处的顺序和建索引的顺序有关），并不是你输入什么顺序，他就会执行什么顺序。</p><h4 id="2-解决外界因素"><a href="#2-解决外界因素" class="headerlink" title="2. 解决外界因素"></a>2. 解决外界因素</h4><ul><li>CPU: 在饱和的时候，数据装入内存或从磁盘上读取数据</li><li>IO：磁盘I/O频繁发生在装入数据远大于内存容量的时候</li><li>服务器硬件的性能瓶颈</li></ul><h4 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h4><p>查看执行计划：</p><p>​      使用Explain关键字可以模拟优化器执行SQL查询语句，就可以知道MySQL是如何处理SQL语句的，进而分析查询语句或者表结构的性能瓶颈</p><p>作用，查看以下内容：</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引可以被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p>语法：</p><ul><li><p>Explain + SQL 语句   </p><p>包含的信息</p></li></ul><table><thead><tr><th>表头</th><th>作用</th></tr></thead><tbody><tr><td>==id==</td><td>select查询的序列号，包含一组数字，表示查询中执行的select子句或操作表的顺序<br />id全相同，MySQL执行顺序为由上到下顺序执行 <br />id全不同，id值越大优先级越高，越先被执行<br />id部分不同，id值大的先被执行，id值相同的顺序由上到下执行</td></tr><tr><td>select_type</td><td>SIMPLE：简单的select查询，查询中不包含子查询或者 UNION<br />PRIMARY：查询中包含复杂的子部分，最外层查询被标记为PRIMARY<br />SUBQUERY：select或者where中的子查询<br />DERIVED：在from列表中包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子    查询，把结果放在临时表里。<br />UNION： UNION之后的select被标记为 UNION，若UNION包含在from子句的子查询中，外层select将被标记为DERIVED<br />UNION RESULT ：多个表联合后的表</td></tr><tr><td>table</td><td>显示这一行的数据是关于哪张表的，&lt;dericed3&gt; 中的3代表衍生自 id为3的select语句</td></tr><tr><td>==type==</td><td>1&gt;  system：表只有一条记录(等于系统表)，这是const类型的特例，平时不会出现，这个也可以忽略<br/>2&gt; const：通过索引一次就找到了，const用于比较primary key 或者 unique索引，因为只匹配一行数据<br/>3&gt; eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引<br/>4&gt; ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能找到多个符合条件的行，所以他应该属于查找和扫描的混合体<br/>5&gt; range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是where语句中出现了between、&lt; 、&gt; 、in等的查询，这种范围扫描所有比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部引擎<br/>6&gt; index：Full Index Scan，index与ALL的区别在为index类型只遍历索引数，这通常比ALL快，因为索引文件一般比数据文件小（也就是说虽然all和index都是读全表，但是index是从索引中读取的，而all是从硬盘中读的）<br/>7&gt; ALL：FULL TABLE SCAN  将遍历全表以找到匹配的行<br />以上顺序是从最好到最差。一般来说，得保证查询至少达到range级别，最好能达到ref</td></tr><tr><td>possible_keys</td><td>显示零个，一个或多个可能应用在这张表中的索引，==但不一定被查询实际使用==</td></tr><tr><td>==key==</td><td>实际使用的索引，如果为null，则表明索引没有建或者建了没有使用，==查询中若使用了覆盖索引，则该索引仅出现在key列表中==</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好，其显示的值为索引字段的最大可能长度，并非实际使用的长度。</td></tr><tr><td>ref</td><td>显示索引的哪一列被使用了，也可以是一个常数。此字段说明哪些列或者常量被用于查找索引列上的值。</td></tr><tr><td>==rows==</td><td>根据表统计信息及索引选用情况，大致估算出找到所需要的 记录时需要读取的行数</td></tr><tr><td>==Extra==</td><td>包含不适合在其他列中显示但十分重要的额外信息<br/>1&gt; ==Using filesort(九死一生)==：说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”。<br />2&gt; ==Using temporary(十死无生)==：使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常用于order by 和分组查询group by<br/>3&gt; ==Using index==：表示相应select操作中使用了覆盖索引，避免访问了表的数据行，效率很高，如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。<br/>4&gt; Using where：使用了where过滤<br/>5&gt; Using join buffer：使用了连接缓存<br/>6&gt; Impossible where：where子句的值总是false，不能用来获取任何<strong>元组</strong><br/>7&gt; select table optimized away：在没有order by子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化count(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。<br />8&gt; distinct ： 优化distinct 操作，在找到第一匹配的元组后停止找同样值的动作</td></tr></tbody></table><p>【新发现】查询语句后面加    \G   ，查询结果会用键值对显示  </p><p>【元组】：关系表中的一行称为一个元组。元组可表示一个实体或实体之间的联系。</p><p>【<strong>覆盖索引</strong>】：</p><ul><li>理解方式一： select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，换句话说==查询列要被所建的索引覆盖==</li><li>理解方式二： 索引是找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行，毕竟索引叶子结点存储了它们索引的数据；当能通过读取索引就可以得到想要的数据，那就不需要读取行了，一个索引包含了满足查询结果的数据就叫做覆盖索引。</li><li>​    注意：如果要使用覆盖索引，一定要注意select列表只取出需要的列，不可select * 。因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</li></ul><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><h4 id="多表优化："><a href="#多表优化：" class="headerlink" title="多表优化："></a>多表优化：</h4><ul><li>尽可能减少jion语句中的循环总次数，“永远用小的结果集驱动大的结果集”</li><li>优先优化嵌套循环的内存循环</li><li>给join语句中被驱动的表上的连接字段添加索引，也就是左连的接索引建右表，右连接的索引建左表</li></ul><p>优化总结：</p><ul><li>查询的字段尽可能是索引中的字段的子集，也就是尽量使用覆盖索引，不要使用  select  * </li><li>过滤条件所使用的字段也尽可能是索引中的字段的子集。</li><li>查询从索引的最左前列开始并且<strong>不跳过索引中的列</strong>，如果跳过了，后面的索引就失效</li><li>不在索引列上做任何操作，包括==<strong>计算，函数，自动或手动类型转换</strong>==，这些都会导致索引失效而转向全表扫描</li><li>范围条件后的列的索引全部失效，范围的那个字段只能用到索引的排序功能</li><li>在使用  ！=  和  &lt;&gt;     时，会导致无法使用索引，从而导致全表扫描</li><li> is null  和  is  not null  导致索引失效</li><li>以通配符开头( ‘%abc’ )时索引会失效变成全表扫描。但**%写中间或结尾不会影响索引**。<ul><li>如果非要用两边都是%的模糊查询，可以用覆盖索引来解决此问题</li></ul></li><li><strong>字符串不加 单引号 会导致索引失效</strong></li><li>用 or 连接时也会索引失效，要少用</li></ul><p>做练习题看<a href="https://www.bilibili.com/video/BV1KW411u7vy?p=44">优化练习题</a></p><h4 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a>小表驱动大表</h4><p>也就是小的数据集驱动大的数据集</p><p>如果 A表比B表大，使用 select * from A where id in  (select * from B);</p><p>如果 A表比B表小，使用 select * from A where exists  (select * from B);</p><h3 id="order-by-优化"><a href="#order-by-优化" class="headerlink" title="order by 优化"></a>order by 优化</h3><p>mysql两种排序方式，文件排序或扫描有序索引排序</p><p>mysql能为排序与查询使用相同的索引</p><p>示例；其中索引列为a  b  c </p><ul><li><p>order by 能使用索引最左前端</p><ul><li>order by a</li><li>order by a,b</li><li>order by a,b,c</li><li>order by a DESC, b DESC ,c DESC</li></ul></li><li><p>如果where使用索引的最左前端定义为常量，则order by能使用索引</p><ul><li>where  a  =  const   order by b,c</li><li>where a= const and  b = const order by c</li><li><strong>where a= const and b&gt;const order b,c</strong></li></ul></li><li><p>不能使用索引的情况</p><ul><li>order by a ASC,b DESC ,c ASC   排序不一致</li><li>where g = const order by b,c    丢失a索引</li><li>where a = const order by c       丢失b索引</li><li>where a = const order by a,d    d不是索引的一部分</li><li>where a in(…) order by b,c       对于排序来说，多个相等条件也是范围查询</li></ul></li></ul><p>group by 和 order by 差不多，需要注意以下几点</p><ul><li> group by实质是先排序后分组，遵照索引建的最佳左前缀</li><li>当无法使用索引列时，增大max_length_for_sort_data参数设置，增大sort_buffer_size参数设置</li><li>where 高于 having，能写在where限定的条件就不要再去having限定了</li></ul><h2 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h2><h3 id="慢查询日志分析"><a href="#慢查询日志分析" class="headerlink" title="慢查询日志分析"></a>慢查询日志分析</h3><ul><li>MySQL的慢查询日志是MySQL提供的一种日志记录，他用来记录MySQL中响应时间超过阈值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中，</li><li>具体值运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中，long_query_time的默认值为10，意思是运行10秒以上的语句。</li><li>由他来查看哪些SQL超出了最大忍耐时间值，比如一条sql执行超过5秒，就算是慢SQL，希望能收集超过5秒的sql，结合之前的explain进行全面分析。</li></ul><p>默认情况下 ，MySQL没有开启慢查询日志，需要手动来设置这个参数。</p><p><strong>如果不是调优需要的话，一般不建议开启</strong>，因为开启慢查询日志或多或少带来一些性能影响，慢查询日志支持将日志记录写入文件。</p><ul><li>查看慢查询日志：show variables like ‘%slow_query_log%’;</li><li>开启慢查询日志：set global slow_query_log = ‘ON’;<ul><li>使用此命令开启只对当前数据库生效，重启后也会生效</li></ul></li></ul><ul><li><p>查看long_query_time  ：show variables like ‘%long_query_time%’;</p><ul><li>需要重新一个会话才可以看到修改后的值</li></ul></li><li><p>修改long_query_time  :   set global long_query_time = 3;    </p><ul><li>重开数据库才生效</li></ul></li><li><p>show global status like ‘%Slow_queries%’;</p><ul><li>查看有几条慢查询sql</li></ul></li></ul><p>日志分析工具:mysqldumpslow</p><p>根据   mysqldumpslow –help   查看命令怎么使用</p><p><strong>这些命令不是在mysql中运行的</strong></p><ul><li><p>得到返回记录最多的10个sql</p><ul><li>mysqldumpslow -s -r -t 10 /var/lib/mysql/localhost-slow.log</li></ul></li><li><p>得到访问次数最多的10个sql</p><ul><li>mysqldumpslow -s -c -t 10 /var/lib/mysql/localhost-slow.log</li></ul></li><li><p>得到按照时间排序的前10个sql里面包含左连接的查询语句</p><ul><li>mysqldumpslow -s -c -t 10 -g “left join” /var/lib/mysql/localhost-slow.log</li></ul></li></ul><p>建议在使用这些命令时结合 | 和 more  使用，否则可能出现爆屏的情况</p><h3 id="批量插入数据脚本"><a href="#批量插入数据脚本" class="headerlink" title="批量插入数据脚本"></a>批量插入数据脚本</h3><ul><li>建表</li></ul><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE dept(id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,dname VARCHAR(20) NOT NULL DEFAULT "",loc VARCHAR(13) NOT NULL DEFAULT "") ENGINE=INNODB DEFAULT CHARSET='GBK';</code></pre><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE emp(id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,empno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,ename VARCHAR(20) NOT NULL DEFAULT ", job VARCHAR(9) NOT NULL DEFAULT ",mgr MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,hiredate DATE NOT NULL ,sal DECIMAL(7,2) NOT NULL,comm DECIMAL(7,2) NOT NULL,deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0)ENGINE=INNODB DEFAULT CHARSET=GBK ;</code></pre><ul><li>开启二进制日志参数，如果mysql 重启，参数恢复默认值<ul><li>set global log_bin_trust_function_creators=1;</li></ul></li></ul><ul><li>创建函数</li></ul><p>随机产生字符串</p><pre class=" language-mysql"><code class="language-mysql">DELIMITER $CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)BEGINDECLARE chars_str VARCHAR(100) DEFAULT 'abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';DECLARE return_str VARCHAR(255) DEFAULT "";DECLARE i INT DEFAULT 0;WHILE i < n DOSET return_str = CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));SET i = i+1;END WHILE;RETURN return_str;END $</code></pre><p>随机产生部门编号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> rand_num<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">SET</span> i <span class="token operator">=</span> FLOOR<span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> i<span class="token punctuation">;</span><span class="token keyword">END</span> $</code></pre><p>创建往emp中插入数据的存储过程</p><pre class=" language-mysql"><code class="language-mysql">DELIMITER $CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))BEGINDECLARE i INT DEFAULT 0;#set autocommit =0把autocommit设置成0SET autocommit= 0; .REPEATSET i = i + 1;INSERT INTO emp VALUES (NULL,(START+i),rand_string(6),'SALESMAN',0001,CURDATE(),2000, 400,rand_num());UNTIL i = max_numEND REPEAT;COMMIT;END $</code></pre><p>创建往dept表添加随机数</p><pre class=" language-mysql"><code class="language-mysql">DELIMITER $CREATE PROCEDURE insert dept(IN START INT(10),IN max_ num INT(10))BEGINDECL ARE i INT DEFAULT 0;SET autocommit = 0; REPEATSET i= i+ 1;INSERT INTO dept (deptno ,dname,loc ) VALUES ((START+i) ,rand string( 10),rand string(8));UNTIL i = max_ numEND REPEAT;COMMIT;END $</code></pre><ul><li>调用存储过程<ul><li>DELIMITER ；</li><li>CALL insert_dept(100,10);</li><li>CALL insert_emp(100001,500000);</li></ul></li></ul><h3 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h3><p>​     Show Profile是mysql提供可以用来分析当前会话中语句执行的资源消耗情况，可以用于sql调优的测量</p><p>默认情况下处于关闭状态，并保存最近15次的运行结果</p><ul><li>开启 Show Profile ：set profiling = on;</li><li>查看Show Profile： show variables like ‘%profiling%’;</li></ul><ul><li>show profiles;  查看结果</li><li>show profile [参数] for query 要查看的Query_id;<ul><li>参数类型<ul><li>ALL ： 显示所有的开销信息</li><li>CLOCK IO：显示块IO相关的开销信息</li><li>CONTEXT SWITCHES ：上下文切换相关的开销信息</li><li>CPU：显示CPU相关的开销信息</li><li>IPC：显示发送和接收相关的开销信息</li><li>MEMEORY:显示内存相关的开销信息</li><li>PAGE FAULTS：显示页面错误相关的开销信息</li><li>SOURCE：显示和Source_function,Source_file,Source_line相关的开销信息</li><li>SWAPS：显示交换次数相关的开销信息</li></ul></li></ul></li></ul><p>诊断SQL：</p><p>show profiles;  查看结果里面需要注意是否出现以下步骤</p><ul><li>converting HEAP to  MyISAM：查询结果太大，内存不够用了往磁盘上搬。</li><li>Creating tmp table 创建临时表<ul><li>拷贝数据到临时表</li><li>用完再删除</li></ul></li><li>Copying to tmp table on disk ：把内存中临时表复制到磁盘，<strong>这一步骤很危险</strong>。</li><li>locked</li></ul><h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><p>==<strong>不要再开发环境下开启</strong>==</p><p>记录所有的SQL语句</p><ul><li><p>开启命令： set global general_log = 1;</p></li><li><p>以表的形式输出 ：set global log_output = ‘TABLE’;</p></li></ul><p>此后，你编写的所有sql语句，都会记录到mysql库里的general_log 表，可以用下面的命令查看</p><ul><li>select * from mysql.general_log;</li></ul><h2 id="MySQL锁机制"><a href="#MySQL锁机制" class="headerlink" title="MySQL锁机制"></a>MySQL锁机制</h2><p>读锁（共享锁）：针对同一分数据，多个读操作可以同时进行而不会互相影响</p><p>写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁</p><h3 id="表锁（偏读）"><a href="#表锁（偏读）" class="headerlink" title="表锁（偏读）"></a>表锁（偏读）</h3><ul><li><p>特点：偏向MyISAM存储，开销小，加锁快，无死锁，锁粒度大，发生锁冲突的概率最高，并发度最低</p></li><li><p>手动增加表锁</p><ul><li>lock table 表名字1  read/write  ,  表名字2    read/write;</li></ul></li><li><p>查看哪些表加了锁：</p><ul><li>show  open tables ;</li></ul></li><li><p>解锁</p><ul><li>unlock tables;</li></ul></li><li><p>分析表锁定情况</p><ul><li>show status like ‘%table%’</li><li>这里有个两个状态变量记录MySQL内部表级锁定的情况：<ul><li>Table_locks_waited：产生表级锁锁定的次数，表示可以立即获取锁的查询次数，每次获取锁值就加一</li><li>Table_locks_immediate：出现表级锁争用而发生等待的次数（不能立即获取锁的次数），此值高说明存在着较严重的表级锁争用情况</li></ul></li></ul></li></ul><h4 id="加读锁"><a href="#加读锁" class="headerlink" title="加读锁"></a>加读锁</h4><table><thead><tr><th>SESSION_1</th><th>SESSION_2</th></tr></thead><tbody><tr><td>表获得读锁</td><td>连接终端</td></tr><tr><td>当前会话可以查询该表记录</td><td>其他会话可以查询该表记录</td></tr><tr><td>当前会话不能查询其他没有锁定的表</td><td>其他会话可以查询或者更新未锁定的表</td></tr><tr><td>当前会话中更新锁定的表会提示错误</td><td>其他会话更新锁定表会一直等待获得锁</td></tr><tr><td>释放锁</td><td>会话2获得锁，插入操作完成</td></tr></tbody></table><h4 id="加写锁"><a href="#加写锁" class="headerlink" title="加写锁"></a>加写锁</h4><table><thead><tr><th>SESSION_1</th><th>SESSION_2</th></tr></thead><tbody><tr><td>获取表的 Write  锁</td><td>待会话1加锁后，会话2连接终端</td></tr><tr><td>当前会话对锁定的表可读可写</td><td>其他会话对锁定表所有操作被阻塞，等待锁被释放</td></tr><tr><td>释放锁</td><td>会话2获得锁，查询返回</td></tr></tbody></table><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>MySQL的表级锁有两种模式：</p><ul><li>表共享读锁（Table Read Lock）</li><li>表独占写锁（Table Write Lock）</li></ul><table><thead><tr><th>锁类型</th><th>可否兼容</th><th>可读</th><th>可写</th></tr></thead><tbody><tr><td>读锁</td><td>是</td><td>是</td><td>否</td></tr><tr><td>写锁</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><p>结合上表，所有对MyISAM表进行操作，会有以下情况：</p><ul><li>对MyISAM表加读锁，不会阻塞其他进程对同一表的读和写操作，但会阻塞对同一表的写请求，只有当读锁释放后，才会执行其他进程的操作。</li><li>对MyISAM表加写锁，会阻塞其他进程对同一表的读和写操作，只有当锁释放后，才会执行其他进程的读写操作。</li></ul><p>简言之，就是==<strong>读锁会阻塞写，但是不会堵塞读，而写锁则会把读和写都堵塞</strong>==。</p><p>MyISAM的读写锁调度是写优先，<strong>不适合做写为主表的引擎</strong>，因为写锁会阻塞其他线程的所有操作，如果有大量的更新，就会使得查询很难得到锁，从而造成永远阻塞。</p><h3 id="行锁（偏写）"><a href="#行锁（偏写）" class="headerlink" title="行锁（偏写）"></a>行锁（偏写）</h3><p><strong>行锁是在引擎层由各个引擎自己实现的，并且基于索引加载</strong>，不过有的引擎就不支持，比如MyISAM</p><ul><li>特点：偏向InnoDB存储引擎，开销大 ，加锁慢，会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高，InnoDB与MyISAM的最大不同有两点：一是支持事务，二是采用了行级锁</li></ul><ul><li>无索引会导致行锁升级为表锁</li></ul><ul><li><p>间隙锁</p><ul><li><p>当用范围条件而不是相等条件检索数据，并请求共享或排它锁，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在记录，叫做“间隙(GAP)”</p><p>InnoDB也会给这个间隙加锁，这种锁机制就是所谓的间隙锁</p></li><li><p>危害：因为查询执行过程中通过范围查找的话，他会锁定这个范围内所有的索引键值，即使这个键值不存在，间隙锁有一个致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据，在某些场景下这可能会对性能造成很大的危害。</p></li></ul></li></ul><ul><li>==<strong>如何锁定一行</strong>==<ul><li>在select xxx from  表明  where 要锁的那一行  for   update;</li><li>锁定后其他操作会被阻塞，直到锁定行会话的提交</li></ul></li></ul><ul><li>​     Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些， 但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，Innodb的整 体性能和MyISAM相比就会有比较明显的优势了。<br>​    但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</li></ul><ul><li>分析行锁定情况<ul><li>查看锁定情况<ul><li> show status like ‘%innodb_row_lock%’;</li></ul></li><li>各个状态变量<ul><li>Innodb_ row_ lock_ current_waits: 当前正在等待锁定的数量;</li><li><strong>Innodb_ row_lock_ time: 从系统启动到现在锁定总时间长度;</strong></li><li><strong>Innodb_ row_ lock_ time_ avg: 每次等待所花平均时间;</strong></li><li>Innodb_ row_ lock_ time_ max:从系统启动到现在等待最常的一次所花的时间;</li><li><strong>Innodb_ row_ lock_ waits: 系统启动后到现在总共等待的次数;</strong></li></ul></li></ul></li></ul><ul><li>优化建议：<ul><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能较少检索条件，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可能低级别事务隔离</li></ul></li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>slave会从master读取binlog来进行数据同步</p><p>复制的基本原理</p><p>MySQL复制过程分成三步:</p><ul><li>master将改变记录到二进制日志(binary log)。这些记录过程叫做二进制日志事件，binary log events;</li><li> slave将master的binary log events拷贝到它的中继日志(relay log) ; </li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复 制是异步的且串行化的</li></ul><p>复制的基本原则</p><ul><li>每个slave只有一个master</li><li>每个slave只能有一一个唯–的服务器ID</li><li>每个master可以有多个salve</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql高级 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
